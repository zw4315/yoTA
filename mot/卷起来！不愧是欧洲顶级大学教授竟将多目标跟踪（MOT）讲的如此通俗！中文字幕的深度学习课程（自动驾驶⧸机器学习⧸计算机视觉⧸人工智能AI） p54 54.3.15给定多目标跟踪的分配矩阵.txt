# Detected language: en (p=1.00)

[0.00s -> 9.44s]  For the assignment matrix in n-object tracking, it is important that it has a structure such
[9.44s -> 13.44s]  that it corresponds to a unique, valid association.
[13.44s -> 19.84s]  We define the assignment matrix as a matrix of size n by m plus n, and this encodes
[19.84s -> 24.76s]  the n objects, the m detections, and n misdetections.
[24.76s -> 30.52s]  The elements in the assignment matrix are either 0 or 1, and they encode if an object
[30.52s -> 34.80s]  under detection or misdetection are assigned or not.
[34.80s -> 40.62s]  The relationship between the association and the assignment matrix is that if we have
[40.62s -> 47.46s]  a detection, then theta i is equal to j, and then the element in A on row i and
[47.46s -> 53.56s]  column j is equal to 1, and if we have a misdetection, then theta i is equal to
[53.56s -> 60.14s]  0, and the element in A on row i and column m plus i is equal to 1.
[60.14s -> 64.50s]  And all of the remaining elements in the assignment matrix are 0.
[64.50s -> 69.44s]  So let's consider an example with two objects and one measurement.
[69.44s -> 72.80s]  And then we have three valid data associations.
[72.80s -> 77.18s]  The first data association is that we have two misdetections.
[77.18s -> 81.98s]  So theta 1 is equal to 0, and theta 2 is equal to 0.
[81.98s -> 88.86s]  It then follows that the element on row 1, column 2 is equal to 1, and the element on
[88.86s -> 95.50s]  row 2, column 3 is equal to 1, and all the remaining elements are 0.
[95.50s -> 101.38s]  A second data association is that object 1 is associated to the detection.
[101.38s -> 106.90s]  We then have that row 1, column 1 is equal to 1, and row 2, column 3 is equal
[106.90s -> 110.86s]  to 1, and again, all remaining elements are 0.
[110.86s -> 118.26s]  And the third and last valid association is that object 2 is associated to the detection.
[118.26s -> 125.30s]  In this case, row 1, column 2 is 1, and row 2, column 1 is 1, and all remaining elements
[125.30s -> 126.38s]  are 0.
[126.38s -> 131.84s]  So from this example, we can note a structure for the assignment matrix.
[131.84s -> 138.30s]  For all data associations, the elements on row 1, column 3, and row 2, column 2 are
[138.30s -> 140.00s]  always 0.
[140.00s -> 146.68s]  For each row, the sum over the columns is equal to 1, and for each column, the sum
[146.68s -> 150.06s]  over the rows is either 0 or 1.
[150.06s -> 154.82s]  And this structure for the assignment matrix has to do with the fact that it needs to
[154.82s -> 158.72s]  correspond to a unique valid association.
[158.72s -> 163.00s]  For a general assignment matrix, it has the structure that is shown here.
[163.00s -> 171.12s]  The left n-by-m submatrix encodes detections, so assignments between objects and detections.
[171.12s -> 179.04s]  The right n-by-n submatrix, specifically its diagonal, encodes missed detections.
[179.04s -> 185.02s]  So for the example that we just had a look at, with two objects and a single detection,
[185.02s -> 190.44s]  we have that the assignment matrix has the structure shown here, with the left two-by-one
[190.44s -> 195.16s]  submatrix and a right diagonal two-by-two submatrix.
[195.16s -> 201.16s]  Further, we have that for each row, the sum of the columns must equal 1.
[201.16s -> 206.26s]  The reason for this is that an object is either associated to one of the detections
[206.26s -> 212.04s]  or to a missed detection, and therefore exactly one of these values in each row must be
[212.04s -> 213.04s]  1.
[213.04s -> 217.88s]  If the sum was equal to 0, then we had not associated anything, which is not a valid
[217.88s -> 219.48s]  association.
[219.48s -> 226.72s]  And if the sum was something larger than 1, it means that we had an association to more
[226.72s -> 232.60s]  than one detection, which is not a valid association in point-object tracking.
[232.60s -> 238.00s]  Lastly, we have the sum of the rows in each column, and they must be equal to either
[238.00s -> 240.14s]  0 or equal to 1.
[240.14s -> 245.34s]  The reason for this is that a detection cannot be associated to more than one object,
[245.34s -> 247.80s]  so this value cannot be larger than 1.
[247.80s -> 253.32s]  It can be equal to 0, because in a valid data association, there might be measurements that
[253.32s -> 255.96s]  are not associated to any object.
[255.96s -> 262.70s]  Also, if an object is associated to a measurement, then it cannot simultaneously be associated
[262.70s -> 267.72s]  to a missed detection, and then the column sum corresponding to the missed detection
[267.72s -> 269.88s]  must be equal to 0.
[269.88s -> 275.30s]  It might seem counterintuitive that we encode the missed detections using this diagonal
[275.30s -> 281.00s]  submatrix, and the reason for having this specific structure can be explained using
[281.00s -> 282.44s]  some examples.
[282.44s -> 287.70s]  If the right submatrix was replaced by a vector, then we would have a problem that
[287.70s -> 292.70s]  at most one object could be missed detected in an assignment, and that means that not
[292.70s -> 297.60s]  all valid associations can be represented by the assignment matrix A.
[297.60s -> 302.12s]  If we consider the example with two objects and one measurement, if we have a vector
[302.12s -> 308.24s]  instead of the diagonal submatrix, then we only have two unique assignment matrices.
[308.24s -> 313.20s]  In this case, because of the constraints on how the row sums and the column sums,
[313.20s -> 319.08s]  we cannot use the assignment matrix to encode that both objects are missed detected.
[319.08s -> 323.98s]  And if we replaced the diagonal submatrix with a full matrix, then there would be multiple
[323.98s -> 329.34s]  different assignment matrices that would correspond to the same data association.
[329.34s -> 334.54s]  And that is a problem because we need each unique assignment matrix to correspond to
[334.54s -> 336.14s]  a unique association.
