# Detected language: en (p=1.00)

[0.64s -> 6.72s]  Welcome! So far, we've only had one object to track. Now we're going to generalize this to
[6.72s -> 12.32s]  multiple objects. To keep things simple, for the time being, we're going to assume that the number
[12.32s -> 18.56s]  of objects is constant and known to us. Of course, in real tracking applications, we cannot
[18.56s -> 23.20s]  know the number of objects. So later in the course, we will get rid of the assumption that
[23.20s -> 28.88s]  the number of objects is known. Previously in the course, we had a look at single object
[28.88s -> 35.28s]  tracking. In this case, we have exactly one object and its object state is denoted by xk.
[36.16s -> 41.92s]  We had missed detections and we also had clutter measurements. One way we can think about single
[41.92s -> 46.80s]  object tracking is that we have a car and we wish to do adaptive cruise control with a
[46.80s -> 52.48s]  minimum distance to the vehicle in front. To do so, we need to track the vehicle that is in
[52.48s -> 59.44s]  front of us, such that we can maintain at least this minimum distance. Naturally, other vehicles
[59.44s -> 64.72s]  on the road are also important, but for adaptive cruise control, our main focus is the
[64.72s -> 71.20s]  one vehicle in front of us. Now we're going to generalize the single object tracking to tracking
[71.20s -> 77.36s]  n objects. The number of objects is assumed to be both known and to be constant. We're going to
[77.36s -> 83.44s]  denote the object states by a matrix capital XK and the columns of this matrix are the states of
[83.44s -> 89.92s]  the individual objects. So just like in single object tracking, when we're tracking n objects,
[89.92s -> 96.64s]  we also have missed detections and we have clutter. So if we think of this in the context of
[96.64s -> 101.68s]  an autonomous vehicle, if we wish to do something more advanced than just maintaining a minimum
[101.68s -> 106.96s]  distance to the leading vehicle, then we need to track all vehicles and all other objects
[106.96s -> 112.64s]  and not just the vehicle that is right in front of us. Later in the course, we're going to relax
[112.64s -> 118.40s]  the assumption that the number of objects n is known and constant. And this will give us multiple
[118.40s -> 123.04s]  object tracking, or MOT, where we have an unknown and time varying number of objects.
[123.76s -> 128.80s]  And just like in tracking a single object or tracking n objects, we will still have missed
[128.80s -> 134.72s]  detections and clutter. Again, in the context of an autonomous vehicle, the difference between
[134.72s -> 139.92s]  multiple object tracking and n object tracking can be understood to mean that the objects can
[139.92s -> 145.28s]  enter and exit the field of view of the sensor. So new objects can appear in the surveillance area
[145.28s -> 150.56s]  and objects can disappear from the surveillance area. However, for the time being, we're going
[150.56s -> 157.20s]  to assume that the number of objects is known and constant. So what is the difference then
[157.20s -> 163.60s]  between tracking n objects and tracking just one object? Well, the main differences have to do
[163.60s -> 168.80s]  with the measurements. Previously, we had two measurement sources. Measurements could either
[168.80s -> 175.04s]  come from the single object or from clutter. Now we have n plus one sources. We have the n
[175.04s -> 181.44s]  objects and we have the clutter. Because we have many more measurement sources, there are many
[181.44s -> 186.72s]  more possible data associations. And this means that handling the data association becomes
[186.72s -> 193.28s]  considerably more difficult. So we can say that the main challenge in tracking n objects,
[193.28s -> 198.72s]  as compared to tracking just a single object, is the handling of the many data association hypothesis.
[200.16s -> 206.40s]  So what are we going to learn here then? Well, to begin with, we need some additional modeling.
[206.40s -> 210.72s]  Specifically, we need a model for the measurements from all n objects and from the
[210.72s -> 216.64s]  clutter. We need a model for the motion of all n objects. We need a prior for the states
[216.64s -> 221.04s]  of the n objects. And we also need some methods for handling the data association.
[221.84s -> 227.44s]  And we're also going to learn about some algorithms for tracking n objects. Specifically,
[227.44s -> 234.08s]  those are global nearest neighbor, or GNN filter, joint probabilistic data association,
[234.08s -> 238.80s]  or JPDA filter, and multi-hypothesis tracker, or MHT.
