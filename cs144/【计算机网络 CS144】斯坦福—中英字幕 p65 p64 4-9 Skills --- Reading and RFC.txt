# Detected language: en (p=1.00)

[0.00s -> 5.16s]  So this video is about how to read an RFC, or a quest for comments, the standards document
[5.16s -> 7.64s]  of the IITA, of the internet.
[7.64s -> 11.60s]  So reading RFCs is critical if you want to get a deeper understanding of how the
[11.60s -> 16.36s]  internet works, how its protocols are specified, but they're a document that's evolved over
[16.36s -> 19.52s]  several decades to have certain structures and certain approaches, and this video is
[19.52s -> 24.12s]  going to explain what that looks like and why.
[24.12s -> 29.36s]  There's actually an RFC, a quest for comments, 2555, which describes the history of RFCs,
[29.36s -> 31.60s]  sort of a historical retrospective.
[31.60s -> 38.80s]  The first one, the first RFC, RFC 1, was entitled Host Software, and this quote from RFC 1 talks
[38.80s -> 43.32s]  about where that name came from, the idea that these documents aren't statements of
[43.32s -> 47.68s]  control or assertion of control, but rather part of a dialogue.
[47.68s -> 52.76s]  And while RFCs today are a bit more formal than this first one, some thoughts on how
[52.76s -> 56.22s]  to structure host software, that still remains.
[56.22s -> 61.02s]  There's nobody who enforces RFCs, rather they're statements of a group of people about
[61.02s -> 62.84s]  what you need to do to interoperate.
[62.84s -> 66.22s]  You can always write things that don't follow RFCs, but if you want to interoperate, this
[66.22s -> 68.26s]  is what you do need to do.
[68.26s -> 74.22s]  So over time, RFCs have come to have a standardized format, so there's the structure
[74.22s -> 80.86s]  of the document, concerns of intellectual property, and also specific terms that RFCs
[80.86s -> 81.86s]  use.
[81.86s -> 84.38s]  Often you see them in capital words that have various, capital letters that have very
[84.38s -> 89.46s]  specific meaning, are all defined in RFC 2119.
[89.46s -> 93.90s]  Modern RFCs, for example, always have, are required to have two sections, security
[93.90s -> 96.80s]  considerations and considerations for IANA.
[96.80s -> 98.74s]  So security has obvious reasons.
[98.74s -> 104.82s]  IANA is if this RFC needs new value registries, say protocol fields or whether it allocates
[104.82s -> 108.82s]  fields in other protocols.
[108.82s -> 112.92s]  Now one thing that often a first-time reader doesn't quite realize, and it can be a bit
[112.92s -> 117.60s]  confusing, is that there are actually multiple types of RFCs, and they actually have very
[117.60s -> 122.92s]  different meanings and very different implications towards the standards process of the Internet.
[122.92s -> 127.68s]  So for example, there are proposed standards, standards track, informational, experimental,
[127.68s -> 128.68s]  and best current practice.
[128.68s -> 133.40s]  And the way to think of those is there's a spectrum of whether or not there's an idea
[133.40s -> 140.00s]  a couple of people have proposed, say experimental, or whether or not it's a specification or
[140.00s -> 144.48s]  it's simply some valuable information that's, an informational RFC can be not a protocol
[144.48s -> 147.52s]  but rather just some valuable information for the community.
[147.52s -> 149.92s]  Then you have proposed standards.
[149.92s -> 154.56s]  So here's something which a group of people believe should become a common standard of
[154.56s -> 155.56s]  the Internet.
[155.56s -> 157.12s]  And then standards track.
[157.12s -> 162.16s]  The transition between proposed standard and standards track, or standards track is further
[162.16s -> 166.92s]  along the process towards becoming a really stable standard of the Internet, has to do
[166.92s -> 171.16s]  with how many implementations there are, whether they can interoperate, and there's some formal
[171.16s -> 173.68s]  process for making the transition.
[173.68s -> 178.28s]  There are also RFCs that are best current practice, which state, based on our current
[178.28s -> 181.92s]  knowledge today, these are the things that you really want to do best practice, best
[181.92s -> 182.92s]  practices.
[182.92s -> 187.76s]  So for example, there are best current practices about how to implement TCP and its congestion
[187.76s -> 190.16s]  control algorithms.
[190.16s -> 193.20s]  So that's what an RFC looks like.
[193.20s -> 198.04s]  This is the basic process that an RFC takes, or a document takes to become an RFC.
[198.04s -> 199.04s]  This is a bit simplified.
[199.04s -> 206.24s]  This is actually my personal experience when working on the RFC for this algorithm
[206.24s -> 209.60s]  that came out of my research, Trickle.
[209.60s -> 212.88s]  So generally what happens is that the document starts as a draft.
[212.88s -> 216.76s]  And so when you see documents in the IETF named draft, they are not RFCs.
[216.76s -> 220.00s]  They are not formal documents.
[220.00s -> 222.88s]  Instead they are works in progress, and correspondingly they actually time out.
[222.88s -> 227.72s]  So if people don't update the draft, eventually it disappears off the IETF servers.
[227.72s -> 228.72s]  And so you start with a draft.
[228.72s -> 231.28s]  I mean, you notice that it's draft-levis.
[231.28s -> 232.90s]  This means that it's a personal draft.
[232.90s -> 237.16s]  It's a private, it's a personal submission that somebody, just a person, or maybe a few
[237.16s -> 242.04s]  people, are suggesting this document might be of interest to the Internet.
[242.04s -> 243.04s]  And then there's some information.
[243.04s -> 245.36s]  In this case, levis, that's me.
[245.36s -> 250.32s]  Roll was the IETF working group that it was the draft was being proposed for, the routing
[250.32s -> 252.24s]  over low power and lossy links.
[252.24s -> 254.54s]  And then a descriptive name, Trickle, the Trickle algorithm.
[254.54s -> 255.54s]  And then a number.
[255.54s -> 260.24s]  So this is version zero of this draft, so the first version of it.
[260.24s -> 264.24s]  Then you can submit that to a working group for some consideration, discussion.
[264.24s -> 268.56s]  Maybe it iterates a couple of times, makes some improvements, some modifications, and
[268.56s -> 269.68s]  the numbers increment.
[269.68s -> 272.92s]  So Trickle zero zero, Trickle zero one, Trickle zero two.
[272.92s -> 278.68s]  Then at some point, the chair of a working group can say, or ask the working group,
[278.68s -> 282.64s]  Do we think that this is something which should become a working group work item?
[282.64s -> 288.32s]  That is, is this a document or an idea or a protocol which the working group thinks is
[288.32s -> 293.00s]  part of its charter and should make more formal?
[293.00s -> 297.66s]  When it becomes a working group document, then the name changes from draft someone's name,
[297.66s -> 302.28s]  draft levis, to draft IETF to show that this is now a document under the full auspices
[302.28s -> 303.34s]  of a working group.
[303.34s -> 305.12s]  And you can see then it's still the roll working group.
[305.12s -> 309.08s]  At this point, the version number resets to zero zero.
[309.08s -> 310.74s]  Then it goes through revisions.
[310.74s -> 312.88s]  You present it at working group meetings.
[312.88s -> 317.44s]  You get feedback, comments on the mailing lists, questions, concerns.
[317.44s -> 322.08s]  The document iterates over versions, zero one, zero two, zero three.
[322.08s -> 327.04s]  At some point, the working group chair, or one of the working group chairs, they decide
[327.04s -> 332.28s]  that the document is ready for publication.
[332.28s -> 334.68s]  And so the working group chair can say, Look, I feel like this document's been through
[334.68s -> 335.68s]  a lot of revision.
[335.68s -> 336.68s]  We agree.
[336.68s -> 338.08s]  It seems like it's a good position.
[338.08s -> 340.08s]  It's something that's part of the working group's work.
[340.08s -> 342.40s]  We want to make this an RFC.
[342.40s -> 346.12s]  At that point, there's a last call issued first to the working group and then to the
[346.12s -> 347.12s]  IETF.
[347.12s -> 350.32s]  So the working group is given a chance, a period to respond, any final comments to
[350.32s -> 355.44s]  improve the document, after which then it's given a last call to the entire IETF.
[355.44s -> 359.56s]  Anyone can comment on it and suggest things to improve it.
[359.56s -> 363.40s]  After it's passed through those last calls, that is, all of the issues which people
[363.40s -> 368.12s]  have seen have been addressed to the satisfaction of the working group chair, it goes to the
[368.12s -> 372.72s]  IESG, the steering group, the Internet Engineering Steering Group, which has representatives
[372.72s -> 374.60s]  from all of the major areas of the Internet.
[374.60s -> 378.16s]  So you have both tremendous depth, people who are, say, experts in transport, experts
[378.16s -> 381.40s]  in real-time application infrastructure.
[381.40s -> 385.24s]  But then, because it's all of the experts, it also has tremendous breadth, everything
[385.24s -> 391.80s]  from the network to operations to transport.
[391.80s -> 394.76s]  The IESG reviews it, gives feedback, gives comments.
[394.76s -> 397.52s]  Sometimes they refuse to publish it as an RFC.
[397.52s -> 402.72s]  They say that this is not, this has substantive issues which we see, you need to completely
[402.72s -> 404.52s]  rework it.
[404.52s -> 408.20s]  But if things go well, the IESG gives some comments to address those comments, and then
[408.20s -> 413.60s]  the document is approved as an RFC, a request for comments.
[413.60s -> 420.96s]  So as described in RFC 2119, there are certain terms which are used in RFCs which
[421.00s -> 426.04s]  have very specific meanings with respect to interoperability and proposed standards.
[426.04s -> 429.96s]  And so these are those terms, and when they're used, they're used in all caps.
[429.96s -> 432.72s]  So the first is must, required, and shall.
[432.72s -> 436.64s]  If you see this term used in an RFC, then this is an absolute requirement.
[436.64s -> 442.64s]  If a protocol or implementation does not follow this statement, then it is not, it does
[442.64s -> 443.64s]  not follow the RFC.
[443.64s -> 445.76s]  It is not compliant.
[445.76s -> 448.00s]  Then there should, recommended.
[448.00s -> 452.12s]  And so the should and recommended are things you really generally want to do, it's really
[452.12s -> 455.96s]  advised that you do it, but it's understood that there might be times when you don't
[455.96s -> 457.12s]  for whatever reason.
[457.12s -> 463.48s]  And so the terminology that's used in 2119 is that you really should understand the
[463.48s -> 467.64s]  implications of not doing this if you're going to choose to not do it.
[467.64s -> 469.28s]  And then finally there's may optional.
[469.28s -> 473.52s]  And so this is, it's totally up to you, you can do it, you can not do it, it is not
[473.52s -> 477.10s]  required for interoperability in any way.
[477.10s -> 479.78s]  And so when you read an RFC, it's important to see these terms and how they're used to
[479.78s -> 484.58s]  then understand what the RFC is really saying you have to do to be compliant.
[484.58s -> 489.10s]  So I thought as an example we could walk through RFC 5681.
[489.10s -> 490.78s]  This is TCP congestion control.
[490.78s -> 496.26s]  As you can see, it's standards track, so this is pretty well along, and it was written
[496.26s -> 502.14s]  back in 2009 by a bunch of folks who are bigwigs in the internet.
[502.14s -> 509.54s]  And so one thing you can see is in fact the history of this document in terms of drafts.
[509.54s -> 514.14s]  So there's draft IETF and it went through all of these revisions and you can see what
[514.14s -> 515.14s]  the revisions are.
[515.14s -> 518.10s]  The earlier revision that this, what this obsolete is 2581.
[518.10s -> 522.34s]  And so this particular IETF draft went through seven revisions before becoming an RFC.
[522.34s -> 525.10s]  So let's go back to the RFC.
[525.10s -> 528.86s]  So as you can see there's an abstract sort of stating what it's about, other copyright
[528.86s -> 534.58s]  notes, but intellectual property, some background.
[534.58s -> 537.50s]  It defines a bunch of terms which are used in this.
[537.50s -> 543.92s]  But if we jump forward, so here, say in section three, it's defining the congestion
[543.92s -> 546.78s]  control algorithms of TCP.
[546.78s -> 551.02s]  Slow start, congestion avoidance, fast retransmit, and fast recovery.
[551.02s -> 555.38s]  And so you note, for example, one of the first requirements this document states is
[555.38s -> 562.18s]  that it's okay for a TCP sender to send more slowly than what these algorithms say
[562.18s -> 565.66s]  in order, in order to back off more aggressively to congestion.
[565.66s -> 567.88s]  But it must not be more aggressive.
[567.88s -> 572.34s]  That these, what this document describes are basically the upper bounds of what TCP
[572.34s -> 573.34s]  should do.
[573.34s -> 576.52s]  It should never send faster than this because to do so might cause a problem.
[576.52s -> 578.86s]  So then here's another specification.
[578.86s -> 583.06s]  It says the initial value of the congestion window, so when you start a TCP connection,
[583.06s -> 588.38s]  what the congestion window's initial window is, it must be set following these parameters.
[588.38s -> 591.98s]  So basically, if you have large segment sizes, then it should be two segments.
[591.98s -> 595.46s]  If you have medium-sized segments, it can be up to three segments.
[595.46s -> 597.94s]  And if you have small segments, it can be up to four segments.
[597.94s -> 601.78s]  There's a statement of, if you want to follow TCP congestion control properly, here's
[601.78s -> 605.70s]  what your initial segment size can be, the initial congestion window size.
[605.70s -> 607.34s]  So those are examples of musts and must nots.
[607.34s -> 609.40s]  Here's an example of a should.
[609.40s -> 614.78s]  So this ssthresh is saying, what is the initial slow start threshold?
[614.78s -> 619.04s]  The initial threshold at which we're going to transition from slow start to congestion
[619.04s -> 620.40s]  avoidance.
[620.40s -> 623.32s]  And so this document says that the initial value should be very, very high, so that
[623.32s -> 628.28s]  you just do slow start until essentially you get a loss, and then you drop into congestion
[628.28s -> 629.28s]  avoidance.
[629.28s -> 635.20s]  However, you know, it can be smaller if you'd like, and so it should be set arbitrarily
[635.20s -> 636.20s]  high.
[636.20s -> 637.60s]  But you cannot set it arbitrarily high.
[637.60s -> 641.52s]  So you should understand, however, the implications of what will happen if you
[641.52s -> 642.52s]  do this.
[642.52s -> 647.24s]  Finally, here's an example of, in fact, a may and a should and a must not.
[647.24s -> 651.04s]  So this is talking about when TCP is in congestion avoidance, and it's incrementing
[651.04s -> 655.48s]  its congestion window, it says, oh, you may increment congestion window by a certain
[655.48s -> 656.48s]  number of bytes.
[656.48s -> 657.48s]  In fact, you don't have to.
[657.48s -> 658.92s]  You could just not if you want to.
[658.92s -> 660.88s]  You could not increase it.
[660.88s -> 667.40s]  But it should increment it once per RTT by this equation, and it must not increment
[667.40s -> 669.48s]  it more than this amount.
[669.48s -> 673.32s]  So this is basically saying, hey, here's the upper bound.
[673.32s -> 678.00s]  And you should not ever do it more than that upper bound, but you generally want
[678.00s -> 679.00s]  to follow this equation.
[679.00s -> 680.32s]  You should follow this equation.
[680.32s -> 686.28s]  So all this aside, remember, so this document is saying something about how large the congestion,
[686.28s -> 689.04s]  how large the initial window size should be.
[689.04s -> 692.72s]  It must be this number of segments, two segments for large segment sizes, three for
[692.72s -> 695.60s]  medium size, four for small segments.
[695.60s -> 698.92s]  But remember, this is just an RFC, right?
[698.92s -> 702.08s]  You can say that somebody isn't compliant, but nobody is going to enforce it.
[702.08s -> 705.20s]  In fact, if you look at this web page here, there is this really interesting blog
[705.20s -> 710.32s]  post from about two years ago about how Google and Microsoft were not following
[710.32s -> 711.32s]  this RFC.
[711.32s -> 712.68s]  So if you want, you can look this up.
[712.68s -> 717.12s]  This is Ben Strong's blog, if you search for Google, Microsoft congestion window cheat.
[717.12s -> 721.28s]  And essentially what he found is that when you first connect to Google or Microsoft
[721.28s -> 725.48s]  sites, their initial window is significantly larger than two.
[725.48s -> 729.36s]  That is, they will send you more than two segments, essentially, so that they can send
[729.36s -> 732.52s]  you their whole web page in just one round trip time and not having to wait for the
[732.52s -> 735.84s]  congestion window to increase.
[735.84s -> 739.80s]  And so he walks through all the experimental evidence that he gathered, and he shows that
[739.80s -> 741.24s]  these guys were not following the rules.
[741.24s -> 744.56s]  Since there's been then discussion in the IETF about maybe we need to increase these
[744.56s -> 746.48s]  sizes, networks are getting faster.
[746.48s -> 749.64s]  But the point here being that just because it's written in an RFC and it says you must
[749.64s -> 752.28s]  do something, doesn't necessarily mean that everyone always does.
