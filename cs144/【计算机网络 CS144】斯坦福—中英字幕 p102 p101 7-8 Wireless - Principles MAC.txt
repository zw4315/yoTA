# Detected language: en (p=1.00)

[0.00s -> 4.00s]  So in this video, I'm gonna talk about wireless media access control, and why it
[4.00s -> 8.00s]  is that the media access control algorithms we see in wired systems, like
[8.00s -> 12.00s]  CSMA, Carrier Sense Multiple Access CD, collision detection, don't work in
[12.00s -> 17.00s]  wireless. So recall the basic goals of the media access control protocol.
[17.00s -> 21.00s]  There's essentially three, which is that you want to arbitrate control of
[21.00s -> 25.00s]  the channel, who gets to transmit when, while simultaneously trying to
[25.00s -> 28.00s]  achieve three things. And generally, you can't achieve all of them
[28.00s -> 31.00s]  simultaneously, so you trade off between them. The first is that if there's only
[31.00s -> 34.00s]  one node that wants to transmit, it should be able to get 100% of the medium.
[34.00s -> 38.00s]  The second goal is that if you have multiple nodes trying to transmit, they
[38.00s -> 42.00s]  should each get a fair share of the medium, so say one nth. Finally, if
[42.00s -> 46.00s]  there's lots of nodes contending, you'd like it that the medium is being used
[46.00s -> 50.00s]  heavily. So if that one nth is only one thousandth of the medium, that's not
[50.00s -> 54.00s]  very useful. So these are the three goals that we have in a media access
[54.00s -> 59.00s]  control protocol. So recall, so Ethernet CSMA CD Carrier Sense Multiple Access
[59.00s -> 64.00s]  Collision Detection has a simple approach. On transmission, you set a
[64.00s -> 68.00s]  counter N. If the channel's idle, you just sense the voltages on your wire,
[68.00s -> 74.00s]  you transmit. If it's busy, you wait until it's idle for 96 bit times, is
[74.00s -> 80.00s]  this timing thing in Ethernet, and then you transmit. During a transmission,
[80.00s -> 84.00s]  you can detect a collision. That is, you hear that you're transmitting some zeros
[84.00s -> 88.00s]  and ones, but what you hear is different than that, that you hear some other ones
[88.00s -> 92.00s]  and you thought you were transmitting zeros. So if you detect a collision, the
[92.00s -> 96.00s]  voltage is different than what you'd expect. You wait 96 bit times, and then
[96.00s -> 100.00s]  if there's, sorry, if there's no collision, then you just wait 96 bit
[100.00s -> 104.00s]  times, that transmitted fine, and you will then transmit again. If you do
[104.00s -> 108.00s]  collect, detect a collision, then you send a jam signal so everyone knows that
[108.00s -> 112.00s]  there's a collision just to be sure, and then you back off, and this back off is
[112.00s -> 117.00s]  exponentially increasing. And you check the channel again. So there's this idea
[117.00s -> 122.00s]  that you start transmitting if the channel is idle. If the channel, you
[122.00s -> 127.00s]  hear a collision, then you transmit a jam signal and you back off and you
[127.00s -> 131.00s]  wait. So Carrier Sense Multiple Access Collision Detection, you can detect a
[131.00s -> 135.00s]  collision. So it turns out that this approach does not work on wireless. And
[135.00s -> 139.00s]  the basic reason is this, this step here, if collision detected. The
[139.00s -> 144.00s]  problem is that the transmitter is transmitting a signal which is being
[144.00s -> 149.00s]  received at the receiver. The transmitter is gonna hear its own signal
[149.00s -> 153.00s]  at a really, really high signal strength. You know, it's right next to
[153.00s -> 157.00s]  itself. But it can't necessarily hear what's happening at the receiver. In a
[157.00s -> 162.00s]  wired network, because there's so little attenuation ever distance, the
[162.00s -> 166.00s]  receiver and transmitter share their observation of the environment. You know,
[166.00s -> 169.00s]  if the, if the receiver is hearing a signal, then the transmitter's gonna hear
[169.00s -> 172.00s]  that signal as well, cuz it's gonna propagate along the wire with very little
[172.00s -> 176.00s]  attenuation. But that's not true in wireless. In wireless, it could be that
[176.00s -> 180.00s]  the interfering transmitting signal is too weak for the transmitter to hear. So
[180.00s -> 183.00s]  here's a, let me show you an example of this. So here we have A, B, and C.
[183.00s -> 191.00s]  And so A is our transmitter. And it's transmitting a packet to B. B is
[191.00s -> 197.00s]  receiving this packet just fine. Then simultaneously, C starts transmitting to
[197.00s -> 203.00s]  B. Now, C is, B is able to hear C's signal. B is able to hear A's signal.
[203.00s -> 208.00s]  When they both arrive, it just hears garbage. There's interference. But it
[208.00s -> 213.00s]  turns out that C's signal, because it's decaying with at least the square of the
[213.00s -> 218.00s]  distance, is too weak for A to hear. In particular, because A's own signal is
[218.00s -> 224.00s]  so powerful, it's, it's shouting. And C is coming from far away. Even if C's
[224.00s -> 230.00s]  signal was strong enough for A to hear, A can't hear C's signal over its own.
[230.00s -> 235.00s]  Because its signal is, say, way up here, you know, at some, like, let's say,
[235.00s -> 240.00s]  minus 20, DBM. Whereas C's signal is arriving at, say, minus 80 DBM. A
[240.00s -> 245.00s]  can't hear it. It's trying to hear a whisper while it's shouting. It can't
[245.00s -> 250.00s]  hear. There's indifference in contrast to a wire, where C's signal would arrive,
[250.00s -> 254.00s]  you know, at, say, minus 21 DBM. It wouldn't attenuate very much at all,
[254.00s -> 258.00s]  and so A would still be able to hear it. And so the problem here is that A
[258.00s -> 263.00s]  can't detect the collision at B. So CSMA CD doesn't work. So what this means
[263.00s -> 267.00s]  in practice is that wireless networks, in order to be able to respond to
[267.00s -> 271.00s]  collisions, in order to get good utilization of the channel, use
[271.00s -> 272.00s]  different algorithms.
[275.00s -> 280.00s]  .
[280.00s -> 285.00s]  .
[285.00s -> 290.00s]  .
[290.00s -> 295.00s]  .
[295.00s -> 300.00s]  .
