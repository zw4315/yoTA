# Detected language: en (p=1.00)

[0.00s -> 5.00s]  So in this video about the physical error, I'm gonna talk about bit errors and coding.
[5.00s -> 9.00s]  A way to introduce some redundancy into data is that you can protect yourself
[9.00s -> 13.00s]  against bit errors. So recall that the Shannon limit, the
[13.00s -> 18.00s]  capacity of a communication channel is determined by the bandwidth and then the
[18.00s -> 21.00s]  base two log of one plus the signal to noise ratio.
[21.00s -> 25.00s]  And so basically what this means is that in practice, the available data
[25.00s -> 29.00s]  rate, the possible data rate is bounded by this signal to noise ratio.
[29.00s -> 31.00s]  So if your signal is stronger, you can send data faster.
[31.00s -> 34.00s]  If the noise on your circuits is lower, you can send data faster.
[34.00s -> 37.00s]  What's important is that this is a theoretical limit.
[37.00s -> 41.00s]  Just because we know we can't do better, doesn't mean we know how to get there.
[41.00s -> 44.00s]  In fact, few systems today can actually get there.
[44.00s -> 47.00s]  We're getting close, but it doesn't actually say how to do it, just that
[47.00s -> 51.00s]  it's impossible to do better. So often for a variety of reasons,
[51.00s -> 56.00s]  your bandwidth is typically fixed. Say, if you are operating in some
[56.00s -> 60.00s]  unlicensed spectrum, like your Wi-Fi or something, the FCC says, hey, you can't
[60.00s -> 62.00s]  do more than this. You can't use more than this bandwidth.
[62.00s -> 66.00s]  And so often what systems are trying to do is improve the signal to noise
[66.00s -> 69.00s]  ratio. But basically what it means is that if
[69.00s -> 72.00s]  your signal strength is higher, then you can transmit data faster.
[72.00s -> 76.00s]  You can either transmit symbols shorter, you can transmit them for shorter
[76.00s -> 79.00s]  periods of time, or you can put more bits per symbol.
[79.00s -> 84.00s]  You can make your actual constellation denser, the IQ constellation.
[84.00s -> 88.00s]  So here we're transmitting this perfect black signal.
[88.00s -> 92.00s]  But the problem is that this perfect wave, because there's noise on the
[92.00s -> 97.00s]  receiver just in the hardware, what we receive is closer to this red signal, all
[97.00s -> 101.00s]  of this noise introduced. And so let's take a step back and
[101.00s -> 104.00s]  think, what does that mean? How would that appear to a receiver?
[104.00s -> 107.00s]  So let's go back to this 16 QAM constellation I showed you when
[107.00s -> 110.00s]  talking about IQ modulation and signal modulation.
[110.00s -> 113.00s]  So this is a constellation used in HSPDA, a 3G data standard.
[113.00s -> 117.00s]  And so recall, we have these 16 points with different I and Q values.
[117.00s -> 121.00s]  Well, so if there's no noise in the system, then when a signal arrives,
[121.00s -> 124.00s]  it's gonna be exactly on one of these points.
[127.00s -> 131.00s]  But in practice, it's not, right? That there's some noise the system is
[131.00s -> 133.00s]  introduced. And so let's pretend, for example,
[133.00s -> 136.00s]  that we have some very low noise reception, such that the signal strength
[136.00s -> 140.00s]  is much higher than the noise. Then, well, rather than seeing this
[140.00s -> 143.00s]  exact point here, we're gonna see something like this.
[143.00s -> 147.00s]  The noise is gonna cause the signal to jitter around a bit, but it's still
[147.00s -> 150.00s]  pretty clear from the constellation that it's this symbol.
[152.00s -> 157.00s]  Similarly, if we were receiving this symbol, well, there's gonna be some noise.
[158.00s -> 163.00s]  But because the signal is much stronger than the noise, these little jitters
[163.00s -> 167.00s]  aren't very big, and it's clear that it's this symbol.
[167.00s -> 170.00s]  But now, what happens if we're in a higher noise environment?
[170.00s -> 175.00s]  Well, what that means is rather than the signal, the received signal, or what
[175.00s -> 180.00s]  we're gonna observe being like this, it might be like this, where the noise
[180.00s -> 185.00s]  causes the received signal to have all kinds of different phases and amplitudes
[185.00s -> 188.00s]  than we expect because of this noise in the system.
[188.00s -> 194.00s]  And fundamentally, this means that there will be some points in which we get,
[194.00s -> 199.00s]  we make the wrong conclusion about what this symbol is.
[199.00s -> 204.00s]  So in these cases, for example, what we thought we received, well, we were
[204.00s -> 210.00s]  trying to receive 0000, our system might think it was 0011 or 0001 or
[210.00s -> 215.00s]  1000 or 0100. So this is how bit errors are introduced.
[215.00s -> 221.00s]  It's when your constellation, it's when the signal to noise ratio is such that
[221.00s -> 226.00s]  some of the symbols are mis-recorded or misunderstood.
[226.00s -> 230.00s]  And you can imagine if we had had a sparser constellation, like let's say we
[230.00s -> 234.00s]  only had two points, here and here, then this degree of noise would have
[234.00s -> 236.00s]  been fine. It wouldn't have caused us to jump
[236.00s -> 238.00s]  all the way from here over onto this side.
[238.00s -> 242.00s]  But for this particular density of constellation, the noise was great enough
[242.00s -> 246.00s]  to introduce some bit errors. And so it turns out that there's a
[246.00s -> 249.00s]  really deep theory on exactly how this works and what's possible and what bit
[249.00s -> 252.00s]  error rates are. And so you can say, given for a given
[252.00s -> 256.00s]  modulation scheme and a signal to noise ratio, you can just analytically compute
[256.00s -> 260.00s]  what your expected bit error rate is. There's some mathematical assumptions
[260.00s -> 264.00s]  that are made, but this is sort of the bedrock assumption, the bedrock
[264.00s -> 267.00s]  principles of RF communication theory that served us so well.
[267.00s -> 272.00s]  What's important here is that bit error rate can become arbitrarily low, but it
[272.00s -> 275.00s]  never reaches zero. The way noise behaves, it's possible,
[275.00s -> 279.00s]  although very rare, you might have this huge spike in noise just for a moment.
[279.00s -> 283.00s]  It happens to be at that point, a whole bunch of things happen at once.
[283.00s -> 286.00s]  And so the bit error rate never reaches zero.
[286.00s -> 291.00s]  And what this sort of turns out in practice is that in general, sending
[291.00s -> 296.00s]  packets just as raw bits, like say picking your constellation such that you
[296.00s -> 301.00s]  have the right number of bits per symbol, and then just directly
[301.00s -> 306.00s]  translating from bits in a packet into bits in symbols, turns out to rarely be
[306.00s -> 310.00s]  the most efficient way to use the channel, just because there's this
[310.00s -> 313.00s]  non-zero, small probability of bit error.
[313.00s -> 317.00s]  But the issue of course is that if you want to make that probability very,
[317.00s -> 321.00s]  very low, low enough that it's unlikely that any bit will be in error, well
[321.00s -> 325.00s]  then, just due to the way this works, you're going to be doing much better
[325.00s -> 329.00s]  than you need to in general by optimizing for this very rare case of a tiny
[329.00s -> 333.00s]  spike, which might occur in any of the bits of your, say, 12,000-bit long or
[333.00s -> 338.00s]  1,500-byte packet. Many of the bits in terms of the actual
[338.00s -> 342.00s]  symbols in terms of that constellation are doing just absolutely great, but you've
[342.00s -> 345.00s]  sort of over-protected for this one outlier.
[345.00s -> 349.00s]  And so in practice, if you just directly map your bits to the symbols,
[349.00s -> 353.00s]  your system is going to operate well, well below the capacity, well, well
[353.00s -> 356.00s]  below the Shannon limit. And so in practice, what you do with
[356.00s -> 361.00s]  the physical layer is you take, say, here are bits, let's say we have a message
[361.00s -> 366.00s]  that says hello, so H-E-L-L, oh, question, oh, oh, comma, which are these
[366.00s -> 371.00s]  ASCII values, maps to these bits. Here are our packet, here's our packet
[371.00s -> 374.00s]  data. Then do is transform this packet data
[374.00s -> 379.00s]  into symbols with some amount of redundancy, so some amount of error
[379.00s -> 383.00s]  correcting codes. So the packet will actually get a
[383.00s -> 389.00s]  bit longer in terms of the number of bits we're sending at the physical layer.
[389.00s -> 396.00s]  So here, say we have 48 bits. And we might send in terms of symbols,
[396.00s -> 399.00s]  say, 60 bits. So there's 12 extra bits.
[399.00s -> 403.00s]  We arrange this in something called coding so that if a couple of those
[403.00s -> 407.00s]  bits are wrong, we can recover from that and still get the original 48 bits.
[407.00s -> 411.00s]  So even if there are a couple of, couple of bidders in here, we'll still
[411.00s -> 414.00s]  receive the packet and be able to recover the data just fine.
[414.00s -> 418.00s]  And so this is coding, the idea of adding a little bit of redundancy at the
[418.00s -> 420.00s]  physical layer. You can do it anywhere, but it's
[420.00s -> 423.00s]  almost always done at the physical layer, so coding is not a physical layer
[423.00s -> 426.00s]  specific idea to improve your link layer throughput.
[426.00s -> 430.00s]  By adding a bit of redundancy, you can protect against a few bit errors, or
[430.00s -> 432.00s]  sort of what your expected rate of bit errors are.
[432.00s -> 435.00s]  And this will, in aggregate, although you're making it a bit longer, will
[435.00s -> 439.00s]  improve the throughput of the system. It's true both in theory and in
[439.00s -> 442.00s]  practice. So a term that's often used is coding
[442.00s -> 446.00s]  gain, which is the ratio of bits at the link layer to the bits at the physical
[446.00s -> 448.00s]  layer. So if you hear somebody talk about,
[448.00s -> 453.00s]  say, one-half code, what that means is that if I have a packet that's n bits
[453.00s -> 458.00s]  long at the link layer, I turn it into two n bits at the physical layer.
[458.00s -> 464.00s]  Or a three-four code is each three bits, so three n bits become four n bits at
[464.00s -> 468.00s]  the physical layer. So we have this redundancy, so we
[468.00s -> 474.00s]  can correct against some bit errors. So here's an example of a very, this is a
[474.00s -> 480.00s]  very, very simple wireless physical layer 802.15.4, also called Zigz.
[480.00s -> 486.00s]  Also, it's used in Zigbee. 802.15.4 uses quadrature phase shift
[486.00s -> 489.00s]  keying. And so, each one, each actual
[489.00s -> 494.00s]  transmitted symbol has two bits. And what 802.15.4 does is it combines
[494.00s -> 498.00s]  two of these QPSAs, QPSK symbols, into a four-bit symbol.
[498.00s -> 501.00s]  So it's what it calls these four-bit symbols.
[501.00s -> 504.00s]  There are sixteen of them, two to the fourth.
[504.00s -> 508.00s]  And each one then maps to 32 QPSK chips.
[508.00s -> 513.00s]  So, so here are symbols at the link layer, and here are symbols at the
[513.00s -> 517.00s]  physical layer. And so we take, say, four bits at
[517.00s -> 522.00s]  the link layer, and turn it into 32 bits at the physical layer, which is
[522.00s -> 526.00s]  sixteen QPSK symbols. And so, if I say I want to transmit a
[526.00s -> 531.00s]  packet that has 0001, then actually what's transmitted at the physical layer
[531.00s -> 534.00s]  is this sequence of bits in terms of QPSK symbols.
[534.00s -> 538.00s]  So we can then figure out what's the data rate, or what's the symbol rate,
[538.00s -> 542.00s]  what's going on with 802.15.4. So it turns out the bit rate at the
[542.00s -> 545.00s]  link layer is 250 kilobits per second.
[545.00s -> 551.00s]  The coding rate, you have sixteen chips of two bits, that's 32 bits.
[551.00s -> 557.00s]  Is that the physical layer becomes four bits at the link layer.
[557.00s -> 564.00s]  So we have what is a one-eighth code. Four physical layer bits become one
[564.00s -> 568.00s]  link layer bit, although they're in clusters of four and 32.
[568.00s -> 572.00s]  So based on this, if we are transmitting 250 kilobits per second at
[572.00s -> 575.00s]  the link layer, and we have a one-eighth code, how many symbols are we
[575.00s -> 579.00s]  transmitting per second? How quickly is 802.15.4 modulating the
[579.00s -> 583.00s]  signal? Well, each of the symbols has two bits,
[583.00s -> 588.00s]  and it's this one-eighth code. And so, when we look at it is that the
[588.00s -> 593.00s]  physical layer, right, we're transmitting eight times that bits per
[593.00s -> 597.00s]  second. So eight times 250 kilobits per second,
[597.00s -> 601.00s]  which is equal to two megabits per second.
[601.00s -> 606.00s]  At the physical layer, since each symbol physical layer has two bits, this means
[606.00s -> 616.00s]  that 802.15.4 transmits one million symbols per second.
[616.00s -> 620.00s]  Or in other ways, each symbol is one microsecond.
[620.00s -> 625.00s]  So let's look at a more modern or sort of a more advanced physical layer.
[625.00s -> 630.00s]  So this is what 802.11n, very, a reasonably recent Wi-Fi standard uses.
[630.00s -> 634.00s]  So most, you know, Wi-Fi stuff you buy today is 802.11n.
[634.00s -> 638.00s]  And so it turns out there's all these different schemes it can use.
[638.00s -> 642.00s]  But here's just a subset of them. And so you can see for these eight,
[642.00s -> 646.00s]  there's a bunch of different modulations, BPSK, binary phase shift
[646.00s -> 650.00s]  keying, quadrature phase shift keying, 16, 16 QAM, 64 QAM.
[650.00s -> 654.00s]  Different coding gains, so one-half, one-half, three-quarter, one-half,
[654.00s -> 657.00s]  five-sixths. And from that, you can then figure
[657.00s -> 661.00s]  out, given the data rate, here's the actual data rate in megabits per second.
[661.00s -> 664.00s]  Here are the different data rates of these physical layer supports.
[664.00s -> 668.00s]  So for example, if you're using MCX index seven, this is the determination
[668.00s -> 671.00s]  of the standard of what the coding system is.
[671.00s -> 676.00s]  We can get up to 150 megabits per second. And that's if you're using a 64
[676.00s -> 679.00s]  QAM constellation with a five-sixth coding.
[679.00s -> 683.00s]  As you notice here that there's these different channels, right?
[683.00s -> 687.00s]  Remember that the, the data that we get is also not only the signal-to-noise
[687.00s -> 689.00s]  ratio, but it's also based on the channel.
[689.00s -> 694.00s]  And so here with a 20 megahertz versus a 40 megahertz channel, you can see with a
[694.00s -> 698.00s]  40 megahertz channel, we're a little better than twice as fast.
[698.00s -> 702.00s]  The reason why we're a little better is cuz these time values are fixed.
[702.00s -> 705.00s]  And so these things are fixed so we can do a little bit better than half.
[705.00s -> 708.00s]  If there were no time values, it would be directly half.
[708.00s -> 711.00s]  Plus there's also some guards. But, so you can generally double the
[711.00s -> 714.00s]  channel, you're just about doubling the throughput.
[714.00s -> 717.00s]  So, in overview. You wanna talk about chips which are
[717.00s -> 720.00s]  down at the physical layer, the representation of the signal physical
[720.00s -> 723.00s]  layer versus bits, which is the representation of the link layers.
[723.00s -> 726.00s]  The link layer has a whole bunch of bits, and then pass them down to the
[726.00s -> 728.00s]  physical layer, they're turned into chips.
[728.00s -> 730.00s]  Now, physical layer has to deal with noise.
[730.00s -> 733.00s]  It's an actual physical medium, noise from the hardware circuits, from the
[733.00s -> 735.00s]  environment, et cetera. This can cause chip errors.
[735.00s -> 739.00s]  If you have a denser modulation, then you can have higher throughput
[739.00s -> 741.00s]  because you can represent more bits per symbol.
[741.00s -> 745.00s]  But a denser modulation is less robust to noise because just the, the
[745.00s -> 747.00s]  distance between the different symbols.
[747.00s -> 749.00s]  And so a sparser modulation has fewer errors.
[749.00s -> 752.00s]  So a big tension is what exactly is the modulation you use.
[752.00s -> 756.00s]  We saw in 802.11n, there's a bunch of different modulations that are used for
[756.00s -> 760.00s]  different signal to noise ratios, which give you different actual
[760.00s -> 763.00s]  throughputs. So then how do you translate between
[763.00s -> 765.00s]  these link layer bits and physical layer bits?
[765.00s -> 768.00s]  It turns out that just a one to one mapping is rarely a good idea.
[768.00s -> 772.00s]  It might be the most efficient in terms of just raw bits, but the problem is
[773.00s -> 776.00s]  that the probability of bit errors mean you want some redundancy.
[776.00s -> 779.00s]  That's rarely going to let you get close to the Shannon capacity.
[779.00s -> 783.00s]  So you talk about something called a coding gain, which is the layer two to
[783.00s -> 787.00s]  layer one ratio. And because layer one will represent
[787.00s -> 791.00s]  each bit at the, at the link layer with more than one bit at its layer,
[791.00s -> 793.00s]  you can recover from some chip errors.
[793.00s -> 797.00s]  So we saw an example, 802.11n, where you see anything from a one-half coding
[797.00s -> 800.00s]  gain to a five-sixth coding gain, under all kinds of different
[800.00s -> 805.00s]  constellations, ranging from BPSK, binary phase shift keying, to 64 qualms, 64
[805.00s -> 807.00s]  quadrature amplitude modulation.
