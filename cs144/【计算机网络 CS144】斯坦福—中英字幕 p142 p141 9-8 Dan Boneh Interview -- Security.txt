# Detected language: en (p=1.00)

[0.00s -> 7.36s]  Great, so here I have Dan Boonet, who some of you I hope know, a fellow faculty, in fact
[7.36s -> 12.76s]  senior to me in the department, who researches cryptography and security.
[12.76s -> 16.32s]  So Dan, how did you get into cryptography and security in computer systems?
[16.32s -> 17.32s]  What's your background?
[17.32s -> 18.32s]  Oh, thanks Phil.
[18.32s -> 21.80s]  First of all, it's a pleasure to do this, I'm happy to help with this.
[21.80s -> 25.68s]  Let's see, I fell in love with crypto at a very, very young age.
[25.68s -> 32.52s]  I think it's one of these things where like, for god knows why, but like my dad for some
[32.52s -> 37.24s]  reason taught me the RSA algorithm when I was like nine years old, and I just got completely
[37.24s -> 38.24s]  fascinated by this.
[38.24s -> 41.28s]  You know, these big numbers and all of a sudden there are these codes, and then
[41.28s -> 45.56s]  I went in and kind of encrypted a message to my friend with RSA and he thought I was
[45.56s -> 46.56s]  completely nuts.
[46.56s -> 51.28s]  But that kind of stuck with me, and then as I got to college and I learned more about
[51.28s -> 54.28s]  crypto, I just realized it's such a fantastic field.
[54.28s -> 59.64s]  You know, it's an area where you get to use really deep math, literally 20th century
[59.64s -> 64.76s]  math is like as advanced as the mathematics is used in computer science gets, and at
[64.76s -> 67.16s]  the same time we get to use it for real world applications.
[67.16s -> 69.20s]  So people really do care about the results.
[69.20s -> 73.96s]  In fact, you know, when you communicate with Google these days, the key exchange that you're
[73.96s -> 77.64s]  doing is using what's called elliptic curve Diffie-Hellman.
[77.64s -> 84.48s]  And it's using extremely advanced mathematics, as I said, 20th century mathematics, and it's
[84.48s -> 85.48s]  amazing.
[85.48s -> 89.04s]  This is like people use this all day long, every day, without even realizing that they're
[89.04s -> 90.04s]  doing it.
[90.04s -> 95.64s]  So for me, it's just a lot of fun to kind of work in an area that involves both deep
[95.64s -> 98.76s]  math and yet has real world applications.
[98.76s -> 102.40s]  I should say more broadly, I mean, I do, you know, there are two parts to my work.
[102.40s -> 107.60s]  I work on cryptography as one half, and then I also do a lot of work on computer security
[107.60s -> 109.24s]  more broadly.
[109.24s -> 112.70s]  Photography is just a small part of computer security.
[112.70s -> 118.20s]  The problem of security in software is much, much larger than just cryptography.
[118.20s -> 124.12s]  And I should tell you that computer security in general is also a fantastic, fantastic
[124.12s -> 126.00s]  area to work in.
[126.00s -> 128.24s]  As a career path, it's a terrific career path.
[128.24s -> 130.40s]  There's tremendous job security in security.
[130.40s -> 131.40s]  Yeah.
[131.40s -> 135.12s]  You know, if I go to sleep now and you wake me up in 100 years, the first thing
[135.12s -> 137.96s]  I'll ask is, you know, is computer security still a problem?
[137.96s -> 142.20s]  And I guarantee you, computer security will only be worse than it is today because we
[142.20s -> 147.24s]  will be depending on computers and networks so much more than we do today.
[147.24s -> 151.68s]  Well, so students in the class have covered actually network address translators a bit,
[151.68s -> 153.24s]  you know, NATs, so they're wireless routers.
[153.24s -> 157.88s]  So you've done some work on kind of the security of these wireless NATs today and
[157.88s -> 158.88s]  some of the issues.
[158.88s -> 162.28s]  You just want to say a little bit about some of the crazy holes that you found?
[162.28s -> 163.28s]  Yeah, yeah, sure, sure.
[163.32s -> 168.64s]  We did a lot of work on security, for example, of embedded devices.
[168.64s -> 172.42s]  So when you build an embedded device, these days, so what is an embedded device?
[172.42s -> 176.72s]  So I'm talking about things like security cameras, photo frames, you know, these are
[176.72s -> 181.20s]  frames that you put on grandma's desk and you can upload pictures to it so she
[181.20s -> 183.00s]  can see grandkids.
[183.00s -> 188.80s]  Photo frames, wireless, you know, printers, routers, all of these embedded devices that
[188.80s -> 193.08s]  need to be configured somehow, these days they're configured through our web interface.
[193.08s -> 198.48s]  So when companies do this, they have to kind of build a small web application that sits
[198.48s -> 199.48s]  in the embedded device.
[199.48s -> 203.66s]  Well, traditionally, when you build a web application, you would use, you know, Rails
[203.66s -> 208.96s]  or Django or, you know, a LAMP stack in general, but a LAMP stack doesn't fit on a tiny little
[208.96s -> 209.96s]  security camera, right?
[209.96s -> 212.40s]  There's no SQL server running there.
[212.40s -> 216.28s]  So what they end up doing is they end up building their own web application and, you
[216.28s -> 222.52s]  know, their own infrastructure basically for making configuration possible.
[222.52s -> 227.32s]  And as you, well, hopefully you will take one of our security classes, which I'll plug
[227.32s -> 228.32s]  in the series.
[228.32s -> 229.32s]  Yeah, in C-255.
[229.32s -> 233.08s]  I'll plug those in just a minute, but you'll learn from those that in fact building
[233.08s -> 238.12s]  a secure web application is non-trivial, it actually takes quite an effort to secure
[238.12s -> 242.32s]  web applications, even from basic attacks, things like cross-site scripting, things
[242.32s -> 247.44s]  like, you know, request forgeries and so on.
[247.44s -> 251.80s]  And so we looked, you know, we had like, we bought like 20 of these embedded devices
[252.08s -> 257.08s]  and we started looking one by one at the different web applications and data on the devices.
[257.08s -> 261.08s]  And it turns out that you basically all had various sorts of vulnerabilities, all.
[261.08s -> 263.48s]  Again, it was basically a hardware company.
[263.48s -> 265.00s]  So somebody hacks my picture frame.
[265.00s -> 266.00s]  Why should I care?
[266.00s -> 267.00s]  Ah, okay.
[267.00s -> 268.00s]  So you should really care about that.
[268.00s -> 272.42s]  Because if you're an enterprise and now one of your employees put a picture frame
[272.42s -> 276.28s]  on their desk in their office, that picture frame is going to be connected to your
[276.28s -> 277.28s]  corporate network.
[277.28s -> 278.28s]  So I'm glad I'm not an enterprise.
[278.28s -> 279.28s]  There you go.
[279.28s -> 280.28s]  Okay.
[280.28s -> 281.28s]  I don't care.
[281.76s -> 282.76s]  You can pretty much guess the rest.
[282.76s -> 284.76s]  And Stanford's computer systems are hacked all the time.
[284.76s -> 287.76s]  So I'm not concerned about vulnerabilities.
[287.76s -> 288.76s]  Yeah.
[288.76s -> 290.76s]  I'm not the kind of person you cater to.
[290.76s -> 291.76s]  I see.
[291.76s -> 292.76s]  I see.
[292.76s -> 293.76s]  Okay.
[293.76s -> 296.76s]  Well, anyhow, it's basically these devices are used as stepping stones into larger attacks.
[296.76s -> 300.48s]  If you have a security camera at home, that security camera or, you know, even think
[300.48s -> 304.80s]  of the nest, like a thermostat that is controlled remotely.
[304.80s -> 308.00s]  Those devices, if they're not properly secured, the nest we haven't looked at.
[308.00s -> 312.08s]  So I don't know if it's, I don't know what the security status of that is.
[312.08s -> 317.04s]  But those devices could be used as a stepping stone into a larger attack on your home network,
[317.04s -> 318.04s]  on your corporate network.
[318.04s -> 319.04s]  Shink in the armor.
[319.04s -> 320.04s]  Exactly.
[320.04s -> 321.04s]  Exactly.
[321.04s -> 326.24s]  And by the way, all the attacks, the way all the attacks work today is basically using
[326.24s -> 327.24s]  stepping stones.
[327.24s -> 328.24s]  Yeah?
[328.24s -> 329.24s]  So they break into one machine.
[329.24s -> 334.00s]  From that machine, they start to do a lateral traversal to try and find other machines
[334.00s -> 338.68s]  that can be broken into from that other machine that they've now taken control, they try to
[338.68s -> 340.68s]  get to an administrator account.
[340.68s -> 344.88s]  And so on and so on, they move slowly from one machine to another until they get the
[344.88s -> 348.12s]  crown jewels like the database or the active directory.
[348.12s -> 352.48s]  And then they just dump all the data from there and away they go.
[352.48s -> 356.56s]  So this past weekend, there was the CS faculty retreat and you gave a talk kind of about
[356.56s -> 360.56s]  some of the revelations from the, from the Snowden's leaks, et cetera.
[360.56s -> 364.08s]  And one of the things you talked about is how there's might be some suggestions that
[364.08s -> 368.12s]  certain crypto systems might be weaker than we thought.
[368.12s -> 372.68s]  So not going into the details, but going forward, given what we've learned from Snowden,
[372.68s -> 377.16s]  if I want to design a secure system, then what are there some extra steps I should take
[377.16s -> 380.58s]  or there's some things that we thought might be okay, but aren't now and want to going
[380.58s -> 382.52s]  forward, do something slightly differently or?
[382.52s -> 383.52s]  Yeah.
[383.52s -> 386.72s]  There are basically two, two advice bits to keep in mind.
[386.76s -> 391.48s]  Well, first there's a zero advice bits, which you will learn, which would be drilled into
[391.48s -> 396.56s]  you once you take the crypto class, CSP 55, which is you never design your own crypto.
[396.56s -> 399.92s]  And not only should you not design your own crypto, you should not even implement
[399.92s -> 400.92s]  your own crypto.
[400.92s -> 403.84s]  Cause I guarantee you, if you implement your own crypto, it's going to be vulnerable
[403.84s -> 404.84s]  to timing attack.
[404.84s -> 407.68s]  It's probably going to have bad randomness and it's going to be vulnerable to other
[407.68s -> 409.92s]  side channel attacks and so on.
[409.92s -> 413.12s]  So you should use kind of existing innovate.
[413.12s -> 414.28s]  I wouldn't quite say it that way.
[414.28s -> 420.16s]  I would say use kind of existing standards and existing open source, well-vetted implementations.
[420.16s -> 422.12s]  So that's, that's a zero rule.
[422.12s -> 427.96s]  The first rule that I would say, that's a result of other revelations from the summer
[427.96s -> 433.40s]  is make sure that whatever you build is agile in the sense that it's crypto agile
[433.40s -> 437.08s]  in the sense that if we discover at some point that there's a vulnerability in a particular
[437.08s -> 441.68s]  algorithm, it's not going to take you six months to then go ahead and on, you know,
[441.68s -> 446.52s]  under fire, go ahead and build a new algorithm, crypto algorithm into your system, QA test
[446.52s -> 447.52s]  it and then deploy it.
[447.52s -> 450.80s]  That's, that's, you know, it's a long process, which when you do under fire is
[450.80s -> 453.72s]  a bad idea from a security point of view.
[453.72s -> 457.52s]  The idea is to kind of make your system agile to begin with, crypto agile to begin
[457.52s -> 462.96s]  with so that the system will support multiple algorithms at deployment time.
[462.96s -> 467.56s]  And then if one algorithm turns out to be insecure, then all you have to do is just
[467.56s -> 471.48s]  flip a configuration switch and the system just moves to the other algorithm and everything
[471.48s -> 472.48s]  works fine.
[472.48s -> 476.56s]  Now in the client server model, that actually is more difficult because you have to change
[476.56s -> 479.64s]  both the clients and the servers, but you know, we've got to start somewhere.
[479.64s -> 485.44s]  So for example, if you build a web server, make sure that the web server can support
[485.44s -> 486.68s]  multiple algorithms, right?
[486.68s -> 490.68s]  It's not, it's not, it's not baked in, you know, the algorithm being used is not
[490.68s -> 494.32s]  baked in somehow hardwired into the web server.
[494.32s -> 498.88s]  When you build a very common example is a software upgrade, a software upgrade mechanism.
[498.88s -> 503.12s]  So when you shift software upgrades to your clients, those software updates need to be
[503.12s -> 507.20s]  signed so that not anyone can ship an update on your behalf.
[507.20s -> 511.32s]  Well, you cannot imagine how many companies when they build software update mechanisms,
[511.32s -> 515.16s]  they just hardwire RSA as a signature mechanism.
[515.16s -> 519.80s]  And my point is try to make it so that even like a software update mechanism, something
[519.80s -> 524.56s]  as benign as that actually is agile in the sense that, you know, there's easy way
[524.56s -> 529.64s]  to update the algorithm on the fly so that, you know, just a matter of simple configuration
[529.64s -> 533.28s]  and boom, you move to signatures using a different algorithm.
[533.28s -> 537.28s]  So that's the first piece of advice, be agile.
[537.28s -> 545.00s]  The second piece of advice is in particular, when you build an SSL based server, today
[545.00s -> 552.32s]  many websites use what's called the RSA mechanism, which is the browser chooses a random pre-master
[552.32s -> 557.72s]  secret, encrypts the pre-master secret using the server's public RSA key, and sends the
[557.72s -> 561.72s]  results over to the server, the server decrypts and recovers the pre-master secret.
[561.72s -> 566.08s]  Yeah, this is what I taught when we covered how TLS works in its basic exchange.
[566.08s -> 567.08s]  Fantastic.
[567.08s -> 570.84s]  So this is what I would call the basic RSA key exchange.
[570.84s -> 575.80s]  And the problem with that mechanism is it doesn't provide what's called forward secrecy.
[575.80s -> 577.60s]  So what do I mean by that?
[577.60s -> 583.20s]  Given that today someone recorded the interaction between you and the web server, so they recorded
[583.20s -> 587.32s]  the RSA encryption of the pre-master secret.
[587.32s -> 591.14s]  Now a year from now, somehow they were able to break into the web server and recover
[591.14s -> 593.20s]  the RSA secret key.
[593.20s -> 599.84s]  What that key would allow them to do then is go back to what they recorded a year before,
[599.84s -> 602.96s]  the encrypted pre-master secret, and now they can recover the entire thing.
[602.96s -> 603.96s]  Game over.
[603.96s -> 604.96s]  Game over.
[604.96s -> 605.96s]  Exactly.
[605.96s -> 608.68s]  So here we have what's called forward secrecy.
[608.68s -> 611.76s]  There is another key exchange mechanism in SSL.
[611.76s -> 617.16s]  It's a mechanism that supports forward secrecy, and that's a mechanism that's based on D.C.
[617.16s -> 618.16s]  Hellman.
[618.16s -> 619.16s]  So there are multiple names for it.
[619.16s -> 620.16s]  It's called ephemeral D.C.
[620.16s -> 621.16s]  Hellman.
[621.16s -> 624.40s]  In OpenSSL, the name for it is D.H.E. or E.C.
[624.40s -> 625.40s]  D.H.E.
[625.40s -> 627.92s]  We'll get to the differences between those in a second.
[627.92s -> 631.64s]  And the idea there is that the key exchange actually uses the D.C.
[631.64s -> 634.52s]  Hellman protocol instead of using RSA.
[634.52s -> 639.08s]  So what happens is, each side, the browser sends to the server, it's part of the D.C.
[639.08s -> 640.08s]  Hellman exchange.
[640.08s -> 642.44s]  The server sends to the browser, it's part of the D.C.
[642.44s -> 643.44s]  Hellman exchange.
[643.44s -> 648.80s]  And the server's RSA key, its only purpose is just to authenticate the server's D.C.
[648.80s -> 649.80s]  Hellman message.
[649.80s -> 650.80s]  Just for signing.
[650.80s -> 651.80s]  Exactly.
[651.80s -> 654.16s]  The server's RSA key is used for signing, not for encryption.
[654.16s -> 658.68s]  So even if the server's RSA key is stolen a year from now, it doesn't matter.
[658.68s -> 663.10s]  And so forward secrecy means that even if somebody in the future cracks something
[663.10s -> 666.38s]  that it might, might still secure going forward in time.
[666.38s -> 670.42s]  If the session was secure today, it will be secure a year from now even if you lose
[670.42s -> 671.42s]  your secret keys.
[671.42s -> 672.42s]  Right.
[672.42s -> 675.18s]  So forward secrecy is a pretty important concept.
[675.18s -> 676.18s]  It's a good thing to do.
[676.18s -> 680.14s]  Well, you know, especially it protects you from keys being stolen and such.
[680.14s -> 683.48s]  It also limits the amount of time in which a particular key is used.
[683.48s -> 687.74s]  Because your session really now depends only on that particular D.C. Hellman exchange.
[687.74s -> 692.34s]  Unlike with the RSA key where the server has to get a new certificate, etc.
[692.58s -> 694.58s]  So once it's a whole process, it takes a whole year.
[694.58s -> 698.82s]  But the point is if someone breaks your RSA key, somehow not by stealing the private key,
[698.82s -> 703.30s]  but somehow by brute force attack, if they break your RSA key, they would recover all
[703.30s -> 704.30s]  sessions.
[704.30s -> 707.86s]  With D.C. Hellman, they would have to break every single individual D.C. Hellman
[707.86s -> 710.58s]  exchange to recover the session, which is a lot more work.
[710.58s -> 715.02s]  So it's clear going forward that, I mean, network applications, the internet are increasingly
[715.02s -> 716.02s]  important.
[716.02s -> 719.78s]  That more and more applications are just on the internet and interconnected.
[719.78s -> 723.66s]  And correspondingly, security is increasingly important.
[723.66s -> 729.86s]  So in terms of classes going forward, what are the classes that students could take to
[729.86s -> 730.98s]  sort of learn more about this?
[730.98s -> 735.26s]  Because in 10 years, not knowing something about security is going to make you dead
[735.26s -> 736.26s]  in the water.
[736.26s -> 737.26s]  Exactly.
[737.26s -> 739.02s]  That's an excellent question.
[739.02s -> 745.02s]  You know, so the security classes are kind of vital to undergraduate education in computer
[745.02s -> 746.02s]  science.
[746.02s -> 752.26s]  We get many complaints from industry about universities, not us, but other universities,
[752.26s -> 755.66s]  graduating students who know nothing about security, and as a result, the code they
[755.66s -> 758.34s]  write causes a lot of problems down the road.
[758.34s -> 761.46s]  So the classes that we offer are one CS155.
[761.46s -> 766.78s]  I would argue that needs to be a required class.
[766.78s -> 771.90s]  So the point of CS155 is, A, to teach you a lot of defensive programming, but more
[771.90s -> 775.38s]  importantly, it's to get you into the security mindset.
[775.74s -> 778.26s]  And the way we do that is we teach you a lot of attacks.
[778.26s -> 782.26s]  So the only way to learn how to defend against attacks is to know how to do the attacks
[782.26s -> 783.26s]  yourself.
[783.26s -> 786.34s]  So we teach you how to break things, but more importantly, we then draw lessons and
[786.34s -> 789.86s]  teach you how to defend against those attacks and kind of get into the security mindset.
[789.86s -> 793.98s]  Whenever you write code, think about how that code can be exploited and what would
[793.98s -> 796.06s]  go wrong if the code is exploited.
[796.06s -> 802.66s]  So the security mindset, general principles for writing secure code, things like defense
[802.70s -> 805.50s]  in depth, police privilege, and so on.
[805.50s -> 810.06s]  These are things that we just go on and on and give many, many examples of those issues
[810.06s -> 811.86s]  in CS155.
[811.86s -> 813.18s]  So that's offered in the spring.
[813.18s -> 816.54s]  It's co-taught by myself and John Mitchell.
[816.54s -> 820.50s]  Another class that's worth taking is the crypto class, if you're more interested in
[820.50s -> 821.98s]  learning how cryptography works.
[821.98s -> 825.46s]  And I can tell you the interesting thing is that there are many companies who actually
[825.46s -> 829.06s]  use crypto, but they have very little crypto expertise.
[829.06s -> 834.42s]  And so by kind of taking that class, you'll know what needs to be known about crypto in
[834.42s -> 836.22s]  order to use it properly.
[836.22s -> 841.90s]  And whatever job you go to, you would actually become the go-to person at that company to
[841.90s -> 843.98s]  deal with any crypto-like issue.
[843.98s -> 846.38s]  So it's a valuable knowledge to have.
[846.38s -> 850.74s]  I'm convincing you I should go back to school, because I haven't taken one for a while.
[850.74s -> 851.74s]  Ah, okay.
[851.74s -> 852.74s]  Well, yeah, please do.
[852.74s -> 853.74s]  Yeah, it's a fun class.
[853.74s -> 854.74s]  Great.
[854.74s -> 855.74s]  Awesome.
[855.74s -> 858.70s]  Well, any other last comments you think or thoughts about what's going on in Security
[858.70s -> 860.42s]  Day and computer systems, or?
[860.42s -> 862.38s]  Ah, we could be talking about this for hours.
[862.38s -> 863.38s]  Oh, yeah, of course.
[863.38s -> 864.38s]  It's the end of the day.
[864.38s -> 865.38s]  Yeah, I don't know.
[865.38s -> 866.38s]  How long do you want to make this?
[866.38s -> 872.38s]  Well, why don't it be nice to these students, and they can, in fact, find out in 155
[872.38s -> 873.38s]  or 255.
[873.38s -> 874.38s]  Sounds great.
[874.38s -> 875.38s]  Thanks a lot, Dan.
[875.38s -> 876.38s]  See you in future courses.
