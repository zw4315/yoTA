# Detected language: en (p=1.00)

[0.00s -> 5.00s]  So in this video, I'm gonna talk about the details of how a NAT operates, and that is
[5.00s -> 9.00s]  the rules and recommendations that are given in terms of NAT behavior for
[9.00s -> 13.00s]  handling both incoming and outgoing connections, possible packets that
[13.00s -> 18.00s]  traverse, as well as how a NAT responds when it's not acting as a NAT.
[18.00s -> 23.00s]  To recall that a NAT, a network address translation box, will set up
[23.00s -> 29.00s]  mappings from internal IP address port pairs for transport protocol to external
[29.00s -> 39.00s]  IP address port pairs. So here we have a NAT whose external IP address is 128.34.22.8.
[39.00s -> 47.00s]  So it has an internal interface, and an external interface. To the external world,
[47.00s -> 52.00s]  this NAT appears as 128.34.22.8. To the internal world, it has another IP
[52.00s -> 61.00s]  address, say, 10.0.0.1. Now, host A can, by issuing, by sending a TCP connection
[61.00s -> 67.00s]  open, a SYN message to server S on port 80. The NAT will observe that, will
[67.00s -> 74.00s]  translate host A's internal address in port 10.0.0.101.4512 to the external
[74.00s -> 79.00s]  address in port 128.34.22.8. And it's going to assign an external port, in
[79.00s -> 85.00s]  this case, 6641, for this mapping, and it'll set up this mapping. So, one
[85.00s -> 91.00s]  question you can ask is that, if some arbitrary packet comes into the NAT, how
[91.00s -> 97.00s]  should the NAT respond? So now, if the NAT is, starts receiving TCP packets
[97.00s -> 104.00s]  from 128.34.22.8 sorry, packets to 128.34.22.8, port 6641, it should
[104.00s -> 108.00s]  translate them. That's what the mapping says. Now, it might have
[108.00s -> 112.00s]  restrictions on that based on whether it's full cone, port restricted, etc.
[112.00s -> 118.00s]  But generally speaking, packets which match this will traverse. But what
[118.00s -> 126.00s]  happens if it receives a packet destined to its external address, so 128.34.22.8
[126.00s -> 135.00s]  and port some random port of 55,127. What should that do? Well, in the end,
[135.00s -> 141.00s]  the NAT is itself an IP device. And the fact that some of its ports happen to
[141.00s -> 146.00s]  result in translation is independent of the fact of how it would respond. So
[146.00s -> 150.00s]  imagine that there are no port mapping set up, that there are no internal
[150.00s -> 154.00s]  nodes to the NAT, that nobody opened any connections. How would the NAT
[154.00s -> 158.00s]  respond if you tried to open a connection to it? In this case, it'd
[158.00s -> 162.00s]  respond as it always would. So for this particular case, it might do a
[162.00s -> 166.00s]  connection refuse, like a reset packet. Or, you know, depending on what message,
[166.00s -> 171.00s]  what packet comes in, it could send an ICMP error. And so generally speaking,
[171.00s -> 177.00s]  the NAT behaves like a normal IP device, or an IP router, with the exception of
[177.00s -> 184.00s]  when packets come to the internal, the external interface that have a mapping. Or
[184.00s -> 189.00s]  when packets traverse from the internal interface and generate a mapping. So
[189.00s -> 194.00s]  besides that, if you imagine if you had no such A or B or any node behind it, then
[194.00s -> 199.00s]  that behaves just like a normal IP interface, IP device. So for example,
[199.00s -> 204.00s]  many NATs, such as your home router, in fact run a web server on port 80. So if
[204.00s -> 209.00s]  you have a home wireless router, it runs a web server on port 80, which is
[209.00s -> 213.00s]  what lets you configure it. Or sometimes it's not port 80, but some other port.
[213.00s -> 217.00s]  But the idea is that the NAT itself can respond to connections, whether they be
[217.00s -> 222.00s]  for a web management interface or for other services. That's a perfectly
[222.00s -> 229.00s]  reasonable and allowed behavior. So one question that comes up when you have a
[229.00s -> 234.00s]  NAT is what causes you to set up these mappings? So you can imagine in the
[234.00s -> 240.00s]  case of UDP, this is generally when a packet comes from the internal
[241.00s -> 246.00s]  interface going to something external. The NAT sets up a mapping, mapping that IP
[246.00s -> 251.00s]  address port to an external IP address port. Of course, the NAT needs to be
[251.00s -> 257.00s]  careful about these allocations so that it's not reusing them. TCP, well, if you
[257.00s -> 263.00s]  see a TCP SYN, then you notice that by mapping, or, you know, you could even be
[263.00s -> 268.00s]  a little more, a little more, a little more liberal and say, look, if we see
[268.00s -> 272.00s]  any TCP packets coming from inside, then we assume there should be a mapping and
[272.00s -> 275.00s]  just set up the mapping. There's, of course, a question then, so this is how
[275.00s -> 279.00s]  you create mappings, when do you tear them down? Well, UDP, since there is no
[279.00s -> 284.00s]  control sequence, generally these are on a timeout. Mappings are torn down on a
[284.00s -> 288.00s]  timeout. You do need to reclaim them, otherwise you could run out of external
[288.00s -> 294.00s]  ports to use. TCP, well, if you see a proper FIN ACK exchange to tear down
[295.00s -> 300.00s]  the connection, then you know that you can garbage collect the connection state,
[300.00s -> 304.00s]  the inter, the mapping, a little more quickly. Of course, there are some edge
[304.00s -> 307.00s]  cases here. You need to be sure it actually was discarded. You want to make
[307.00s -> 312.00s]  sure that you don't enter some state where it's possible to lose data. So it
[312.00s -> 316.00s]  turns out that there are RFCs that go into detail on exactly how NAT should
[316.00s -> 321.00s]  behave. And these behavioral recommendations came out after, you know, almost a
[321.00s -> 325.00s]  decade of experience with these devices and how they can possibly disrupt
[325.00s -> 329.00s]  applications through strange behaviors. So there were some early documents that
[329.00s -> 333.00s]  tried to, that tried to state, based on, you know, somebody went out, actually
[333.00s -> 337.00s]  Colin Jennings, went out basically to Fry's Electronics and bought, you know,
[337.00s -> 341.00s]  twenty-five different NAT boxes and just measured them and saw what they did.
[341.00s -> 344.00s]  And they did all kinds of crazy things. So based on that and based on
[344.00s -> 348.00s]  application behavior, the ITF came up with a pair of recommendations, one for
[348.00s -> 352.00s]  UDP, one for TCP, there's also, you know, for other, other behavioral
[352.00s -> 357.00s]  recommendations on how NAT should behave. So UDP is specified in RFC
[357.00s -> 365.00s]  4787. So here's RFC 4787. As you can see, it's a best current practices,
[365.00s -> 372.00s]  number 127, best current practice. And so, generally speaking, these documents
[372.00s -> 379.00s]  have, so there's less stuff about terminology. They have a set of
[379.00s -> 389.00s]  behavioral recommendations. So. Here, for example, is recommendation one or
[389.00s -> 395.00s]  requirement one. A NAT must have an end point independent mapping behavior. So
[395.00s -> 400.00s]  what this means is that if we return to the terminologies to describe NATs,
[400.00s -> 404.00s]  what this essentially is saying in terms of that classification terminology, if you
[404.00s -> 408.00s]  were to read through the details of the document, is that NATs cannot be
[408.00s -> 413.00s]  symmetric. In that the mapping a NAT creates, creates between, for UDP,
[413.00s -> 417.00s]  between an internal IP address port and an external IP address port must be
[417.00s -> 421.00s]  independent of what the end point is. It can't be a symmetric NAT where it
[421.00s -> 425.00s]  sets up a new mapping for every external IP address and port because of
[425.00s -> 429.00s]  all the ways in that that tends to break applications. So here's a
[429.00s -> 435.00s]  second recommendation. Here's a recommendation that NATs have an IP
[435.00s -> 442.00s]  address pooling behavior of paired. So this is for NATs that happen to actually
[442.00s -> 447.00s]  have multiple external addresses. And the idea is that, hey, if we can, then
[447.00s -> 452.00s]  can, UDP packets coming from the same internal IP address should appear to have
[452.00s -> 457.00s]  the same external IP address. So here's the third, here's the third
[457.00s -> 463.00s]  recommendation that requirement which is, has to do with how ports are assigned.
[463.00s -> 469.00s]  So it turns out historically, ports zero to 1023 were considered system services.
[469.00s -> 474.00s]  So these were ports which only administrators or super users could bind
[474.00s -> 478.00s]  to, basically root on, on Unix systems. So that's why you see things like
[478.00s -> 483.00s]  HTTP, SMTP, they're all running on these low port numbers as opposed to lots
[483.00s -> 487.00s]  of applications, stuff like BitTorrent or Skype which run on high port numbers.
[487.00s -> 492.00s]  So that's this historical artifact, but there are some sort of assumptions that
[492.00s -> 495.00s]  applications have made historically based on this.
[495.00s -> 500.00s]  And so what one of these requirements says is just to kind of, so we don't
[500.00s -> 505.00s]  break things, that if the internal port is between zero and 1023, then the
[505.00s -> 510.00s]  external port should be between zero and 1023. And the opposite is also true
[510.00s -> 515.00s]  between six and 65, 65535, then the external should be between 65535.
[515.00s -> 519.00s]  So I'm not gonna go through all of these requirements. What's nice actually
[519.00s -> 523.00s]  is if you read through these documents is it really gives you a sense
[523.00s -> 527.00s]  of all of the different kinds of application expectations that there are.
[527.00s -> 530.00s]  What's nice is there are these justifications, they'll even explain like,
[530.00s -> 534.00s]  hey, there are applications that make these assumptions, or protocols that make
[534.00s -> 538.00s]  these assumptions, and therefore the NAT needs to do this so it doesn't break
[538.00s -> 542.00s]  anything. So it gives you just this nice sort of couple of points of
[542.00s -> 545.00s]  interesting protocol approaches that happen on the internet.
[545.00s -> 551.00s]  Now, the TCP requirements are specified in RSC 5382.
[551.00s -> 556.00s]  So we can see the, the first requirement for TCP NAT behavior is very similar to
[556.00s -> 560.00s]  UDP, this endpoint independent mapping. Symmetric NATs are really bad.
[560.00s -> 563.00s]  They break all kinds of things, so never build a symmetric NAT.
[563.00s -> 567.00s]  So that's requirement number one. But unlike UDP, TCP has connections.
[567.00s -> 572.00s]  And so, and connections set up. And so there are a couple of requirements that
[572.00s -> 575.00s]  come out for TCP that aren't present in UDP.
[578.00s -> 582.00s]  For example, and this one's kind of interesting, is requirement two.
[582.00s -> 586.00s]  A NAT must support all valid sequences of TCP packets for connections
[586.00s -> 590.00s]  initiated both internally as well as externally when the connection is
[590.00s -> 593.00s]  permitted by the NAT. And the basic point here is this,
[593.00s -> 597.00s]  point A, that NAT, a NAT must handle TCP simultaneous open.
[597.00s -> 601.00s]  So this gets back to the case we talked about NAT hole punching,
[601.00s -> 605.00s]  where it can be that two nodes behind NATs, say, A and B.
[613.00s -> 615.00s]  They want to open connections to one another.
[615.00s -> 617.00s]  They want to open a connection through the NAT.
[617.00s -> 621.00s]  So what they do is they talk to some external server, and there are servers
[621.00s -> 624.00s]  that provide this abstraction, things like ICE.
[624.00s -> 628.00s]  That allow them basically to do some query responses to figure out what kind
[628.00s -> 632.00s]  of NAT they're behind. Also to figure out what the external
[632.00s -> 636.00s]  IP address and port is associated with their local IP address and port.
[636.00s -> 640.00s]  So based on this, both A and B can figure out, given their internal
[640.00s -> 643.00s]  address and port, what's the external address and port.
[643.00s -> 647.00s]  They somehow exchange this information through a rendezvous service.
[647.00s -> 654.00s]  And then, both A and B simultaneously try to open TCP connections to one another.
[656.00s -> 661.00s]  Now it could be that, you know, these connections, these connections are there,
[661.00s -> 666.00s]  or the, the state is there. But the basic point is that it can very
[666.00s -> 673.00s]  well be that B sends a SYN, which sets up the state, and that SYN reaches A
[674.00s -> 680.00s]  before A has set up its translation state. And so the SYN is not going to traverse.
[680.00s -> 686.00s]  However, the state now exists on B, so B now has a translation entry.
[686.00s -> 691.00s]  Now A then opens up a connection back, and its SYN does traverse this
[691.00s -> 694.00s]  translation, and now A can open a connection on B.
[694.00s -> 697.00s]  But the thing is that this is a simultaneous open.
[697.00s -> 699.00s]  B has sent a SYN, and the SYN is outstanding.
[699.00s -> 703.00s]  In terms of the TCP state diagram, it's, it's already sent to SYN.
[703.00s -> 708.00s]  This is the simultaneous open, when A and B send SYNs to each other at the same time.
[708.00s -> 712.00s]  So, for peer-to-peer applications, where A and B want to open a connection
[712.00s -> 717.00s]  directly to one another, it's important that a NAT allow this kind of TCP open.
[717.00s -> 721.00s]  That it's not just that, aha, we don't support simultaneous open, and so
[721.00s -> 726.00s]  therefore, we're not going to allow this SYN to traverse because that's an
[726.00s -> 730.00s]  incoming SYN. That if you have a mapping, the incoming SYN must be able to
[730.00s -> 733.00s]  traverse. So that's what here requirement two is saying.
[733.00s -> 738.00s]  But even more generally, it's saying that look, TCP has a state diagram, and
[738.00s -> 742.00s]  that you're supposed to be able to traverse the state diagram to open a
[742.00s -> 746.00s]  connection in any way that you want, and a NAT should not restrict that.
[746.00s -> 751.00s]  That is, the NAT should not be somehow limiting the, be a limit to TCP
[751.00s -> 756.00s]  implementation options. So here requirement three states that it should
[756.00s -> 760.00s]  have an endpoint independent filtering behavior. So this is basically, this is
[760.00s -> 764.00s]  back to the terminology talked about in terms of classification of NATs.
[764.00s -> 769.00s]  This means a full cone NAT. That it's recommended that NATs, in terms of TCP,
[769.00s -> 774.00s]  be full cone. And again, like the UDP recommendations, each of these behavioral
[774.00s -> 778.00s]  recommendations, each of these has a justification. And so it can be really
[778.00s -> 782.00s]  sort of, very, very sort of insightful and illuminating to read through what are
[782.00s -> 786.00s]  the kinds of applications, what are the, sort of the edge cases that can make
[786.00s -> 790.00s]  the NATs can break. And you see a lot of them relate to peer to peer. In
[790.00s -> 794.00s]  particular, voice over IP. All those kinds of applications where NATs work
[794.00s -> 798.00s]  fine when simply you have a client behind the NAT opening a connection to a
[798.00s -> 802.00s]  server. But in anything peer to peer where things behind NATs want to open
[802.00s -> 806.00s]  connections to one another, you have to have an intelligent behavior in the
[806.00s -> 811.00s]  application to break those applications. So this one requirement four is kind of an
[811.00s -> 816.00s]  interesting edge case. Which is that, so a NAT must not respond to an unsolicited
[816.00s -> 821.00s]  inbound sin for at least six seconds. So here's the, here's the case why this
[821.00s -> 826.00s]  is important. Again, let's go to this example where you have A and B that are
[826.00s -> 831.00s]  both behind NATs. And they're trying to do a simultaneous open. Now it turns
[831.00s -> 837.00s]  out that A ends up sending its simultaneous open well before B does,
[837.00s -> 845.00s]  such that its sin arrives before B has tried to open its, its connection to A.
[845.00s -> 853.00s]  So if B's NAT responds with, responds to this unsolicited inbound sin by saying,
[853.00s -> 859.00s]  you know, sorry, connection refused, or by, you know, saying ICMPR, ICMPR,
[859.00s -> 864.00s]  whatever it wants to do depending on the circumstances. The problem then is that
[864.00s -> 868.00s]  this might come back to the NAT and cause the NAT to tear down the state.
[868.00s -> 872.00s]  And then when B tries to do its own simultaneous open, so here would be the
[872.00s -> 876.00s]  error. If B tries to do its own simultaneous open, that state is now
[876.00s -> 880.00s]  torn down and that's going to fail. And so the idea here is that if B has
[880.00s -> 884.00s]  to wait at least six seconds, the assumption is that B and A, if they're
[884.00s -> 888.00s]  doing a simultaneous open, are going to try to do so within six seconds of each
[888.00s -> 893.00s]  other. That's what it sort of means simultaneously. And so the NAT will wait
[893.00s -> 900.00s]  before issuing that response such that B has a chance to do its own open which
[900.00s -> 907.00s]  could then set up the state for A. Note then the second sentence, if during
[907.00s -> 911.00s]  this interval the NAT receives and translates an outbound sin, it must
[911.00s -> 915.00s]  silently drop the original, the original unsolicited inbound sin. So in this
[915.00s -> 920.00s]  case, you know, inbound sin came in, it was unsolicited, but then suddenly
[920.00s -> 924.00s]  something showed that maybe it was solicited, you should just drop it.
[924.00s -> 928.00s]  You shouldn't issue an error. You can ask the question as to whether or not
[928.00s -> 932.00s]  you should have it traverse the NAT. There'll be another approach. I
[932.00s -> 935.00s]  actually went back and looked through some of the archives and this just
[935.00s -> 938.00s]  seemed to work pretty well, the mailing list archives about this discussion.
[938.00s -> 941.00s]  This seemed to work pretty well. It means the NAT is enough to buffer
[941.00s -> 945.00s]  applications. It, it solves the problem and sort of is the least complicated
[945.00s -> 948.00s]  answer. So that's just a brief overview of some of the internals and NATs and
[948.00s -> 952.00s]  their policies and the algorithms that they use and some of the rules that
[952.00s -> 955.00s]  there are for their behavior to allow applications to work. If this is
[955.00s -> 959.00s]  something that's interesting, I totally recommend reading these RFCs in a bit
[959.00s -> 963.00s]  more detail, especially because they give these really nice descriptions as to
[963.00s -> 967.00s]  why these behaviors exist, particularly for peer-to-peer applications.
[971.00s -> 973.00s]  Thank you.
