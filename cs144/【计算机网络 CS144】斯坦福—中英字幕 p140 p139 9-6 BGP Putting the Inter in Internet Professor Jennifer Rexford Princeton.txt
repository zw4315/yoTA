# Detected language: en (p=1.00)

[0.00s -> 4.08s]  influence on the way that AT&T
[4.08s -> 8.32s]  used and deployed BGP and routing in its network.
[8.32s -> 11.40s]  And since she's been at Princeton, has done a lot of research in
[11.40s -> 15.60s]  routing, inter-domain routing, BGP, and laid some of the groundwork for what we
[15.60s -> 16.42s]  now know as
[16.42s -> 20.40s]  software-defined networking through her work on 4D. So hi Jen,
[20.40s -> 23.60s]  how you doing? Good, how about yourself?
[23.60s -> 27.92s]  So this is one of the interviews that we're doing for
[28.12s -> 33.16s]  the online class at Stanford called CS144, an introduction to computer networks.
[33.16s -> 37.56s]  And this is the first of the interviews that we're doing using Hangout.
[37.56s -> 41.16s]  So we're going to see how this goes, so excuse us if we get some of the technicalities
[41.16s -> 42.00s]  a little bit wrong.
[42.00s -> 45.08s]  So I wanted to ask you a question to start with.
[45.08s -> 49.88s]  Can you give us just as a brief history of BGP, how it came about,
[49.88s -> 53.44s]  what were the basic ideas, and why it's lasted so long?
[54.32s -> 57.92s]  Right, so BGP is essentially the glue that holds the disparate parts of the
[57.92s -> 60.48s]  internet together, and so it grew up hand-in-hand with the
[60.48s -> 64.08s]  internet. So when the ARPANET was running in the sort of in the
[64.08s -> 64.68s]  eighties,
[64.68s -> 69.04s]  there was really one core network, the ARPANET itself, and a lot of other
[69.04s -> 70.44s]  networks that connected to it.
[70.44s -> 74.32s]  And so there wasn't really a need for a sophisticated inter-domain routing protocol.
[74.32s -> 78.48s]  The network was essentially a tree. Once the NSFnet was being commissioned,
[78.48s -> 82.32s]  there was a need to support much more flexible ways for networks to connect to one
[82.32s -> 82.84s]  another.
[82.92s -> 85.64s]  And in particular, networks might connect to each other not only to the
[85.64s -> 86.88s]  NSFnet backbone.
[86.88s -> 90.36s]  And so it became necessary to deal with loops, because the topologies were now
[90.36s -> 91.88s]  potentially cyclic.
[91.88s -> 95.00s]  And so BGP was designed to support routing on more general
[95.00s -> 98.56s]  topologies, and then over time it's really grown along with the internet
[98.56s -> 102.32s]  to have to grapple with a lot of issues dealing with scalability,
[102.32s -> 105.76s]  running out of address space, having a large number of address blocks
[105.76s -> 109.32s]  that have to be carried within the protocol, and it's also grown as the
[109.32s -> 112.76s]  business relationships between domains and the services that providers
[112.76s -> 115.44s]  want to offer to their customers have evolved.
[115.44s -> 119.40s]  And so now there's much more of a need years later to be able to allow a service
[119.40s -> 122.64s]  provider to pick one path that might be longer than another,
[122.64s -> 125.88s]  because it might be economically advantageous. Maybe it's cheaper.
[125.88s -> 129.48s]  Maybe it has better performance despite being longer. And similarly for
[129.48s -> 132.68s]  providers to offer services like virtual private networks that don't even
[132.68s -> 134.44s]  connect to the internet at all.
[134.44s -> 138.20s]  And so we've seen over time BGP adapt in many ways to address
[138.20s -> 141.84s]  both of those kinds of concerns. So when you look at BGP now,
[141.84s -> 145.92s]  what do you think of its main good and bad attributes? What are its strengths
[145.92s -> 146.72s]  and weaknesses?
[146.72s -> 150.32s]  So basically anything that makes the internet the internet, which is
[150.32s -> 153.52s]  essentially what BGP does, it sort of puts the enter in internet,
[153.52s -> 157.24s]  has to reconcile the competing and conflicting goals
[157.24s -> 160.48s]  of the different service providers and other parties that connect to the network.
[160.48s -> 163.92s]  So no matter what we do, whether it's BGP or something else, something has to
[163.92s -> 166.48s]  actually reconcile that there is no global agreement
[166.48s -> 169.76s]  on what paths are good, or even which paths should be made available
[169.80s -> 174.04s]  from one domain to another. And so in that sense BGP is solving a very difficult problem,
[174.04s -> 177.68s]  and it is at least a viable solution to it. And it's been remarkably able to
[177.68s -> 178.20s]  adapt
[178.20s -> 182.36s]  over time to address exactly the security, the scalability concerns,
[182.36s -> 185.96s]  the concerns about business relationships, and even security concerns
[185.96s -> 189.36s]  that have arisen as you've tried to move the internet from a
[189.36s -> 192.80s]  research network, essentially a research experiment that escaped from the lab,
[192.80s -> 196.76s]  into something that actually is a global commercial enterprise.
[196.84s -> 200.08s]  So that's all good, it has managed to weather the storm, but
[200.08s -> 204.64s]  it is hard to make scale. It's complex to configure. In fact the protocol
[204.64s -> 206.96s]  itself is in some ways pretty simple. You know, I
[206.96s -> 210.72s]  advertise paths to my neighbors, they add themselves to the beginning of the path,
[210.72s -> 214.04s]  they pick the path they like best and advertise it onward to their neighbors.
[214.04s -> 217.84s]  So it's pretty simple, but all the action is in how BGP is configured.
[217.84s -> 221.24s]  And that's one of the reasons BGP is hard to teach, because if you look at the
[221.24s -> 222.44s]  protocol spec or even
[222.44s -> 225.56s]  textbooks about BGP, it mainly just captures that
[225.72s -> 229.24s]  hop-by-hop path-based dissemination of routing information
[229.24s -> 232.48s]  and says very little about how configuration is done. And so it's a
[232.48s -> 233.56s]  pretty steep learning curve.
[233.56s -> 237.08s]  People make mistakes in configuring BGP out of
[237.08s -> 240.20s]  naivete and out of fairly low-level
[240.20s -> 243.84s]  baroque configuration mechanisms in the routers. And so we see lots of
[243.84s -> 248.36s]  outages just caused by operator error. A really good example is a number of
[248.36s -> 249.20s]  years ago
[249.20s -> 252.88s]  Pakistan Telecom was trying to block access to YouTube
[252.88s -> 256.20s]  within Pakistan and accidentally blocked it for the entire world
[256.20s -> 259.32s]  by announcing that they were the best way to reach
[259.32s -> 263.48s]  YouTube and everybody on the internet believed it. So BGP is definitely
[263.48s -> 265.42s]  vulnerable to these sort of butterfly effects,
[265.42s -> 268.86s]  where a small failure or a small configuration mistake in one part of the
[268.86s -> 270.16s]  internet can have these
[270.16s -> 273.70s]  pretty significant global consequences to the extent that people might not be
[273.70s -> 275.96s]  able to watch videos of cats flushing toilets for
[275.96s -> 280.44s]  multiple hours at a time. So from that point of view, it wasn't really
[280.44s -> 281.56s]  designed to be
[282.08s -> 285.12s]  a robust and secure protocol that one might want for a
[285.12s -> 288.52s]  critical infrastructure like the internet has become.
[288.52s -> 291.88s]  So we always hear stories of
[291.88s -> 295.52s]  attackers being able to surreptitiously advertise a route
[295.52s -> 299.28s]  or there's the potential for it through a BGP peering session
[299.28s -> 303.84s]  and therefore be able to subvert the routing that takes place.
[303.84s -> 308.28s]  Do you think that this happens a lot in practice, that this is a common way to attack the network?
[308.32s -> 311.56s]  So I think in practice a lot of the bad guys on the internet actually want
[311.56s -> 312.60s]  the internet to stay up
[312.60s -> 315.72s]  because what they're actually trying to do is either launch a denial of
[315.72s -> 317.56s]  service attack on a particular victim
[317.56s -> 320.68s]  or to do a phishing attack. And so I think in general most of the bad guys
[320.68s -> 323.36s]  don't want BGP to go down.
[323.36s -> 326.60s]  A second reason that might not happen a lot is that
[326.60s -> 330.44s]  adversaries often don't have access to a BGP speaking router of their own
[330.44s -> 333.84s]  to be able to manipulate or just don't have the skill set to do it.
[333.84s -> 337.84s]  So I would certainly say it's not as prevalent as some of the other forms of cyber
[337.84s -> 341.04s]  attacks we see on the internet. That said, we see several times a year
[341.04s -> 344.32s]  very high-profile outages caused sometimes by operator error,
[344.32s -> 348.12s]  sometimes in ways where it may not be clear if it's actually
[348.12s -> 348.76s]  intentional
[348.76s -> 352.52s]  or an accident. So it's certainly a huge vulnerability and when it does fail
[352.52s -> 356.68s]  it can have much more global consequences than an attack on a single victim might.
[356.68s -> 359.84s]  So I think it's still a big security concern but
[359.84s -> 363.68s]  arguably it's not as prevalent as some of the more targeted forms of attack
[363.68s -> 364.84s]  we see on end hosts.
[364.92s -> 369.12s]  Right. So one of the limitations that's often cited of
[369.12s -> 372.80s]  the way that the path vector is transmitted or advertised to
[372.80s -> 375.88s]  neighbors is that, of course, when someone
[375.88s -> 379.96s]  when a peer advertises a path to me,
[379.96s -> 383.56s]  I don't know whether they're actually going to follow that path. The second thing is
[383.56s -> 386.84s]  they're choosing amongst the many paths that they can advertise to me which
[386.84s -> 388.04s]  one
[388.04s -> 391.36s]  they want to advertise to me. And so there may be alternatives that I would
[391.36s -> 393.76s]  prefer that they don't even tell me about.
[394.28s -> 398.16s]  Is this a big limitation in practice
[398.16s -> 401.36s]  or is this just the concern of the academicians?
[401.36s -> 404.68s]  I think it's somewhat of a concern in practice in that
[404.68s -> 408.80s]  it may very well be that a customer of an ISP would like to pick a path
[408.80s -> 412.12s]  that avoids a particular country that might do wiretapping or censorship.
[412.12s -> 415.16s]  It's a really good example where you may want to pick paths that avoid a
[415.16s -> 416.76s]  particular intermediate domain
[416.76s -> 419.96s]  and are not able to do so because maybe all of your providers have
[419.96s -> 423.68s]  neglected to offer you such a path, even though there might be one that exists
[423.68s -> 425.00s]  on the actual graph.
[425.00s -> 428.16s]  And there can also be cases because routing decisions aren't based on
[428.16s -> 431.40s]  performance, that there might be a path with really good performance
[431.40s -> 434.96s]  that's actually available on the graph that you don't see. I mean a really good example
[434.96s -> 436.96s]  when the Middle East fiber cut happened
[436.96s -> 440.08s]  in the Mediterranean a number of years ago, a lot of people started
[440.08s -> 442.68s]  routing the other way around the globe.
[442.68s -> 446.12s]  And I heard this from a number of carriers where it wasn't that there weren't
[446.12s -> 449.08s]  routes available but because the routes they happened to learn were much more
[449.08s -> 449.96s]  restricted
[449.96s -> 453.20s]  they were forced to take traffic on a path the other way
[453.28s -> 457.68s]  around the globe, sometimes with much higher latency as a result.
[457.68s -> 461.52s]  So I do think those things matter, but I think it's quite fair
[461.52s -> 464.20s]  that if you have multiple providers
[464.20s -> 467.36s]  you may get one path from each of them and still get some of that same path
[467.36s -> 471.56s]  diversity that you might wish you could get from one provider.
[471.56s -> 475.04s]  Do you think it's common for a path that's advertised to me
[475.04s -> 478.80s]  to be then different from the one that the advertiser
[478.80s -> 481.96s]  uses in practice? In other words, they advertise one path to me
[482.44s -> 486.20s]  I like that path, it fits with my local policy, and then they actually use a
[486.20s -> 487.36s]  different one in practice.
[487.36s -> 490.76s]  Yeah, that can certainly happen and it can happen for legitimate reasons.
[490.76s -> 494.24s]  For example, route aggregation, where I might be routing in a very coarse-grained,
[494.24s -> 495.28s]  big address block
[495.28s -> 498.96s]  and inside the provider's domain they've broken that into a much larger
[498.96s -> 500.48s]  number of smaller address blocks
[500.48s -> 503.72s]  that have different paths. So in some cases it might just naturally happen
[503.72s -> 506.76s]  because of the scalability mechanisms in the protocol.
[506.76s -> 510.32s]  And you can certainly imagine less benign reasons
[510.32s -> 513.48s]  where that might happen, where a path might be advertised to me
[513.48s -> 516.80s]  because I'll be more likely to pick it and someone might be trying to attract my
[516.80s -> 518.16s]  traffic into their network
[518.16s -> 521.20s]  and then send the traffic on the path that's actually most financially
[521.20s -> 522.32s]  advantageous for them.
[522.32s -> 525.52s]  There's been some very nice research work showing that those kind of gaming
[525.52s -> 528.64s]  mechanisms are possible and I think what's particularly interesting about that
[528.64s -> 529.64s]  intellectually is that
[529.64s -> 534.12s]  even the best security extensions to BGP, which are not deployed at all
[534.12s -> 537.76s]  today, don't prevent that because they mainly secure that
[537.96s -> 541.68s]  the BGP messages themselves really did go through the sequence of autonomous
[541.68s -> 542.84s]  systems that are listed in the
[542.84s -> 546.68s]  AS path. But all bets are off when you send the packets in the data plan.
[546.68s -> 548.76s]  There's really very little stopping a domain
[548.76s -> 551.92s]  from installing a different entry in a forwarding table
[551.92s -> 555.72s]  that will send my packets a completely different way. So it makes it difficult to do
[555.72s -> 556.56s]  something like,
[556.56s -> 560.44s]  let's suppose a government says, I only want my traffic to traverse
[560.44s -> 564.16s]  networks that are in my own country or I want to avoid another country.
[564.56s -> 568.44s]  Even though BGP will let you pick paths based on what autonomous systems are there,
[568.44s -> 571.52s]  if you really care to make sure that property holds,
[571.52s -> 575.72s]  you may not really be able to count on BGP to give that to you.
[575.72s -> 579.28s]  So another often-cited problem with BGP is
[579.28s -> 582.64s]  the rate that it converges after there's been a routing change and I know that
[582.64s -> 584.36s]  you were very involved in work
[584.36s -> 589.52s]  a number of years ago in both uncovering the problem and then looking for ways to
[589.52s -> 592.72s]  solve it. Can you give us a brief
[593.00s -> 596.12s]  overview of the problem, how it was found and then
[596.12s -> 600.28s]  how things stand today? Yeah, definitely. So there are two issues with BGP and
[600.28s -> 601.44s]  convergence. One is
[601.44s -> 605.68s]  whether the system converges at all. In other words, is it possible that
[605.68s -> 608.68s]  all of these domains making their own local choices about which way they
[608.68s -> 609.76s]  want to send their traffic
[609.76s -> 613.40s]  each continue to convince each other to change their minds about which way to go
[613.40s -> 614.36s]  and never reach
[614.36s -> 617.84s]  a global agreement. And the second is, even if they do reach global agreement,
[617.84s -> 621.96s]  how quickly does that happen? And while that transition is happening,
[622.16s -> 625.72s]  packets are being lost in flight, put in loops, delivered out of order,
[625.72s -> 628.84s]  people have found that when Skype calls are
[628.84s -> 633.64s]  disrupted, or perhaps Google Hangouts as well, that it's most likely caused by
[633.64s -> 637.00s]  this BGP convergence behavior rather than by network congestion.
[637.00s -> 640.28s]  So both are issues. Do you converge? And if so, how quickly?
[640.28s -> 644.72s]  So on the first question, it is certainly possible that I want to route through you,
[644.72s -> 647.88s]  you want to route through someone else, and they want to route through me. And we each
[647.88s -> 651.04s]  cause each other to change our minds. Once I decide to route through you,
[651.24s -> 654.56s]  the third party no longer has available the route they might have wanted through me,
[654.56s -> 658.60s]  and like my mind as well, and we continue to chase our tails.
[658.60s -> 661.88s]  Now in practice, that's thought not to happen
[661.88s -> 665.32s]  very often, and the reason for that is that BGP is first and foremost the
[665.32s -> 666.64s]  money routing protocol,
[666.64s -> 670.92s]  not a packet routing protocol. Routing of packets is kind of a nice side effect.
[670.92s -> 674.88s]  And so when I pick a route as an AS, I'm picking based on
[674.88s -> 678.82s]  economic factors. Do I have to pay to send traffic through you because you're my
[678.82s -> 679.60s]  provider?
[679.72s -> 682.68s]  Do I get revenue from you when I send traffic through you because you're my
[682.68s -> 683.36s]  customer?
[683.36s -> 687.40s]  Or is it sort of financially neutral because you're my peer? And so in the end,
[687.40s -> 687.96s]  these sort of
[687.96s -> 691.72s]  protocol oscillations that are permanent suggest some sort of weird
[691.72s -> 694.84s]  financial dynamic taking place where everybody's somehow making money in a
[694.84s -> 695.52s]  cycle.
[695.52s -> 698.92s]  And it doesn't really make a lot of sense that everybody would
[698.92s -> 701.04s]  somehow have it in their financial best interest to
[701.04s -> 705.44s]  pick routes that ultimately cycle back. So I'm happy if we think this doesn't actually
[705.44s -> 706.12s]  happen.
[706.12s -> 709.52s]  And some of the work I was involved in tried to come up with a sort of an
[709.52s -> 711.48s]  economic model and proofs that
[711.48s -> 714.60s]  under certain conditions it can't happen. Now that said,
[714.60s -> 717.70s]  we do sometimes, when I was at AT&T, see route oscillation within an
[717.70s -> 718.72s]  autonomous system.
[718.72s -> 722.86s]  Because BGP is used there as well to disseminate routing information within a
[722.86s -> 723.44s]  domain.
[723.44s -> 726.68s]  So it's not that the problem never happens, but it is somewhat of a
[726.68s -> 730.00s]  rare pathological problem rather than something that seems to happen a lot.
[730.00s -> 733.76s]  On the second question about how quickly do things converge,
[733.76s -> 736.96s]  a number of years ago BGP would converge on the order of minutes
[737.12s -> 741.32s]  or even several minutes. Definitely quite long relative to sort of the
[741.32s -> 745.48s]  50 milliseconds or less target that a lot of real-time applications need.
[745.48s -> 749.68s]  And part of that is that BGP keeps exploring alternate paths one after another.
[749.68s -> 753.72s]  So if the path I'm using is withdrawn from me, I explore my next
[753.72s -> 757.56s]  most preferred path, which may in fact share the same fate as the path I
[757.56s -> 758.56s]  just lost.
[758.56s -> 762.84s]  It may have a link in common. BGP is just advertising the whole path. It doesn't tell you
[762.84s -> 764.80s]  any information about
[764.84s -> 768.60s]  shared resources that might affect many many paths. And so one after the other I
[768.60s -> 770.72s]  explore them and my neighbors are doing the same.
[770.72s -> 775.72s]  And you can end up with sort of an exponential iterative process of exploring those routes.
[775.72s -> 781.28s]  So that's gotten better because the sort of timers that drive how quickly I can
[781.28s -> 783.48s]  move from one decision to the next have shrunk
[783.48s -> 786.84s]  over the years. And frankly, even
[786.84s -> 790.88s]  a number of years ago when we looked at this, most of the BGP routes are remarkably stable.
[790.88s -> 794.44s]  Ten days or two weeks at a time. There are a small number
[794.68s -> 798.88s]  of unstable destinations on the internet that go up and down quite a lot. And that's thought to be
[798.88s -> 800.20s]  caused not by routing
[800.20s -> 803.48s]  oscillation, but by literally equipment going up or down.
[803.48s -> 807.36s]  That might cause a destination to be reachable or unreachable back and forth.
[807.36s -> 810.56s]  And in practice, those destinations are extremely unpopular.
[810.56s -> 814.32s]  They're either unpopular because you can't reach them in the first place.
[814.32s -> 817.76s]  There's that much traffic going on. Or they're unpopular
[817.76s -> 821.04s]  and because they're unpopular, nobody cares enough to make sure the
[821.08s -> 824.72s]  network around them is stable. But what that all means when you put it together is that
[824.72s -> 826.68s]  the vast majority of the traffic on the internet
[826.68s -> 831.52s]  is going over paths that are often stable for days or even a week or two at a time.
[831.52s -> 835.08s]  So in some sense between a lot of research, a lot of
[835.08s -> 839.24s]  improvements in software and routers, and improvements in operational practices
[839.24s -> 841.64s]  have meant that BGP convergence, while it still matters,
[841.64s -> 844.92s]  is nowhere near as messy a problem as it might have seemed
[844.92s -> 847.64s]  15 years ago.
[848.56s -> 850.80s]  One of the things you mentioned earlier is that
[850.80s -> 854.00s]  one of the things that makes it hard to teach BGP or
[854.00s -> 857.16s]  it makes it hard as a student to really understand what problem BGP is
[857.16s -> 858.12s]  trying to solve is
[858.12s -> 861.00s]  in some ways it doesn't feel like it's built on the same
[861.00s -> 862.44s]  principled algorithms that
[862.44s -> 865.68s]  RIP was originally and OSPF as
[865.68s -> 869.68s]  just a collection of policy mechanisms and then path routing.
[869.68s -> 874.00s]  And so if you look at BGP
[874.16s -> 878.12s]  today, is it a band-aid that's lived for a long time?
[878.12s -> 881.24s]  Is it something that you believe and hope
[881.24s -> 884.16s]  will be around as an inter-domain routing protocol for a long time in the
[884.16s -> 885.00s]  future? Or
[885.00s -> 888.80s]  if you got to play God for a minute and wipe away BGP and
[888.80s -> 889.76s]  replace it with
[889.76s -> 894.24s]  a new inter-domain routing system, what would you do?
[894.24s -> 897.36s]  Would you replace it with something that's similar or quite different?
[897.36s -> 901.36s]  That's a great question. So BGP is the protocol I love to hate.
[901.40s -> 905.28s]  So in some sense it has proven quite evolvable and it has changed dramatically
[905.28s -> 906.16s]  over the years. So
[906.16s -> 909.16s]  a Jakob Rector in a talk he gave a number of years ago called BGP the
[909.16s -> 910.76s]  triple napkin protocol for
[910.76s -> 914.52s]  the three napkins on which the protocol was described when it was first
[914.52s -> 915.16s]  designed.
[915.16s -> 919.44s]  And I would say it's now the kitchen sink protocol in that the number of steps in
[919.44s -> 920.92s]  its decision process, the number of
[920.92s -> 924.24s]  attributes passed around, the number of different kinds of things that can be
[924.24s -> 927.32s]  addressed in BGP, all of these things have gotten more and more and more
[927.32s -> 928.20s]  complicated.
[928.60s -> 932.68s]  And in part that's a a success disaster. It's possible to
[932.68s -> 936.44s]  to do a lot of things with BGP that were far beyond what it was originally
[936.44s -> 938.32s]  designed to do. And so it is a testament to how
[938.32s -> 942.20s]  evolvable it is that it has been evolving in this way. But it means that
[942.20s -> 944.80s]  it's just so complicated and so difficult to configure.
[944.80s -> 947.92s]  And also very insecure because
[947.92s -> 951.76s]  when it was originally designed there were no mechanisms for signing and verifying
[951.76s -> 953.24s]  of the routing information
[953.24s -> 957.20s]  and no reliable registries of which autonomous systems are allowed to
[957.20s -> 959.52s]  originate information for a particular address block.
[959.52s -> 962.68s]  And so now we're trying to put the cat back in the bag, if you will,
[962.68s -> 966.08s]  by putting a lot of that security infrastructure together and it's actually
[966.08s -> 967.40s]  quite difficult to do
[967.40s -> 971.52s]  after the fact. So in that sense BGP has kind of evolved to a place where it's
[971.52s -> 972.64s]  fairly unwieldy.
[972.64s -> 977.24s]  That said, if you replace BGP you still have to reconcile the fact that
[977.24s -> 980.72s]  different domains have different autonomy
[980.72s -> 983.96s]  and have different priorities for how they want their traffic to be handled.
[984.32s -> 987.44s]  So one thing that I'm really interested in along those lines is that
[987.44s -> 991.60s]  it seems weird to me that the economic relationships between domains
[991.60s -> 995.08s]  plays out at the time scale of individual packets or routing protocol
[995.08s -> 997.16s]  messages. That's a pretty small time scale
[997.16s -> 1001.24s]  for economic concerns to play out. And if you look at what's happened in
[1001.24s -> 1005.20s]  servers, virtualization has made it possible to really separate the owner
[1005.20s -> 1006.28s]  of an infrastructure
[1006.28s -> 1009.88s]  from the party that's actually running an application on top of that infrastructure.
[1009.88s -> 1013.44s]  A virtual machine that might belong to a tenant running on a server that might
[1013.56s -> 1018.04s]  belong to a company like Google or Microsoft or Amazon. And so I'm intrigued by the idea
[1018.04s -> 1019.88s]  that we can now virtualize networks
[1019.88s -> 1023.40s]  as well. And you've obviously worked on that, I have too.
[1023.40s -> 1027.40s]  It would be nice if I could instead have a virtual network
[1027.40s -> 1030.76s]  that spans the equipment owned and managed by multiple parties
[1030.76s -> 1034.92s]  and then control my own fate on top of that virtual topology.
[1034.92s -> 1038.24s]  So again, the business relationships don't matter but it's between me and the
[1038.24s -> 1041.28s]  party whose infrastructure my virtual components are embedded in
[1041.68s -> 1045.44s]  rather than me and the neighbor I'm side-by-side with. Or worse yet,
[1045.44s -> 1048.80s]  domains many hops away who have no accountability to me and no
[1048.80s -> 1052.20s]  visibility to me. So I think we can make a routing system that
[1052.20s -> 1056.12s]  is a lot more flexible and still cognizant of the fact that there are real
[1056.12s -> 1059.20s]  autonomous revenue generating parties involved
[1059.20s -> 1062.40s]  if we took advantage of some of the innovations in virtualization
[1062.40s -> 1066.16s]  over the past decade. So if someone's watching and they're
[1066.16s -> 1069.40s]  thinking of going to grad school interested in networking
[1069.56s -> 1073.84s]  is inter-domain routing still an interesting topic? Is it
[1073.84s -> 1077.84s]  becoming an interesting topic again? What do you think? What would be your advice?
[1077.84s -> 1081.60s]  I think it's interesting still in two ways that are perhaps different than it was
[1081.60s -> 1083.36s]  fifteen years ago. I think one is
[1083.36s -> 1087.36s]  rethinking how domains can relate to each other in a new economic reality,
[1087.36s -> 1089.24s]  taking advantage of virtualization,
[1089.24s -> 1092.40s]  taking advantage of the fact that large content providers
[1092.40s -> 1095.96s]  are very close to their customers, often one or two hops away,
[1096.36s -> 1100.12s]  making the network in some ways much flatter than it was when BGP was designed.
[1100.12s -> 1103.16s]  So I think revisiting how domains interconnect with one another
[1103.16s -> 1106.40s]  with video and content distribution in mind and with virtualization and
[1106.40s -> 1108.12s]  software-defined networking in mind,
[1108.12s -> 1111.32s]  I think is an interesting opportunity. And in general we found
[1111.32s -> 1114.32s]  with anything inter-domain and the internet stinks,
[1114.32s -> 1118.76s]  in that it's very hard to deploy quality of service, security,
[1118.76s -> 1122.16s]  IPv6, multicast, anything like that
[1122.16s -> 1125.40s]  inside a domain is challenging enough, but as soon as you need fifty thousand
[1125.40s -> 1128.96s]  parties to cooperate, it becomes almost impossible to affect
[1128.96s -> 1134.16s]  principled change. And so I think a lot of the more interesting work on BGP these days
[1134.16s -> 1137.76s]  is looking more at incremental deployment incentives
[1137.76s -> 1141.04s]  for an incremental deployment solutions, where you
[1141.04s -> 1144.16s]  get some security gain, scalability gain,
[1144.16s -> 1147.68s]  economic gain, even if only a small subset of the internet adopts a
[1147.68s -> 1148.80s]  technology change,
[1148.80s -> 1152.28s]  and then hopefully provides incentives for others to take part.
[1152.56s -> 1155.60s]  So I think we've entered a domain where, pun intended, a domain where
[1155.60s -> 1159.00s]  work on BGP may be more focused on how to evolve it
[1159.00s -> 1162.16s]  in a strategic way, rather than what
[1162.16s -> 1165.52s]  a clean slate design of BGP could look like.
[1165.52s -> 1169.24s]  Thank you very much Jen, this has been really interesting.
[1169.24s -> 1170.40s]  Thank you.
