# Detected language: en (p=1.00)

[0.00s -> 5.08s]  In this video, we're going to look at some common attacks that can be performed by compromising
[5.08s -> 9.32s]  local networks, usually running at layer 2.
[9.32s -> 14.44s]  Eavesdropping is quite easy if we put our network interface into promiscuous mode.
[14.44s -> 17.80s]  In promiscuous mode, your network interface will capture all of the packets passing
[17.80s -> 21.88s]  by, not just those addressed to your Ethernet address.
[21.88s -> 25.28s]  Computers allow this mode of operation so that they can act as an Ethernet switch.
[25.28s -> 29.92s]  For example, the Linux operating system comes with Ethernet switching code built in.
[29.92s -> 34.56s]  When Wireshark runs, it first puts your interface into promiscuous mode so that it
[34.56s -> 36.80s]  can see all the packets.
[36.80s -> 40.80s]  This is particularly easy in a Wi-Fi network and early Ethernet networks where packets
[40.80s -> 42.96s]  were broadcast onto a single shared link.
[42.96s -> 47.80s]  It doesn't work so well with modern Ethernet networks that use Ethernet switches, because
[47.80s -> 52.28s]  packets are usually private to the links between the source and destination.
[52.28s -> 56.72s]  In this video, I'll show you how we can force packets to be broadcast in any Ethernet
[56.72s -> 60.80s]  network by overflowing the forwarding tables.
[60.80s -> 64.56s]  We do this by preventing the switch from learning addresses correctly.
[64.56s -> 70.84s]  Once we've forced them to be broadcast, we can then eavesdrop using Wireshark.
[70.84s -> 74.04s]  The next approach is for the attacker to set up a computer that masquerades as a
[74.04s -> 83.28s]  DHCP or ARP server, redirecting packets from the sender via another server.
[83.28s -> 88.16s]  As I said, eavesdropping is very easy when packets are broadcast onto a shared medium.
[88.16s -> 92.36s]  Just like Wi-Fi packets are broadcast into the air for everyone to hear, the earliest
[92.36s -> 98.84s]  versions of Ethernet broadcast packets on a common cable attached to all the end hosts.
[98.84s -> 102.52s]  Eavesdropping was easy in this kind of network that shares a single broadcast communication
[102.52s -> 105.56s]  channel.
[105.56s -> 109.56s]  But as we saw in Unit 7, Ethernet has changed over the years.
[109.56s -> 114.34s]  Today, Ethernet networks use switches rather than a single shared cable.
[114.34s -> 118.92s]  We use switches because they allow many simultaneous communications in the network.
[118.92s -> 123.32s]  This is good news for performance, but it's bad news for the attacker, because our
[123.32s -> 128.30s]  packets only pass over the two links between Ellis and Bob.
[128.30s -> 132.28s]  The attacker can't see our packets.
[132.28s -> 136.20s]  A common exploit is to attack the tables in the Ethernet switches.
[136.20s -> 140.64s]  As you'll recall, an Ethernet switch learns the addresses of end hosts by watching
[140.64s -> 142.72s]  packets in the network.
[142.72s -> 147.80s]  For example, the switch between Alice and Bob, shown here, learns their Ethernet addresses
[147.80s -> 150.00s]  whenever they send packets.
[150.00s -> 153.80s]  Here is what the forwarding table might look like in a switch after it's learned some
[153.80s -> 155.52s]  of the addresses.
[155.52s -> 158.96s]  In practice, the tables are much bigger than this, usually tens or hundreds of thousands
[158.96s -> 163.88s]  of entries, but I show only a few here to keep things simple.
[163.88s -> 167.48s]  Remember that if a switch receives a packet with an Ethernet destination address that
[167.48s -> 173.00s]  is not already in its forwarding table, then it broadcasts the packets.
[173.00s -> 179.04s]  So how can the attacker persuade the switch to broadcast all the packets?
[179.04s -> 186.04s]  It can keep filling up the forwarding table with other addresses.
[186.04s -> 191.40s]  So what an attacker can do is keep sending at very high rate packets with new Ethernet
[191.40s -> 192.72s]  addresses.
[192.72s -> 197.32s]  The switches will learn these addresses, displacing entries already in the switches.
[197.32s -> 201.68s]  Typically, the replacement policy is least recently used.
[201.68s -> 205.38s]  So if the attacker sends at a high enough rate, the table will keep evicting the entries
[205.38s -> 207.00s]  for Alice and Bob.
[207.00s -> 213.12s]  All the packets will then be broadcast, and will be seen by the attacker.
[213.12s -> 224.80s]  This is called a MAC overflow attack.
[224.80s -> 229.10s]  Another common type of attack is to set up a rogue DHCP server.
[229.10s -> 234.08s]  In this attack, the attacker is going to try and persuade you to use a rogue DHCP
[234.08s -> 236.04s]  server instead.
[236.04s -> 240.20s]  Recall that DHCP is a service offered by the network to help configure your computer
[240.20s -> 243.76s]  when it boots or first attaches to the network.
[243.76s -> 248.54s]  Your computer sends out a sequence of broadcast discovery packets to find the DHCP server,
[248.54s -> 252.96s]  which is usually hosted on the nearest router.
[252.96s -> 257.36s]  After your computer has found the DHCP server, it sends a request asking to be allocated
[257.36s -> 261.36s]  an IP address on the local network, along with the address of the default router and
[261.36s -> 266.68s]  the addresses of the DNS servers it should use.
[266.68s -> 272.04s]  If the rogue DHCP server can respond faster than the legitimate server, it can respond
[272.04s -> 276.96s]  to Alice first, giving her whatever configuration information it wants.
[276.96s -> 281.52s]  For example, the attacker can give Alice a bad router address, so that she sends
[281.52s -> 285.68s]  traffic to the attacker instead of the router.
[285.68s -> 289.28s]  This makes it easy for the attacker to set up a man-in-the-middle attack without Alice
[289.28s -> 291.88s]  knowing.
[291.88s -> 296.84s]  A second way is for the attacker to give Alice the IP address of a remote rogue DNS
[296.84s -> 298.32s]  server.
[298.32s -> 304.40s]  When Alice looks up IP addresses in future, for example next time she visits Google.com,
[304.40s -> 308.56s]  the rogue DNS server can return the IP address of a different server and intercept
[308.56s -> 313.88s]  Alice's traffic.
[313.88s -> 322.12s]  Finally, the attacker can set up a rogue ARP server.
[322.12s -> 326.20s]  When Alice is sending packets to a local host or via the router, she will first send
[326.20s -> 331.56s]  an ARP request to find out the Ethernet address of the next hop.
[331.56s -> 336.52s]  First she sends a broadcast ARP request packet to the ARP server, which replies with the
[336.52s -> 340.44s]  legitimate Ethernet address she is looking for.
[340.44s -> 344.76s]  But if the attacker sets up a rogue ARP server that responds faster than the legitimate
[344.76s -> 349.28s]  ARP server, the attacker can give Alice the wrong information.
[349.28s -> 353.84s]  If the attacker replies with the Ethernet address of a rogue server in the local network,
[353.84s -> 357.24s]  then all of Alice's traffic will be sent to the rogue server.
[357.24s -> 360.76s]  This is an easy way to set up a man-in-the-middle attack by passing all of Alice's
[360.76s -> 363.56s]  traffic through a rogue server without Alice knowing.
