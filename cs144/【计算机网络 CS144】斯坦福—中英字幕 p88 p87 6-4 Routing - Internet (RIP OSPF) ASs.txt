# Detected language: en (p=1.00)

[0.00s -> 3.76s]  Now that we've learned about the basics of routing, flooding, shortest path, spanning
[3.76s -> 8.92s]  trees, and so on, and we've also learned about the distance vector protocol, Bellman-Ford
[8.92s -> 14.66s]  algorithm, the Link-State protocol, or Dijkstra's shortest path first algorithm, in this video
[14.66s -> 19.28s]  I'm going to put it all together and tell you about the structure of the Internet,
[19.28s -> 24.40s]  how hierarchical routing works, about interior and exterior routing protocols, and
[24.40s -> 28.72s]  the breakdown of the Internet into autonomous systems.
[28.72s -> 32.04s]  I'm going to be talking about three main things.
[32.04s -> 37.42s]  First of all, hierarchy and the decomposition of the Internet into autonomous systems.
[37.42s -> 42.96s]  The second is, within those autonomous systems, how we use the distance vector and Link-State
[42.96s -> 45.50s]  algorithms that we've already seen.
[45.50s -> 48.92s]  And the third one is the resulting structure of the Internet.
[48.92s -> 52.56s]  Let me start with the hierarchy.
[52.56s -> 55.82s]  When we learned about distance vector and Link-State algorithms, we were considering
[55.82s -> 60.22s]  the network to be a single collection of routers.
[60.22s -> 62.72s]  This is really impractical.
[62.72s -> 66.82s]  The Internet is made up of millions of routers interconnecting over a billion different
[66.82s -> 67.82s]  users.
[67.82s -> 72.98s]  And so simply for reasons of scale, we need to decompose routing into smaller sets.
[72.98s -> 76.02s]  So we do this for scale.
[76.02s -> 81.82s]  With a large number of routers, the sheer scale of exchanging routing information between
[81.82s -> 85.46s]  the routers and keeping it up to date makes it too hard.
[85.46s -> 89.74s]  I mean, imagine exchanging the Link-State information with a million other routers.
[89.74s -> 92.42s]  The network would just be flooded with updates all the time.
[92.42s -> 95.82s]  And the distance vector algorithm would never converge.
[95.82s -> 101.30s]  So that decomposition takes place into different autonomous systems.
[101.30s -> 102.70s]  And there's an example shown here.
[102.70s -> 105.44s]  This would be one autonomous system.
[105.44s -> 110.24s]  And this autonomous system contains different routers.
[110.24s -> 112.16s]  That's these.
[112.16s -> 117.48s]  This particular one has one exit point, and we'll see the significance of that in a minute.
[117.48s -> 124.32s]  And within that autonomous system, the system is free to pick its own interior routing
[124.32s -> 125.32s]  protocol.
[125.32s -> 131.04s]  In other words, to decide how packets are routed around within this autonomous system.
[131.04s -> 136.76s]  So this particular type of autonomous system is called a single exit or a stub autonomous
[136.76s -> 137.76s]  system.
[137.76s -> 143.72s]  There's another type of autonomous system called a multi-exit or a multi-exit autonomous
[143.72s -> 144.72s]  system.
[144.72s -> 146.32s]  For example, this one here.
[146.32s -> 150.96s]  This is one where, in this particular case, there are three exit points.
[150.96s -> 155.92s]  And again, it's an autonomous system, so they are free to determine the way in which
[155.92s -> 160.92s]  packets are routed within that autonomous system using the interior routing protocol
[160.92s -> 163.04s]  of their choice.
[163.04s -> 169.84s]  This is because the Internet was designed to give administrative autonomy.
[169.84s -> 173.32s]  The Internet was built up by many different entities.
[173.32s -> 178.44s]  And so an entity over here might be Stanford's network.
[178.44s -> 185.22s]  Whereas this here might be, for example, a provider like AT&T, who is routing our
[185.22s -> 188.10s]  packets to other networks.
[188.10s -> 191.06s]  And because of the different entities that grew up over time, and there are tens of
[191.06s -> 196.58s]  thousands of them, all with our own individual goals and desires, one of the original goals
[196.58s -> 202.30s]  of the Internet was to allow each organization to independently decide how it would run its
[202.30s -> 205.50s]  own piece of the network, to allow it to organically grow.
[205.50s -> 211.10s]  And in many ways, this was a big factor in the success of the organic growth of the
[211.10s -> 215.94s]  Internet, particularly during the 1990s, and allowed each one to decide what routing
[215.94s -> 219.06s]  protocol it would use inside its network.
[219.06s -> 225.18s]  So it means that, for example, at Stanford, we might use the interior routing protocol
[225.18s -> 230.76s]  OSPF in order to route our packets, whereas inside AT&T, they might use RIP, or they
[230.76s -> 235.10s]  might use another one that's called IS-IS.
[235.10s -> 238.34s]  It leads to local customization.
[238.34s -> 239.78s]  It leads to differentiation.
[239.78s -> 245.90s]  So AT&T here might compete with Verizon here, and they can differentiate and provide a different
[245.90s -> 246.90s]  service.
[246.90s -> 250.50s]  Hopefully, for me, the end customer a better service as a result through competition amongst
[250.50s -> 252.10s]  the operators.
[252.10s -> 257.30s]  And by allowing for local customization, it means the vendors of the routers can also
[257.30s -> 261.98s]  offer different types of features and functionality, and so it leads to competition amongst
[261.98s -> 264.90s]  the router vendors as well.
[264.90s -> 271.10s]  So for all these reasons, the Internet was divided into autonomous systems.
[271.10s -> 277.40s]  Autonomous systems, or ASs, are the basic unit of hierarchy in the Internet.
[277.40s -> 285.34s]  Within an AS, the owner decides how routing is done, and between ASs, we must use BGP4.
[285.34s -> 291.90s]  This is the border gateway protocol, and it's defined by Internet RFC 1771, and this
[291.90s -> 298.66s]  allows for a consistent method for all of the different ASs to communicate, and we'll
[298.66s -> 302.86s]  be learning about BGP4 in a later video.
[302.86s -> 307.58s]  If you want to find an AS number, you can do this in a number of ways.
[307.58s -> 311.80s]  One way to do it, actually the simplest, is to just do a traceroute to a particular
[311.80s -> 318.62s]  destination with the minus-A option, and this should give you the AS numbers of the
[318.62s -> 320.28s]  ones in between.
[320.28s -> 324.60s]  Most or many enterprises will have a single AS.
[324.60s -> 331.28s]  For example, Stanford's, if you find it, will be 32, AT&T's is 797.
[331.28s -> 337.60s]  Some enterprises choose to break down their own network into multiple autonomous systems.
[337.60s -> 343.76s]  For example, Google has three that are reported, and some networks even have dozens.
[343.76s -> 349.16s]  It's a slightly more complicated way of finding it, but specifically, querying would
[349.16s -> 357.44s]  be this way, and that is to query using netcat-nc if you perform this, so it's essentially
[357.44s -> 362.88s]  going to this particular WHOIS provider, and then entering a particular IP address.
[362.88s -> 367.66s]  It will tell you the autonomous system that that IP address belongs to.
[367.66s -> 374.46s]  So if you wanted to find the AS number for Stanford, you would first do a DNS lookup
[374.46s -> 382.42s]  for stanford.edu, find that in its A record, this is the primary address, then you can
[382.42s -> 388.44s]  find the autonomous system for that particular IP address by doing this, by entering it here,
[388.44s -> 392.86s]  and then that will return AS32.
[392.86s -> 397.02s]  Let me show you a couple of examples of those right now.
[397.02s -> 399.62s]  Let's say I wanted to find the AS number for Stanford.
[399.62s -> 407.22s]  I could start by looking up the record for stanford, and we can see it here, the primary
[407.22s -> 417.20s]  A record address, and then I can do the lookup using netcat to the WHOIS.
[417.20s -> 420.70s]  This is just folks that provide a particular one that I like.
[420.70s -> 428.74s]  If I put in the address here for stanford, and then we'll see it returns the AS of 32
[428.74s -> 432.82s]  down here in the left hand corner for stanford.
[432.82s -> 440.22s]  Similarly, if I wanted to find the AS numbers for the routers along and the networks along
[440.22s -> 450.46s]  the path from my computer to, say, netflix.com, I could use the traceroute-a option, and
[450.46s -> 452.42s]  here we go.
[452.42s -> 453.70s]  Let's look at this here.
[453.70s -> 459.72s]  So at the top we see, or near the top, we see the AS32 corresponding to stanford.
[459.72s -> 465.46s]  Down the bottom we see the AS2906 corresponding to netflix.
[465.46s -> 469.30s]  We'll see one here which is AS65534.
[469.30s -> 475.38s]  This is basically saying that it's a private address, 10.33.0.2, because it begins with
[475.38s -> 479.34s]  a 10 as a private IP address used inside stanford.
[479.34s -> 484.70s]  So given it's a private address, it's not able to return an AS number.
[484.70s -> 489.66s]  And in the middle here we see 2152, which is a scenic, which is the California network
[489.66s -> 496.60s]  that connects us between stanford and some outside providers.
[496.60s -> 500.22s]  Now we know the basic structure, let's look at the interior routing protocols.
[500.22s -> 506.32s]  I've already mentioned RIP, or the Routing Information Protocol, and this was the first
[506.32s -> 510.22s]  widely used interior routing protocol in the Internet.
[510.22s -> 515.00s]  It uses distance vector, in particular the distributed Bellman-Ford algorithm.
[515.00s -> 520.26s]  It's described by an Internet RFC, this is actually version 2 of RIP, which is the
[520.26s -> 522.08s]  one most widely used.
[522.08s -> 528.12s]  It sends updates every 30 seconds, and will determine that a router has become unavailable
[528.12s -> 532.56s]  if it hasn't heard within 180 seconds or 3 minutes.
[532.56s -> 538.04s]  So there are no authentication for updates, meaning that there are definitely some security
[538.04s -> 541.76s]  implications of using RIP.
[541.76s -> 548.74s]  RIP became popular to start with because it was originally in the BSD version of Unix,
[548.74s -> 555.74s]  and there was a daemon that was widely used, widely available for routers that were using
[555.74s -> 558.86s]  RIP.
[558.86s -> 565.18s]  And you can find many references to this on the web.
[565.18s -> 571.82s]  So it was widely used for many years, it's used a little less now because of the convergence
[571.82s -> 577.18s]  problems that people have found with RIP, and it tends to have been mostly replaced
[577.18s -> 584.54s]  by OSPF or ISIS, which is very similar to OSPF.
[584.54s -> 591.38s]  So OSPF is defined in Internet RFC 2328, and it's a link state algorithm, so link state
[591.38s -> 593.78s]  updates are sent using flooding.
[593.78s -> 599.10s]  And just in case I didn't say this before, we use flooding because during the time
[599.10s -> 604.10s]  that we're trying to find the topology of the network, we don't know how to reach
[604.10s -> 607.40s]  anyone, so we don't have any topology information, that's why we're flooding
[607.40s -> 608.94s]  the link state information.
[608.94s -> 613.62s]  So we can't route the link state information to every router, because we don't know
[613.62s -> 614.62s]  the path.
[614.62s -> 621.86s]  So flooding is the simplest routing table-free way of making sure that every router in the
[621.86s -> 625.38s]  network finds out the link state.
[625.38s -> 627.58s]  So that's why flooding is used.
[627.58s -> 630.08s]  It runs Dijkstra's algorithm as we know.
[630.08s -> 633.90s]  The updates are authenticated, meaning that we're sure that they belong to the router
[633.90s -> 636.66s]  that we are communicating with.
[636.66s -> 640.10s]  Because some autonomous systems are very big, it's quite common to partition them
[640.10s -> 645.38s]  down into areas, so our own campus network here at Stanford is partitioned into OSPF
[645.38s -> 646.38s]  areas.
[646.38s -> 650.26s]  It's widely used, it's quite complex, this is a gross simplification here, but
[650.26s -> 656.78s]  it gives us the basic ideas of how OSPF works.
[656.78s -> 661.38s]  So once we know how to route packets within an autonomous system, it's worth asking
[661.38s -> 666.26s]  the question of how do we route them from within an autonomous system to a different
[666.26s -> 667.42s]  autonomous system?
[667.42s -> 670.98s]  So how do they make it first out of the autonomous system?
[670.98s -> 677.18s]  How does the interior routing protocol isn't going to tell us directly how we exit from
[677.18s -> 682.02s]  an autonomous system, because it's dealing with the addresses of routers that are outside
[682.02s -> 683.44s]  of this autonomous system.
[683.44s -> 686.02s]  So there are really two cases that we need to think about.
[686.02s -> 689.14s]  One is when we're routing to a single exit point.
[689.14s -> 694.16s]  So this would be from a stub autonomous system that actually only has one exit point.
[694.16s -> 698.64s]  Much easier in this case than in the more general case where there are multiple exit
[698.64s -> 699.64s]  points.
[699.64s -> 703.84s]  So if there's only one exit point, routers within the autonomous system can use what's
[703.84s -> 706.12s]  called default routing.
[706.12s -> 711.94s]  Each router knows all of the prefixes within its autonomous system.
[711.94s -> 717.52s]  So it knows all of the prefixes inside the autonomous system, and packets for another
[717.52s -> 721.64s]  autonomous system are sent to what's called the default router, and the default router
[721.64s -> 724.64s]  is the border gateway to the next autonomous system.
[724.64s -> 726.36s]  So it's nice and simple.
[726.36s -> 731.36s]  It essentially says, if you see an address in a packet that you don't know what to
[731.36s -> 735.02s]  do with, then just forward it to the default router.
[735.02s -> 740.08s]  And default routing means that the routing tables in the single exit ASs tend to be very
[740.08s -> 746.16s]  small, because each router only needs to hold the addresses for the prefixes within
[746.16s -> 748.76s]  its autonomous system.
[748.76s -> 750.48s]  Otherwise it just forwards them out.
[750.48s -> 752.40s]  Nice and easy.
[752.40s -> 756.44s]  Life is more complicated when we need to route to multiple exit points.
[756.44s -> 760.36s]  So this would be in a transit autonomous system, or one where there are multiple exit
[760.36s -> 761.90s]  points.
[761.90s -> 766.08s]  This has actually become much more common in the last few years, because nearly all
[766.08s -> 773.80s]  sizable enterprises like Stanford will connect at multiple exit points to different providers.
[773.80s -> 779.24s]  So we might provide, we might connect to an educational backbone, a research and
[779.24s -> 784.24s]  education network, and then we will connect to one or two commercial providers.
[784.24s -> 787.96s]  Just in case one of them goes down, one of them is temporarily unavailable, one of
[787.96s -> 790.96s]  them is perhaps too expensive for a particular route.
[790.96s -> 793.24s]  It allows us to choose and have control.
[793.24s -> 795.06s]  So multi-homing is very common.
[795.06s -> 801.20s]  Now we need to choose for each outgoing packet which exit point it will take.
[801.20s -> 806.80s]  So the problem here is that each internal router must be told which exit point to
[806.80s -> 808.90s]  use for a given destination prefix.
[808.90s -> 811.72s]  This is the essence of the problem.
[811.72s -> 816.90s]  That means that when it sees a prefix which is not inside the autonomous system, it has
[816.90s -> 820.14s]  to know which exit point to use.
[820.14s -> 824.82s]  So this means it requires very large routing tables so that it potentially routes to every
[824.82s -> 825.94s]  prefix.
[825.94s -> 831.34s]  And so the routing tables in an autonomous system with multiple exit points tend to
[831.34s -> 837.18s]  be very, very big, tens or hundreds of thousands of prefix entries.
[837.18s -> 844.34s]  This can actually be made a little simpler if the autonomous system uses what's called
[844.34s -> 846.22s]  hot potato routing.
[846.22s -> 851.90s]  Hot potato routing is when instead of making a smart choice in the best interest of the
[851.90s -> 857.34s]  packet and its destination, it simply sends to the closest exit point.
[857.34s -> 863.02s]  In other words, it says for any given router, it sends it to the exit point closest to
[863.02s -> 867.24s]  it if it decides it's not within the autonomous system.
[867.24s -> 873.34s]  Hot potato routing is also seen as offloading, somewhat a selfish act by the autonomous system
[873.34s -> 876.94s]  because it's offloading the packets as quickly as it can to become somebody else's
[876.94s -> 882.54s]  problem and is not very popular with its neighboring autonomous systems.
[882.54s -> 887.44s]  But it's actually very widely used today in the internet for both commercial reasons
[887.44s -> 889.82s]  and reasons of simplicity.
[889.82s -> 894.46s]  The more elaborate way would be to pick the exit which is closest to the destination or
[894.46s -> 898.40s]  is on the lowest cost path to the eventual destination.
[898.40s -> 902.58s]  And that requires the dissemination of more information within the autonomous system in
[902.58s -> 910.26s]  order to make that decision.
[910.26s -> 913.70s]  Now we've learned a little bit about how routing goes on within the autonomous
[913.70s -> 914.70s]  system.
[914.86s -> 920.46s]  I now want to explain a little bit about the exterior routing protocol, BGP4.
[920.46s -> 925.32s]  Every autonomous system in the internet must interconnect to other autonomous systems
[925.32s -> 927.82s]  using BGP4.
[927.82s -> 932.32s]  Just like we're required to use IP in order to deliver our packets, that's what
[932.32s -> 937.46s]  the internet uses, the thin waste of routing protocols is BGP4.
[937.46s -> 940.70s]  In other words, it's the one that we must all use.
[940.70s -> 944.94s]  So I'm going to describe BGP4 in a separate video, but I just wanted to tell you a little
[944.94s -> 950.70s]  bit about the problems that BGP4 was designed to try and solve.
[950.70s -> 959.66s]  First of all, it has a very different problem for an exterior routing protocol than for
[959.66s -> 961.78s]  an interior routing protocol.
[961.78s -> 968.44s]  Specifically, when we're considering the topology, the internet is a very complex
[968.44s -> 973.36s]  mesh of different autonomous systems and has very little structure to it.
[973.36s -> 977.84s]  You've seen the picture which is the logo for this class, and we'll have seen that
[977.84s -> 982.48s]  it's a very unstructured interconnection mesh.
[982.48s -> 990.24s]  And so trying to exploit that, any structure, is not going to get us very far.
[990.24s -> 994.02s]  Each of the autonomous systems is autonomously controlled.
[994.02s -> 997.08s]  So they might define the link costs in very different ways.
[997.08s -> 1000.42s]  So it's not possible to find lowest cost paths.
[1000.42s -> 1005.20s]  We're simply going to have to find a set of paths based on the number of autonomous
[1005.20s -> 1008.20s]  systems that they pass through.
[1008.20s -> 1010.00s]  Another thing that we need to consider is trust.
[1010.00s -> 1014.00s]  When we're going between autonomous systems, we'll find that some autonomous systems
[1014.00s -> 1016.36s]  aren't willing to trust others.
[1016.36s -> 1023.16s]  Perhaps they don't trust them to advertise good routes, e.g. they might be a competitor,
[1023.16s -> 1027.82s]  or they may want to protect the privacy of their traffic.
[1027.82s -> 1031.68s]  So they might not want to send traffic through another autonomous system.
[1031.68s -> 1035.92s]  For example, it might be a warring nation.
[1035.92s -> 1043.20s]  Another thing that BGP4 was set out to solve was the question of independent policies.
[1043.20s -> 1047.98s]  So different autonomous systems have different objectives.
[1047.98s -> 1050.88s]  Some might try to route over the fewest hops.
[1050.88s -> 1053.24s]  They may prefer one provider over another.
[1053.24s -> 1057.64s]  They might have a lower cost arrangement with one provider compared to another.
[1057.64s -> 1061.00s]  So they have local policies that they perhaps don't want to share with others.
[1061.00s -> 1063.74s]  And in general, these policies are kept secret.
[1063.74s -> 1068.04s]  And so BGP4 is designed to work in a way that will allow for that policy to be a
[1068.04s -> 1072.08s]  local private matter for the autonomous system.
[1072.08s -> 1078.60s]  So we'll see BGP4 in more detail in a different video.
[1078.60s -> 1085.16s]  Finally, I want to just tell you a little bit about the structure of the Internet as
[1085.16s -> 1088.68s]  we've seen it so far.
[1088.68s -> 1097.12s]  So first, at the top level, there are what we would all recognize as Internet service
[1097.12s -> 1098.28s]  providers.
[1098.28s -> 1102.88s]  They might be companies like AT&T.
[1102.88s -> 1106.32s]  They might be, in Japan, it might be NTT.
[1106.32s -> 1115.36s]  There's about a dozen of these what are so-called Tier 1 ISPs.
[1115.36s -> 1122.72s]  And they are defined as ISPs that are fully mesh-interconnected with each other and who
[1122.72s -> 1125.46s]  peer each other without charging each other.
[1125.46s -> 1127.04s]  It's called settlement-free peering.
[1127.04s -> 1136.24s]  In other words, there's no money that goes across this interface between them.
[1136.24s -> 1143.48s]  They then connect down to what are usually called regional ISPs, which might correspond
[1143.48s -> 1149.80s]  to a state or a county or a region of a country.
[1149.80s -> 1159.12s]  And those, in turn, connect below them to what are called the access ISPs.
[1159.12s -> 1164.04s]  So there would be many access ISPs along the bottom here.
[1164.04s -> 1167.12s]  And these would be the ones that we connect to as users.
[1167.12s -> 1174.84s]  So users are down below these access ISPs down here.
[1174.84s -> 1180.20s]  And they will connect up here, and an access ISP might connect to multiple regional ISPs,
[1180.20s -> 1186.04s]  and the regional ISPs will generally connect to multiple Tier 1 ISPs.
[1186.04s -> 1192.68s]  So this hierarchy is one in which there's a well-defined relationship between each
[1192.68s -> 1195.40s]  of these entities.
[1195.40s -> 1205.34s]  So in general, up above is the provider, and below is the customer.
[1205.34s -> 1208.84s]  So the provider is providing service to the customer.
[1208.84s -> 1211.16s]  And that goes on down all the way down.
[1211.16s -> 1214.84s]  So in going down, this is the provider, and this is the customer.
[1214.84s -> 1218.18s]  And generally, the provider will charge the customer.
[1218.18s -> 1223.40s]  So in other words, in order to send packets from the regional to the tier, their money
[1223.40s -> 1225.56s]  is charged, a settlement charge.
[1225.56s -> 1229.36s]  Generally, they keep track of all the data that's sent over there over some period,
[1229.36s -> 1232.44s]  like a month, and then they will settle after that time.
[1232.44s -> 1234.84s]  So there would be money charged in that direction.
[1234.84s -> 1239.68s]  But there's no money going in this direction across here.
[1239.68s -> 1245.32s]  So in order to save money, it's quite common for the regional ISPs to have connections
[1245.32s -> 1250.32s]  across here so that the packets between access ISPs, if there's a lot of traffic,
[1250.32s -> 1254.64s]  it can actually go through the regional ISP without going to the Tier 1, and therefore
[1254.64s -> 1260.26s]  they don't need to pay for that.
[1260.26s -> 1262.92s]  So this is the basic internet infrastructure.
[1262.92s -> 1266.64s]  Tier 1 ISPs, about a dozen of them around the world.
[1266.64s -> 1271.28s]  And then regional ISPs, generally within a country or within the region of a country,
[1271.28s -> 1281.32s]  and then access ISPs to the ones that we connect to in order to get access to the internet.
[1281.32s -> 1286.88s]  So in summary, the internet consists of multiple autonomous systems, ASs, each managed
[1286.88s -> 1287.88s]  independently.
[1287.88s -> 1291.90s]  An AS runs its own interior routing protocol, in other words, it chooses the one that
[1291.90s -> 1294.40s]  it will run.
[1294.40s -> 1299.36s]  In the case of stub ASs, they use simple default routing, so they're very simple.
[1299.36s -> 1304.42s]  ASs with multiple exit points must decide the best exit to use when routing packets
[1304.42s -> 1306.76s]  to other autonomous systems.
[1306.76s -> 1311.32s]  ASs must connect to each other using the BGP4 protocol, which we're going to learn
[1311.32s -> 1314.84s]  about in a future video.
[1314.84s -> 1315.76s]  That's the end of this video.
