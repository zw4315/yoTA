# Detected language: en (p=1.00)

[0.00s -> 5.62s]  Now that we've learned about CSMA-CD, I'm going to tell you about Ethernet. Ethernet
[5.62s -> 11.36s]  started in the early 1970s, originally it ran at 10 Mbps, but has evolved a long way
[11.36s -> 18.44s]  since then. In the first place, CSMA-CD was right at the heart of how Ethernet worked,
[18.44s -> 22.86s]  and determined how many hosts would share a single cable. We'll see later that it
[22.86s -> 26.02s]  became less important as the speed went up.
[26.04s -> 31.54s]  The original Ethernet looked like this. These are two pictures that were drawn by Bob Metcalf,
[31.54s -> 36.86s]  one of the co-inventors of Ethernet back in the early 70s. He was working at Xerox PARC
[36.86s -> 40.10s]  at the time. He later went on to found 3Com.
[40.10s -> 43.58s]  So on the left is showing the original topology that they had in mind of both wired
[43.58s -> 48.26s]  and wireless Ethernet. And on the right shows the specifics of how the first Ethernet
[48.26s -> 52.38s]  network was built. There was this big thick yellow cable. It was always yellow. It was
[52.38s -> 56.42s]  very very thick and inflexible and snaked around in the ceiling or in the walls or
[56.42s -> 61.26s]  under the floor. And then these big taps would be screwed down into the cable to make
[61.26s -> 65.94s]  an electrical contact for an interface and then a computer. It became much simpler
[65.94s -> 69.46s]  over time, ending up with what we use today.
[69.46s -> 73.00s]  This is the Ethernet frame format. This is the format of the frames that are put
[73.00s -> 79.78s]  onto the link. The first bit is shown on the left hand side, and it starts with
[79.78s -> 85.30s]  a preamble. The preamble is a sequence of ones and zeros just there to train the clock
[85.30s -> 89.38s]  recovery circuits to help them get started and to have recovered the clock before the
[89.38s -> 93.74s]  data actually starts to arrive. There's a starter frame delimiter, which is a special
[93.74s -> 99.50s]  symbol which tells us that the packet is just about to start. And we then go into
[99.50s -> 104.22s]  the destination address, which we already know to be a 48-bit address. This is a globally
[104.22s -> 110.74s]  unique address, assigned by the manufacturer of the interface. One bit tells us whether
[110.74s -> 115.70s]  it's unicast or multicast, and one bit can be used in fact to make it a locally
[115.70s -> 121.46s]  defined address, although that's actually very unusual. So there's 46 bits that
[121.46s -> 126.98s]  are there to define the globally unique address. So there's a very very large number
[126.98s -> 132.42s]  of Ethernet addresses to use. The source address is just the address of the local host
[132.62s -> 137.54s]  that's sending the frame in the usual sense. The type indicates what we'll find inside
[137.54s -> 145.54s]  the data. For example, the ether type of 0800 is telling us that there's IP inside
[145.54s -> 149.86s]  here, which of course is a very common case. You'll recall that there is a minimum
[149.86s -> 157.42s]  size for any CSMA CD-based network, a minimum packet size. So we pad the packet if the
[157.42s -> 163.78s]  data is very short. We pad it to make sure that there are a sufficient number of bytes
[163.78s -> 168.34s]  so that we can detect collisions reliably before we've finished sending the packet.
[168.34s -> 172.70s]  So they're padded out to a minimum of 46 data bytes. So if the amount of data
[172.70s -> 178.26s]  is over 46, then of course it won't pad it, but otherwise it will pad it just to
[178.26s -> 182.34s]  make sure that there's enough. And finally there's what's called a cyclic redundancy
[182.34s -> 187.90s]  check CRC or the frame check sequence. The CRC is checking the sequence using a code
[187.90s -> 193.46s]  like we saw in the error detection videos that will tell us whether or not there was
[193.46s -> 198.62s]  an error in the bits, for example if the bits were corrupted on the wire or in the
[198.62s -> 205.02s]  end host before it was processed. The original 10 megabits per second Ethernet was standardized
[205.02s -> 212.58s]  by IEEE and goes by the standard of IEEE 802.3. You'll often hear Ethernet being
[212.58s -> 218.90s]  referred to as a .3 network for this reason, just as an abbreviation of 802.3. And this
[218.90s -> 223.90s]  was just the standard's body name that was used to write the spec that defined
[223.90s -> 227.98s]  the correct operation of Ethernet. So it has really two components. It has the Mac
[227.98s -> 233.62s]  protocol and the frame structure that we've just seen. And then underneath you had different
[233.62s -> 238.42s]  options for the physical layer that could be used. There was originally what's called
[238.42s -> 244.46s]  the 10 base 5, which was that big thick yellow cable that I described earlier. And
[244.46s -> 248.50s]  that went out of fashion quite a long time ago. Then that was replaced by a thin
[248.50s -> 253.70s]  coaxial cable version that used the coaxial cable similar to the RF cables we use for
[253.70s -> 261.30s]  TV. But what really really transformed Ethernet was when it started to use this type
[261.30s -> 267.78s]  of cable here. This is the RJ45 cable that we're all very familiar with. And that
[267.78s -> 271.54s]  was not because of the connector. It was because of the type of cable that it can
[271.54s -> 275.98s]  use and also the topology of the network. And we'll see that in a moment. But basically
[275.98s -> 280.58s]  it started to run over voice-grade unshielded twisted pair that was already present in
[280.58s -> 285.86s]  the walls of many buildings. It's called Category 3 telephone cable. It's a fairly low-grade
[285.86s -> 292.82s]  cable that was used for connecting telephones to the exchange at a company. There's also
[292.82s -> 297.90s]  an optical fiber version called 10Base-F. It was originally used mostly by the military
[297.90s -> 304.10s]  because they're harder to tap. There were two optical fibers in a single cable, one
[304.10s -> 309.82s]  for each direction. Ethernet really took off when the 10Base-T standard came along for
[309.82s -> 315.74s]  running Ethernet over twisted pair. So 10 megabits per second was carried over the
[315.74s -> 321.14s]  Category 3 twisted pair telephone wires that already existed in pretty much every
[321.14s -> 326.90s]  building in the world. They were arranged in a star. In other words, those twisted pair
[326.90s -> 332.46s]  cables would go to a wiring closet on their way to the telephone exchange. So not
[332.46s -> 337.54s]  only did the twisted pair cable really help Ethernet be successful, but this topology
[337.54s -> 344.14s]  of having an end host connected by twisted pair into a hub, and a hub was a repeater,
[344.14s -> 349.46s]  it would take every signal coming in and then repeat it over every outgoing cable
[349.46s -> 354.38s]  except for the one through which it entered. So it didn't actually understand the packets.
[354.38s -> 358.38s]  It would merely repeat them electrically. If there was a collision, then the collision
[358.38s -> 362.18s]  would take place anywhere within here. It would be detected and the hub would make
[362.18s -> 368.34s]  sure that the voltage levels were sufficient to make sure that it could be detected.
[368.34s -> 376.66s]  Also this centralized management in this hub, this would be managed by the network administrator.
[376.66s -> 381.66s]  And this central management, rather than the distributed management of crawling under
[381.66s -> 386.82s]  the floorboards or up in the attic, made it much, much easier to manage Ethernet
[386.82s -> 390.14s]  once these hubs were placed in these central locations.
[390.14s -> 395.62s]  So this led to a huge growth in Ethernet in the mid 1980s.
[395.62s -> 401.30s]  Over the years, people wanted to make Ethernet faster and faster. So 10 Mbps gradually was
[401.30s -> 406.46s]  increased to 100 Mbps, and then gigabit per second, and more recently 10 Gbps, so
[406.46s -> 410.78s]  a thousand times faster than the original Ethernet spec.
[410.78s -> 415.54s]  One problem that we have to solve when increasing the size of Ethernet is, if we're
[415.54s -> 421.86s]  using CSMA-CD, then we need to make sure that we keep this requirement that P over
[421.86s -> 426.54s]  R is greater than or equal to 2L over C. In other words, the duration of a packet
[426.54s -> 431.26s]  is longer than the round trip time, so that we can make sure that we're still
[431.26s -> 434.90s]  transmitting a packet when a collision is detected.
[434.90s -> 440.22s]  So when we increase the speed of the network, when we increase R, in order for this
[440.22s -> 446.30s]  to be true, we either need to make P larger, to counterbalance that increase in R, or we
[446.30s -> 452.58s]  need to make L smaller. And so this was a design choice when Ethernet was made faster.
[452.58s -> 457.30s]  And the solution was to keep the packet size the same, because if we'd made the
[457.30s -> 463.54s]  packet size 10 times larger, from 64 bytes, which was the original, up to 640 bytes,
[463.54s -> 466.82s]  then many of the packets that we'd like to send would be smaller than that, things
[466.82s -> 471.54s]  like acknowledgments and DNS queries, things like that. And so it would be very inefficient.
[471.54s -> 478.10s]  So the decision was to keep P the same, but to make L smaller.
[478.10s -> 482.54s]  So 100 megabit per second Ethernet and gigabit per second Ethernet both have
[482.54s -> 488.90s]  this requirement that L is limited to 100 meters. This turned out to be much easier
[488.90s -> 493.42s]  with the introduction of Ethernet switching, as I'll describe in a few minutes.
[493.46s -> 498.74s]  So as we made it faster and faster, the Ethernet MAC protocol stayed the same.
[498.74s -> 503.66s]  That's the framing structure and the way in which we decide when to send packets
[503.66s -> 509.78s]  under the wire. That stayed the same for a while. And the 100 megabit per second
[509.78s -> 514.38s]  Ethernet was called fast Ethernet. It doesn't seem so fast these days.
[514.38s -> 519.94s]  And there were two standards for the physical layer, 100 base TX, which was the
[519.94s -> 526.34s]  decoding structure used for twisted pair cable, and then 100 base FX for optical fiber.
[526.34s -> 533.46s]  On the 100 base TX, it uses category 5 cable again, and the same RJ45 connector that we've seen.
[533.46s -> 538.78s]  It actually started to be full duplex, meaning there were two pairs that were used,
[538.78s -> 543.74s]  rather than just one within the cable. One pair was used for 100 megabits per second,
[543.74s -> 548.50s]  signaling in each direction. Instead of using the Manchester encoding,
[548.50s -> 555.70s]  it started to use 4B5B encoding, which we saw as the means to introduce transitions for clock recovery.
[555.70s -> 562.70s]  We saw that in the video about clocks. And of course, it was limited to a distance of 100 meters.
[562.70s -> 569.34s]  Then later came along the 1 gigabit Ethernet standard. There was the 1000 base T,
[569.34s -> 574.82s]  and the 1000 base FX. That should be 1000 base T.
[574.82s -> 581.82s]  The 1000 base T standard also runs over category 5 cable using the RJ45 connector,
[581.82s -> 589.82s]  as many of the laptops and servers that are sold today, the Ethernet in them is 1 gigabit per second, or 1000 base T.
[589.82s -> 596.82s]  It turns out it's very hard to carry a 1 gigabit per second signal over a category 5 cable.
[596.82s -> 603.82s]  So they actually use four pairs inside the cable, and they carry signals in both directions at the same time,
[603.82s -> 610.82s]  over all four pairs. So there's no room for anything else on this cable. It can only be used for the gigabit Ethernet.
[610.82s -> 616.82s]  It uses a very complex coding, which is beyond the level of what we're going to be describing in this class,
[616.82s -> 624.82s]  and it uses five-level signaling. So instead of just using a binary on-off, as was used in the original 10 megabits per second Ethernet,
[624.82s -> 631.82s]  it uses five different levels to try and pack as much signal, as much information onto the cable as it can.
[631.82s -> 635.82s]  And as before, the distance is limited to 100 meters.
[635.82s -> 642.82s]  By the late 1980s, 10 base T Ethernet was extremely popular.
[642.82s -> 649.82s]  There was already work going on on 100 megabit per second Ethernet, and it was clear that the networks would get faster and faster.
[649.82s -> 659.82s]  The hubs and the repeaters in the wiring closets meant that the networks could be really quite large, and were being deployed on a very large scale.
[660.82s -> 668.82s]  But it was clear also that for faster and faster networks, each of the segments was going to get very, very short, just down to 100 meters.
[668.82s -> 677.82s]  So with a large number of hosts sharing a small network, the networks tended to be overwhelmed with the number of collisions that they would see,
[677.82s -> 681.82s]  because there were just so many hosts all trying to talk on the same network.
[681.82s -> 690.82s]  So it became natural to try and partition those Ethernet networks to reduce the number of collisions, what's often referred to as reducing the collision domain.
[690.82s -> 700.82s]  At the same time, cost of switching hardware was coming down. It became easier to build ASICs, or specialized chips, for doing the switching.
[700.82s -> 706.82s]  And so all of these things together led to partitioning networks using Ethernet switches.
[706.82s -> 716.82s]  So with a hub or a repeater, every time a packet is sent, the whole medium of all of these five links would become busy and would be used up.
[716.82s -> 724.82s]  So within this circle here, the entire capacity is, say, 10 megabits per second or 100 megabits per second, depending on the rate.
[724.82s -> 734.82s]  So with large networks with, say, hundreds of end hosts all connected to a hub or a set of hubs, this would be very limiting in the total overall capacity that they had to use.
[734.82s -> 738.82s]  What if we could allow several communications to take place at the same time?
[738.82s -> 748.82s]  So for example, if A wants to talk to B at the same time that C is talking to D, because they're talking to different hosts, different sets of hosts,
[748.82s -> 753.82s]  why don't we allow this by allowing the communications to take place independently?
[753.82s -> 760.82s]  So instead of the hub repeating the signal just as an electrical signal, what if it was to actually interpret the packets,
[760.82s -> 768.82s]  send the packets only to the correct destination, just like a router does, but based on the Ethernet addresses rather than the IP addresses.
[768.82s -> 774.82s]  So this is what was called a switch. Before being called Ethernet switches, they were called bridges.
[774.82s -> 779.82s]  You will see those referred to sometimes, but we're just going to call them Ethernet switches.
[779.82s -> 785.82s]  So the basic operation is, if A is sending to B, the packet will flow down to the switch.
[785.82s -> 788.82s]  The switch will look at the Ethernet address, decide where to send it next.
[788.82s -> 791.82s]  If it has it in its table, then it will forward it to B.
[791.82s -> 797.82s]  And at the same time, perhaps, C is sending a packet to D, and the same thing will be happening over here, independently.
[797.82s -> 801.82s]  So the collisions now are just held within a single cable.
[801.82s -> 807.82s]  So if there happen to be signals going in both directions on the cable at the same time, that might cause a collision.
[807.82s -> 812.82s]  Although at the same time, there was also introduced something called full duplex Ethernet,
[813.82s -> 820.82s]  which was exploiting the fact that communications could take place on the cable in both directions without colliding with each other at the same time.
[820.82s -> 829.82s]  And so now the switch could operate without the use of CSMA-CD completely, once the switches were introduced and all of the links were full duplex.
[831.82s -> 837.82s]  So this led to the very first Ethernet switches being developed in the early 1990s.
[837.82s -> 841.82s]  And nearly all Ethernet networks today are based on Ethernet switches.
[841.82s -> 844.82s]  It's very unusual to see an Ethernet hub these days.
[844.82s -> 851.82s]  In fact, for 1 Gbps and 10 Gbps Ethernet, there's no choice. All those networks are switched.
[851.82s -> 858.82s]  So the advantages are multiple concurrent communications, full duplex links they can send and receive at the same time,
[858.82s -> 866.82s]  and also there's a management benefit that if there are dead or faulty end hosts, they could be isolated by the switch.
[866.82s -> 876.82s]  You could just switch off the link and then isolate it from the network completely to prevent it from harming any other switches in the network.
[879.82s -> 886.82s]  So Ethernet switches have become the main way that Ethernet is put into deployment today.
[886.82s -> 888.82s]  It's just a picture of an Ethernet switch at Stanford.
[888.82s -> 898.82s]  This is the Ethernet switch over here, with all these cables coming out, going into patch panels here that go off to different offices in the building.
[898.82s -> 904.82s]  So the way that an Ethernet switch works, it does some very simple operations.
[904.82s -> 908.82s]  First is that it does forwarding and learning. We've seen this before.
[908.82s -> 916.82s]  It forwards packets based on its forwarding table, and then it learns the contents of that forwarding table based on addresses that it's seen.
[916.82s -> 925.82s]  So when a frame arrives, first of all it examines the header of each arriving frame to check for the destination address.
[925.82s -> 934.82s]  If the Ethernet destination address is in its forwarding table, it will forward the frame to the correct outgoing port, or if it's multicast, the set of ports.
[934.82s -> 944.82s]  If the Ethernet destination address is not in its table, it will broadcast the frame to all ports of the switch, except the one through which the frame arrived.
[945.82s -> 951.82s]  And then entries in the table are learned by examining the Ethernet source address of arriving packets.
[951.82s -> 958.82s]  So it'll take the source address, look it up in the table, if it finds that it's not there, it'll populate the table with that entry that says,
[958.82s -> 967.82s]  OK, if ever I see this as a destination address, I now know how I reach it by sending it back out of the port that this address is connected to.
[967.82s -> 973.82s]  So that way, next time the frame won't be broadcast, it'll just be sent on to its correct destination.
[973.82s -> 976.82s]  So that's the forwarding and learning function of an Ethernet switch.
[976.82s -> 981.82s]  And then there's also the topology maintenance. It runs the Spanning Tree Protocol,
[981.82s -> 988.82s]  where it exchanges those things called Bridge Protocol data units, the BPDUs that we saw in the Spanning Tree video.
[988.82s -> 995.82s]  And it runs the Spanning Tree Protocol to talk to the other switches to create a loop-free topology.
[995.82s -> 1006.82s]  So that allows it to decide which ports to enable or block to make sure that it creates a loop-free Spanning Tree amongst all of the switches in the network.
[1006.82s -> 1010.82s]  As a consequence, Ethernet switches are very, very widely deployed.
[1010.82s -> 1017.82s]  And here's an example of how that might look in, say, a university campus.
[1017.82s -> 1021.82s]  This is pretty much how our college network looks at Stanford.
[1021.82s -> 1026.82s]  Inside each building, so this might be a building or one floor of a building.
[1026.82s -> 1031.82s]  This could be the third floor of my building and the Gates building at Stanford.
[1031.82s -> 1036.82s]  This could be the second floor. There's another switch for that floor.
[1036.82s -> 1039.82s]  And then they connect into the building router.
[1039.82s -> 1049.82s]  They would often be connected to another router in another building for fault tolerance in case the building router was to fail.
[1049.82s -> 1057.82s]  And this router might be running OSPF for routing packets across our campus.
[1057.82s -> 1064.82s]  So these routers form the campus backbone that spread all across our college campus.
[1064.82s -> 1070.82s]  And then they would eventually connect to a BGP router that connects to the public Internet.
[1070.82s -> 1078.82s]  So this is speaking the BGP protocol to the outside world to exchange prefixes for paths to the outside world.
[1078.82s -> 1083.82s]  So Ethernet switches can connect many, many hosts, sometimes hundreds of hosts together.
[1083.82s -> 1092.82s]  There are switches available with hundreds of ports that then connect perhaps all of the end hosts in the building or in the floor of a building.
[1092.82s -> 1099.82s]  So in summary, medium access control protocols come in two main flavors, random access and deterministic.
[1099.82s -> 1103.82s]  Random access protocols proved very popular because they're nice and simple.
[1103.82s -> 1110.82s]  They give transmitting hosts a nice quick load delay access to the network when it's being lightly used.
[1110.82s -> 1114.82s]  And over the years, CSMA-CD became the most popular.
[1114.82s -> 1120.82s]  It's a simple access protocol that was used in the first 10 megabit per second version of Ethernet.
[1120.82s -> 1124.82s]  Over the years, Ethernet standards emerged for 100 megabits per second Ethernet.
[1124.82s -> 1127.82s]  That's called fast Ethernet. And then gigabit per second Ethernet.
[1127.82s -> 1130.82s]  And more recently, 10 gigabits per second.
[1130.82s -> 1139.82s]  Limits on the link size and the need for more capacity meant that CSMA-CD was gradually replaced by Ethernet switching,
[1139.82s -> 1146.82s]  in which end hosts typically connect over a full duplex link and so can both send and receive at the same time.
[1146.82s -> 1153.82s]  And Ethernet switches do pretty much full routing like a router does, but on the Ethernet addresses.
[1153.82s -> 1159.82s]  They learn the Ethernet addresses to populate their tables by learning the source address of packets that go by.
[1159.82s -> 1166.82s]  And that way they build up a nice simple forwarding table and then they use the Spanning Tree Protocol to build a loop-free topology,
[1166.82s -> 1169.82s]  connecting all the switches within the network.
[1169.82s -> 1178.82s]  So, as a consequence, Ethernet switches are ubiquitous today and used in pretty much every organization that has a wired network.
