# Detected language: en (p=1.00)

[0.00s -> 5.00s]  In this final video, as part of the ATT&CK series, we're going to talk about denial of service.
[5.00s -> 11.00s]  In February of 2000, Yahoo's router one day just started crashing.
[11.00s -> 16.00s]  And the engineers had had problems with the router previously, but this time it was worse.
[16.00s -> 21.00s]  They couldn't figure out what was going wrong, why every time they brought up the router it kept crashing.
[21.00s -> 29.00s]  And it took them many hours to figure out that they were being flooded with ICMP echo reply packets
[29.00s -> 33.00s]  at such a high rate that it was causing their router to crash.
[33.00s -> 40.00s]  And in the weeks and months that followed, there were many of these so-called distributed denial of service,
[40.00s -> 44.00s]  or DDoS attacks, against a bunch of high-profile sites.
[44.00s -> 52.00s]  So, basically, what a denial of service attack is, is something that prevents a service from being available.
[52.00s -> 59.00s]  And the easiest denial of service attack you can do is to overload either a server or network with too many packets
[59.00s -> 63.00s]  so that it can no longer function properly and serve legitimate clients.
[63.00s -> 70.00s]  And, of course, you want to, as an attacker, you want to maximize the cost of each packet to the server
[70.00s -> 75.00s]  in terms of network resources, CPU, and memory.
[75.00s -> 79.00s]  The reason distributed denial of service, or DDoS, is so effective
[79.00s -> 85.00s]  is that the attack comes from all over the place, so it's hard to just filter out one bad person.
[85.00s -> 92.00s]  Also, because it's coming from a number of hosts, each of those hosts has some number of resources,
[92.00s -> 98.00s]  so you've got a lot of traffic coming in if it's a widely distributed DDoS attack.
[98.00s -> 104.00s]  How do attackers do this? Well, they can penetrate many machines in a semi-automatic fashion with malware,
[104.00s -> 108.00s]  and then they turn the host into zombies that will basically attack on command,
[108.00s -> 113.00s]  and then at some point they later decide, hey, I want to attack this victim like yahoo.com,
[113.00s -> 119.00s]  you know, push a button, and boom, all these compromised machines will start flooding Yahoo with packets.
[119.00s -> 126.00s]  Now, in general, DDoS attacks are attacks that just target availability,
[126.00s -> 130.00s]  and you might wonder, well, why is that useful, right?
[130.00s -> 134.00s]  It's not like you're breaking into a bank and convincing it to send you money or something.
[134.00s -> 139.00s]  But it turns out that a lot of people perform these DDoS attacks for a number of reasons.
[139.00s -> 144.00s]  One is extortion, right? Attackers will go to some company,
[144.00s -> 149.00s]  maybe the company's doing something a little bit fringe, like an offshore gambling site or something,
[149.00s -> 153.00s]  and they'll say, hey, pay us a small amount of money or we're going to take down your site.
[153.00s -> 159.00s]  And at that point, the people who were in the site might think, well, we don't really want to go to the FBI with this.
[159.00s -> 160.00s]  Maybe we should just pay the money.
[160.00s -> 166.00s]  But of course, if they do that, probably then, you know, a month later, the price will double
[166.00s -> 169.00s]  because they've now proven that they're willing to give in to the extortion.
[169.00s -> 172.00s]  But nonetheless, people try to do this.
[172.00s -> 175.00s]  Another thing is that people use it for revenge.
[175.00s -> 183.00s]  So, for example, spammers mounted a denial of service attack that permanently shut down an anti-spam company called Blue Security once.
[183.00s -> 189.00s]  And, you know, finally, of course, people do it for bragging rights.
[189.00s -> 194.00s]  So denial of service can happen at many different layers of abstraction.
[194.00s -> 199.00s]  You can do it at the link layer, at the network layer, transport layer, or at the application layer.
[199.00s -> 203.00s]  So here's kind of a warm-up, some very simple denial of service attacks.
[203.00s -> 207.00s]  One is JAML wireless network at the physical layer, right?
[207.00s -> 213.00s]  So you could maybe even just buy some off-the-shelf cordless phone or build a very simple circuit
[213.00s -> 219.00s]  that would make a wireless network inoperable, essentially.
[219.00s -> 225.00s]  Another thing you could do is exploit properties or features of the link layer.
[225.00s -> 229.00s]  So, for example, in 802.11, there's this feature called the net allocation vector,
[229.00s -> 233.00s]  which is used to suggest when the network might be free.
[233.00s -> 240.00s]  And what you can do is you can use that repeatedly to reserve the network for the maximum number of seconds.
[240.00s -> 243.00s]  And then, essentially, at that point, no one will end up transmitting.
[243.00s -> 248.00s]  You'll effectively disable that wireless network.
[248.00s -> 252.00s]  As an example, a DOS TAC at the network layer, you can flood ping a victim.
[252.00s -> 257.00s]  So, for example, on most machines, you run ping-fvictm.com,
[257.00s -> 264.00s]  and it will flood the victim with ICMP echo request packets as fast as possible.
[264.00s -> 269.00s]  Of course, what makes a denial of service attack particularly devastating
[269.00s -> 278.00s]  is if you can somehow amplify the resources required to handle the packets of the server.
[278.00s -> 283.00s]  So what the attacker really wants is to, you know, expend a small number of resources,
[283.00s -> 286.00s]  you know, send some stream of packets,
[286.00s -> 292.00s]  but somehow that costs a lot more to process at the server than it does for the attacker to send.
[292.00s -> 296.00s]  Well, turns out that there are many ways to do exactly that.
[297.00s -> 310.00s]  For example, eDNS has some queries that result in responses that are like 40 times the size of a query.
[310.00s -> 315.00s]  And there also happen to be a large number of open DNS resolvers around the internet,
[315.00s -> 317.00s]  say, you know, half a million or so.
[317.00s -> 323.00s]  So one of the things you could do is flood the victim with DNS responses.
[323.00s -> 330.00s]  So what you do is you send a request to a DNS server that's forged to look like the request is coming from the victim.
[330.00s -> 337.00s]  And, you know, the request might be like some 60-byte eDNS request, but the reply will be 3,000 bytes.
[337.00s -> 345.00s]  And so you're getting kind of a 40 times amplification in bandwidth for these requests and responses.
[345.00s -> 351.00s]  And because you can send these requests to many, many different open DNS resolvers,
[351.00s -> 361.00s]  it's very easy to amplify this attack even from a small number of hosts that are originally sending these forged DNS requests.
[361.00s -> 368.00s]  Another nice thing from the attacker's point of view is that it's not clear who's actually mounting the attack.
[368.00s -> 373.00s]  By the time the request has made it to the server and the server has responded,
[373.00s -> 383.00s]  what you get is a packet from the DNS server to the victim, but the attacker's identity doesn't figure anywhere in the packet.
[383.00s -> 389.00s]  Its MAC address isn't there. Its IP address was never there since it was forging the IP address to begin with.
[389.00s -> 393.00s]  And it's not on the path between the DNS server and the target.
[393.00s -> 401.00s]  So, again, it's hard to filter out, to kick the bad guy off the network as a way to try to deal with this kind of attack when it's underway.
[401.00s -> 405.00s]  Yet another one of these attacks is known as a Smurf attack.
[405.00s -> 409.00s]  This is actually the attack that was being used against Yahoo.
[409.00s -> 419.00s]  And here, taking advantage of the fact that ICMP Echo, the ping protocol, supports pinging an IP broadcast address.
[419.00s -> 423.00s]  So this is actually useful if you want to know what machines are on your network.
[423.00s -> 428.00s]  You ping the broadcast address and you get an echo reply from every machine that's connected to the network.
[428.00s -> 434.00s]  Unfortunately, this provides a big amplification opportunity for a flooding attack.
[434.00s -> 439.00s]  Imagine that you compromise one machine on a network with, say, 200 machines,
[439.00s -> 446.00s]  and then you stick a bunch of broadcast ping packets that purport to be from the victim's IP address,
[446.00s -> 451.00s]  then all 200 machines on that network are going to reply to that IP address.
[451.00s -> 455.00s]  And so, again, that's what was used to take down Yahoo.
[455.00s -> 460.00s]  The same thing was used against buy.com and Amazon back in 2000.
[460.00s -> 465.00s]  Now, moving up the protocol stack, you can also attack at the transport layer.
[465.00s -> 469.00s]  So you remember TCP has this initial handshake, right?
[469.00s -> 474.00s]  The client sends a server SYN packet, then the server sends a SYN ACK packet back to the client,
[475.00s -> 481.00s]  and finally the client sends the server of the third ACK packet.
[481.00s -> 483.00s]  So how is this implemented at the server?
[483.00s -> 488.00s]  Well, when the server receives a SYN packet, it allocates some data structure,
[488.00s -> 492.00s]  sticks it in a hash table, and sends back the SYN ACK packet,
[492.00s -> 499.00s]  and then it waits for this third ACK packet here for some amount of time, like a minute,
[499.00s -> 503.00s]  and then after a minute, it basically garbage collects it and says,
[503.00s -> 506.00s]  okay, I guess this connection is not happening.
[506.00s -> 510.00s]  So every time a packet comes in, every time an ACK packet comes in,
[510.00s -> 514.00s]  it needs to be compared to all the existing connections
[514.00s -> 518.00s]  to see if this is an ACK for a partially open connection.
[518.00s -> 524.00s]  And unfortunately, the operating system can't handle an arbitrary number of partial connections.
[524.00s -> 530.00s]  I mean, especially at the time these attacks started getting popularized,
[530.00s -> 538.00s]  I mean, there would only be a small number of partially open connections
[538.00s -> 542.00s]  that the OS would be willing to cache, and then it would just drop the SYN packets,
[542.00s -> 545.00s]  or it would drop future SYN packets.
[545.00s -> 552.00s]  So basically the SYN bomb attack consists of sending a stream of SYN packets all from bogus addresses.
[552.00s -> 558.00s]  The SYN ACKs go off into wherever, and at that point, the server's tables fill up,
[558.00s -> 563.00s]  it stops accepting connections, and legitimate clients can't actually connect.
[563.00s -> 568.00s]  And the thing that was so devastating about the stack is just a few hundred packets per second
[568.00s -> 570.00s]  could completely disable most servers.
[570.00s -> 576.00s]  So you really didn't need a lot of horsepower to mount this attack against a server you didn't like.
[576.00s -> 579.00s]  So an example of SYN bombs in the wild,
[579.00s -> 586.00s]  there was a worm called the MS Blaster worm that basically flooded port 80 of windowsupdate.com with SYN packets.
[586.00s -> 590.00s]  And it sent about 50 SYN packets per second.
[590.00s -> 597.00s]  They're each only 40 bytes each, so really not a lot of bandwidth being consumed.
[597.00s -> 600.00s]  It randomized the last two bytes of the source IP address,
[600.00s -> 605.00s]  making it hard to track down the exact machines that were actually infected.
[605.00s -> 613.00s]  And what made this particularly devastating is that clients couldn't connect to Windows Update to actually solve the problem.
[613.00s -> 622.00s]  So eventually what Microsoft had to do was change the update URL to be windowsupdate.microsoft.com instead of windowsupdate.com.
[622.00s -> 626.00s]  That still wasn't good enough because there were still old machines that were infected with the Blaster worm
[626.00s -> 631.00s]  and were actually trying to connect to windowsupdate.com, which at that point they'd given up on.
[631.00s -> 641.00s]  So what they eventually had to do was actually use a content distribution network Akamai that had really high capacity to serve windowsupdate.com
[641.00s -> 645.00s]  so those machines could get updated and take care of the infection.
[645.00s -> 647.00s]  Okay, other attacks that can happen.
[647.00s -> 649.00s]  IP fragment flooding.
[649.00s -> 655.00s]  Well, it's kind of similar to a SYN bomb attack where when you receive an IP fragment,
[655.00s -> 663.00s]  you have to allocate some space and keep that around until the remaining fragments that are part of that IP packet come in.
[663.00s -> 672.00s]  And so you could basically forge a host, send a stream of bogus fragments to a server
[672.00s -> 679.00s]  and never bother to send the remaining fragments so the server will never be able to reconstruct these packets.
[679.00s -> 682.00s]  It'll just have to time out the fragments eventually.
[682.00s -> 689.00s]  Another attack is that there's a UDP service known as the echo service, which is on port 7.
[689.00s -> 699.00s]  And if you send a packet to port 7 on a server that's running the echo service, which a lot of hosts used to by default, it will simply reply.
[699.00s -> 702.00s]  So, I mean, this is kind of a really dumb attack.
[702.00s -> 706.00s]  You could just forge a packet from port 7 on one machine to port 7 on another machine
[706.00s -> 712.00s]  and the two machines will start sending traffic back and forth until a packet is dropped.
[712.00s -> 722.00s]  And so obviously there's a pretty easy fix, which is that a SYN echo server should actually drop the packet on the floor if the source port is port 7.
[722.00s -> 726.00s]  The source port should be something higher, like over 1024 anyway.
[726.00s -> 731.00s]  Finally, there's of course application level denial of service.
[731.00s -> 740.00s]  So, examples of this are anything where just something you can do on the client can be much more expensive to the server than it is to the client.
[740.00s -> 745.00s]  So, for example, DNS supports both TCP and UDP.
[745.00s -> 751.00s]  And the way the TCP protocol works is that you connect to the server and then you send requests.
[751.00s -> 759.00s]  But because TCP is a stream protocol, not a datagram protocol, you need to see where the boundaries are between requests and responses.
[759.00s -> 765.00s]  And so the protocol works that you just send a 16-bit length followed by that many bytes.
[765.00s -> 769.00s]  And it turned out that a lot of DNS implementations blocked while reading the message.
[769.00s -> 775.00s]  So, if you sent a large length but then didn't actually send that many bytes afterwards,
[775.00s -> 781.00s]  you could end up causing a DNS server to hang and just completely take it out, right?
[781.00s -> 786.00s]  So, very little effort on the client's part. Server becomes completely inoperable.
[786.00s -> 792.00s]  Another example is SSL, which requires a fairly expensive public key decryption to happen at the server.
[792.00s -> 798.00s]  And again, you can burn a lot of CPU time at the server by sending bogus connection requests,
[798.00s -> 802.00s]  a lot more CPU time than is required at the client to mount the attack.
