# Detected language: en (p=1.00)

[0.00s -> 9.32s]  I'd like to switch gears a little bit, and actually let's take a look at layering,
[9.32s -> 13.00s]  and how its implications to security.
[13.00s -> 16.12s]  You've seen layering many times, it's a general and important principle in the
[16.12s -> 17.84s]  design of computer networks.
[17.84s -> 21.20s]  You've seen its benefits—separation of concerns, independent evolution, ease
[21.20s -> 28.92s]  of adaptability to future technologies—but it sometimes does get in the way.
[28.96s -> 33.24s]  TLS is used today for secure web transactions over HTTPS.
[33.24s -> 38.44s]  But it's often the case that a web server actually runs multiple websites through something
[38.44s -> 40.00s]  called virtual hosts.
[40.00s -> 44.40s]  The domain names of all the websites map to the same IP address of the server.
[44.40s -> 46.88s]  Clients connect to all of them or report 80.
[46.88s -> 51.96s]  It's not until the HTTP request comes in that the web server process knows which site
[51.96s -> 53.92s]  the request is for.
[53.92s -> 57.00s]  The host header field of the HTTP request tells it.
[57.00s -> 62.60s]  For example, if you go to sing.stanford.edu and tinyOS.stanford.edu, they're the same
[62.60s -> 63.76s]  server.
[63.76s -> 66.64s]  I can configure Apache so they look up different web pages.
[66.64s -> 71.04s]  Apache would look inside the request, see the host header, and choose which web pages
[71.04s -> 75.04s]  to serve based on that.
[75.04s -> 78.68s]  This can break TLS such that it can't fully work properly.
[78.68s -> 80.18s]  Why?
[80.18s -> 83.08s]  Is it because it breaks server authentication?
[83.08s -> 85.32s]  Does it break the key exchange?
[85.32s -> 87.72s]  Does it break randomness generation?
[87.72s -> 90.28s]  Does it break routing the handshake messages?
[90.28s -> 100.00s]  Or does it break pre-master secret generation?
[100.00s -> 103.36s]  The answer is that it breaks server authentication.
[103.36s -> 109.72s]  The TLS handshake and secure session setup occur before there is any application data.
[109.72s -> 114.32s]  As a part of this exchange, the server needs to provide a certificate that binds a public
[114.32s -> 119.38s]  key to a name, but it doesn't know what name to use.
[119.38s -> 124.00s]  For example, my server can't tell whether a connection is coming in for tinyOS.stanford.edu
[124.00s -> 129.48s]  or sing.stanford.edu, so it doesn't know whether to provide a certificate for tinyOS
[129.48s -> 130.48s]  or sing.
[130.48s -> 135.16s]  In my case, I have a certificate that says both, but if I wanted to add a new host
[135.16s -> 145.16s]  name to the server, say a website named www.networkingclass.com, then TLS would throw an error.
[145.16s -> 149.08s]  The problem here is that the session layer, layer 5, needs to know the host name that
[149.08s -> 154.64s]  the client is trying to contact, but that name is only available in the application
[154.64s -> 156.60s]  layer, layer 7.
[156.60s -> 160.00s]  The client has translated the name to an IP address, so a layer 3 name.
[160.44s -> 164.84s]  Here's an example of layers, how layer, the encapsulation of functionality, can cause
[164.84s -> 166.72s]  a conflict and actually get in our way.
