# Detected language: en (p=1.00)

[0.00s -> 5.84s]  In this video I'm going to show you a demo of SSH man-in-the-middle attack.
[5.84s -> 12.08s]  Sean who's sitting here with me created this demo in MiniNet. In the demo we're
[12.08s -> 16.26s]  going to demonstrate how a malicious attacker can eavesdrop on the traffic
[16.26s -> 21.16s]  between an SSH client and an SSH server and there's going to use a
[21.16s -> 25.82s]  method that we call up spoofing which allows the attacker to become
[25.82s -> 32.02s]  the so-called man-in-the-middle between two communicating parties. In the demo
[32.02s -> 37.34s]  Eve the attacker is going to broadcast falsified art messages over the local
[37.34s -> 42.22s]  area network causing Alice to think that she should use Eve's MAC address
[42.22s -> 48.32s]  to reach Bob. Similarly and at the same time these falsified art messages
[48.32s -> 52.98s]  cause Bob to think that he should also use Eve's MAC address to reach
[52.98s -> 61.18s]  Alice. And so when Alice requests an SSH connection to Bob the switch will
[61.18s -> 67.10s]  instead route the connection request to Eve instead of Bob. Eve is going to make
[67.10s -> 70.22s]  herself the man-in-the-middle or more precisely the woman in the middle
[70.22s -> 75.94s]  by simply forwarding the packets unchanged to Bob while eavesdropping and
[75.94s -> 81.18s]  storing SSH data in the middle. This technique is called a man-in-the-middle
[81.38s -> 88.38s]  attack as described in the class video. Okay let's see how this works in more
[88.38s -> 91.92s]  detail. Just like in the other demos we're going to demonstrate the example
[91.92s -> 96.22s]  on the MiniNet emulation system. This means you can easily and safely run it
[96.22s -> 100.82s]  yourself on your own computer. I'll tell you shortly how you do that. Okay
[100.82s -> 105.62s]  first let's verify that under normal conditions Eve cannot eavesdrop on
[105.62s -> 112.58s]  Alice. Alice is sending pings to Bob while Eve is running TCP dump on her
[112.58s -> 118.18s]  machine trying to listen in on traffic from Alice's IP address. Alice's IP
[118.18s -> 125.26s]  address is 192.168.0.3. As you can see TCP dump running on
[125.26s -> 129.74s]  Eve's machine doesn't capture any traffic at all. Eve can't see any of
[129.74s -> 135.00s]  the traffic that is going between Alice and Bob whereas TCP dump running on
[135.00s -> 139.12s]  Bob's machine correctly sees the packets from Alice. As we would expect
[139.12s -> 146.68s]  everything is working as it should. Next Eve is going to run her attack by
[146.68s -> 151.96s]  sending falsified ARP data which causes the switch to learn that both
[151.96s -> 158.28s]  Alice and Bob have Eve's MAC address. This causes all traffic meant for
[158.28s -> 164.12s]  Alice and Bob to go to Eve instead. Ettercap is a nice tool that lets us
[164.12s -> 168.64s]  easily perform this attack. It also helps us decrypt SSH data by
[168.64s -> 173.80s]  forcing clients and servers to use SSH version 1 which is an older and less
[173.80s -> 179.88s]  secure version of SSH. Ettercap also saves the decoded SSH data locally for
[179.88s -> 187.80s]  us so we can inspect it. So we now turn on ARP spoofing and start sniffing
[187.96s -> 195.08s]  the network using Ettercap. After starting the ARP spoofing Eve's TCP
[195.08s -> 200.32s]  dump can now successfully see the packets that are sent by Alice to Bob.
[200.32s -> 208.36s]  Next let's create an SSH connection from Alice to Bob. We can already see
[208.36s -> 212.42s]  that Ettercap has captured the connection and decoded the username and
[212.42s -> 217.78s]  password that Alice has provided for authentication. Also we can view all the
[217.78s -> 223.66s]  decoded SSH activity between Alice and Bob in a log file on Eve's machine.
[223.66s -> 228.30s]  And so we've successfully eavesdropped an SSH connection using a so-called
[228.30s -> 235.58s]  man-in-the-middle attack. If you would like you can reproduce this demo by
[235.58s -> 241.14s]  following the detailed instructions at the following github location.
