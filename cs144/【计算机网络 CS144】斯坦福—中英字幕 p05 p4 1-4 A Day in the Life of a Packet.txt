# Detected language: en (p=1.00)

[0.00s -> 5.84s]  The four-layer model of the Internet takes a stream of data from the application layer.
[5.84s -> 11.20s]  The transport layer breaks the stream into segments of data that it reliably delivers
[11.20s -> 15.24s]  to an application running on another computer.
[15.24s -> 20.24s]  The transport layer sends these segments as network layer packets, which the network
[20.24s -> 23.00s]  layer delivers to the other computer.
[23.00s -> 26.36s]  Let's see what this looks like in practice, the actual packets that a web browser and
[26.36s -> 29.24s]  server send and receive.
[29.24s -> 33.84s]  First, let's look at the transport layer.
[33.84s -> 39.28s]  Almost all web traffic is over TCP, the Transport Control Protocol.
[39.28s -> 43.76s]  In its typical operation, there's a client and a server.
[43.76s -> 47.56s]  A server listens for connection requests.
[47.56s -> 53.16s]  To open a connection, a client issues a connection request which the server responds to.
[53.16s -> 57.20s]  I won't go into the details of exactly how this works, but it turns out this exchange
[57.20s -> 63.36s]  takes three messages, something called the three-way handshake.
[63.36s -> 68.44s]  The first step of the message is when the client sends a SYNCHRON-ized message to the
[68.44s -> 71.40s]  server, often called a SYN.
[71.40s -> 76.56s]  The second step is when the server responds with a SYNCHRON-ized message that also acknowledges
[76.56s -> 84.20s]  the client's SYNCHRON-ize or a SYNCHRON-ize and acknowledge message, often called a SYN-ack.
[84.20s -> 90.88s]  The third and final step is when the client responds by acknowledging the server's SYNCHRON-ize,
[90.88s -> 93.24s]  often called an ACK.
[93.24s -> 97.60s]  So often the three-way handshake is described as SYNCHRON-ize, SYNCHRON-ize and acknowledge,
[97.60s -> 102.84s]  acknowledge, or SYN, SYN-ack, ACK.
[102.84s -> 107.96s]  Recall that the network layer is responsible for delivering packets to computers, the transport
[107.96s -> 112.28s]  layer is responsible for delivering data to applications.
[112.28s -> 116.36s]  From the perspective of the network layer, packets sent to different applications on
[116.36s -> 119.50s]  the same computer look the same.
[119.50s -> 124.96s]  This means that to open a TCP stream to another program, we need two addresses.
[124.96s -> 130.92s]  The first, an internet protocol address, is the address the network layer uses to deliver
[130.92s -> 133.72s]  packets to the computer.
[133.72s -> 140.08s]  The second, the TCP port, tells the computer software which application to deliver data
[140.08s -> 142.36s]  to.
[142.36s -> 146.60s]  Web servers usually run on TCP port 80.
[146.60s -> 150.68s]  So when we open a connection to a web server, we send IP packets to the computer running
[150.68s -> 155.92s]  the web server whose destination address is that computer's IP address.
[155.92s -> 163.74s]  Those IP packets have TCP segments whose destination port is 80.
[163.74s -> 166.88s]  But how do those IP packets get to their destination?
[166.88s -> 170.40s]  We don't have a direct wire connecting my client to the server.
[170.40s -> 174.96s]  Instead, my client is connected to an intermediate computer, a router.
[174.96s -> 178.12s]  This router is itself connected to other routers.
[178.12s -> 185.12s]  IP packets between the client and the server take many hops, where a hop is a link connecting
[185.12s -> 187.52s]  two routers.
[187.52s -> 193.04s]  Since my client is on a Wi-Fi network, the first hop is wireless to the Wi-Fi access
[193.04s -> 194.48s]  point.
[194.48s -> 199.38s]  The access point has a wired connection to the broader internet, so it forwards my client's
[199.38s -> 203.76s]  packets along this wired hop.
[203.76s -> 207.00s]  A router can have many links connecting it.
[207.00s -> 212.96s]  As each packet arrives, a router decides which of its links to send it out on.
[212.96s -> 217.02s]  Routers have IP addresses, so it's also the case that it might not forward a packet
[217.02s -> 220.04s]  but rather deliver it to its own software.
[220.04s -> 224.64s]  For example, when you log into a router using TCP, the IP packets are destined to
[224.64s -> 229.28s]  the router's own IP address.
[229.28s -> 231.84s]  How does a router make this decision?
[231.84s -> 236.60s]  It does so through something called a forwarding table, shown here on the right.
[236.60s -> 241.24s]  A forwarding table consists of a set of IP address patterns and the link to send it
[241.24s -> 244.76s]  across for each pattern.
[244.76s -> 249.20s]  When a packet arrives, the router checks which forwarding table entry's pattern best
[249.20s -> 251.40s]  matches the packet.
[251.40s -> 254.48s]  It forwards the packet along that entry's link.
[254.48s -> 258.76s]  Generally, best means the most specific match.
[258.76s -> 262.84s]  I'll describe how matching works in more detail in the video on longest prefix match.
[262.84s -> 266.68s]  But in this simple example, let's just consider the default route, the first entry in
[266.68s -> 268.36s]  the table above.
[268.36s -> 270.72s]  The default route is the least specific route.
[270.72s -> 273.32s]  It matches every IP address.
[273.32s -> 277.92s]  If, when a packet arrives, there isn't a more specific route than the default route,
[277.92s -> 282.76s]  the router will just use the default one.
[282.76s -> 285.84s]  The default route is especially useful in edge networks.
[285.84s -> 289.96s]  Say, for example, you're Stanford University and have a router connecting you to the
[289.96s -> 291.86s]  larger internet.
[291.86s -> 296.76s]  Your router will have many specific routes for the IP addresses of Stanford's networks.
[296.76s -> 299.44s]  Send packets to the engineering school over this link.
[299.44s -> 302.44s]  Send packets to the library over that link.
[302.44s -> 305.88s]  But if the destination IP address is in Stanford's, then the router should send
[305.88s -> 310.72s]  it out to the larger internet.
[310.72s -> 314.68s]  So now, let's look at some IP packets in a real network.
[314.68s -> 320.84s]  I'm going to request a web page from www.brown.edu and use a tool called Wireshark to show
[320.84s -> 323.04s]  you all of the packets.
[323.04s -> 326.92s]  We'll see how my web browser opens a TCP connection to the Brown web server using a
[326.92s -> 333.32s]  three-way handshake of SYN, SYNAC, ACK, then starts issuing HTTP GET requests which the
[333.32s -> 337.08s]  server responds to with data.
[337.08s -> 340.68s]  Once we've seen the exchange of packets between my client and the Brown University
[340.68s -> 345.54s]  web server, I'll use another tool called traceroute to observe the path that these
[345.54s -> 350.60s]  packets take through the internet.
[350.60s -> 353.68s]  So first, I'll start up Wireshark.
[353.68s -> 357.12s]  Because my computer is using many network applications and sending lots of different
[357.12s -> 362.38s]  packets, I'm going to tell Wireshark to only display packets that are TCP segments
[362.38s -> 365.48s]  to the Brown server using port 80.
[365.48s -> 369.32s]  This way, we'll only see the web traffic I'm generating.
[369.32s -> 374.60s]  I'm also going to tell Wireshark to listen on EN1, which is the name my Mac gives to
[374.60s -> 376.40s]  my Wi-Fi link layer.
[376.40s -> 380.72s]  As you can see, I have many link layers available, but let's just look at EN1 since
[380.72s -> 384.28s]  that's on how I'm connected to the internet.
[384.28s -> 390.44s]  Next, I'll open my web browser and request the web page for Brown University's
[390.44s -> 392.12s]  computer science department.
[392.12s -> 398.00s]  This is where I went as an undergraduate and so I like to keep up with news in the department.
[398.00s -> 402.08s]  You can see in Wireshark that loading this page involves sending and receiving a lot
[402.08s -> 404.00s]  of packets.
[404.00s -> 409.76s]  Wireshark shows me the timestamp of each packet, the source IP address, the destination
[409.76s -> 417.48s]  IP address, what protocol it uses, its length, and further information.
[417.48s -> 419.40s]  Let's look at this first packet.
[419.40s -> 426.68s]  It's from my computer, whose address is 192.168.0.106, to the Brown CS web server,
[426.68s -> 431.92s]  whose address is 128.148.32.12.
[431.92s -> 433.88s]  It's going to TCP port 80.
[433.88s -> 438.80s]  The hypertext transfer protocol port on the server, which we can see from the HTTP field
[438.80s -> 441.44s]  in the info column.
[441.44s -> 447.64s]  The packet is the SYN packet, the first step of the 3-way handshake.
[447.64s -> 449.54s]  Look at these first three packets.
[449.54s -> 453.80s]  The first is a SYN from my computer to the web server.
[453.80s -> 459.62s]  The second is a SYN ACK packet from the web server back to my computer.
[459.62s -> 463.76s]  The third is an ACK from my computer back to the web server.
[463.88s -> 465.96s]  This is the 3-way handshake.
[465.96s -> 468.64s]  Now the two computers can exchange data.
[468.64s -> 472.78s]  And you can see that the first data packet is an HTTP request.
[472.78s -> 476.76s]  My computer sends a GET request to the web server.
[476.76s -> 480.88s]  The response to this GET request is three packets.
[480.88s -> 485.00s]  Wireshark shows the response when it receives the third one, shown on the line whose info
[485.00s -> 489.56s]  is HTTP slash 1.1 200 OK.
[489.56s -> 494.76s]  So here we can see how my requesting a web page from Brown's computer science server
[494.76s -> 500.40s]  creates a TCP connection to the 3-way, 3-way packets for the 3-way handshake, then more
[500.40s -> 507.86s]  packets for the HTTP request and response.
[507.86s -> 513.00s]  This is how the network looks to the end hosts, the computers, as they exchange packets
[513.00s -> 515.00s]  of the network layer.
[515.00s -> 517.94s]  How does it look like inside the network layer?
[517.94s -> 520.26s]  What hops these packets take?
[520.26s -> 524.80s]  To see this, I'm going to use the second tool, traceroute.
[524.80s -> 529.62s]  Traceroute shows you the hops that packets take to a destination.
[529.62s -> 536.50s]  So we can type traceroute www.cs.brown.edu to see the path through the internet.
[536.50s -> 544.54s]  I'll add the dash w flag, which specifies a timeout with a timeout of one second.
[544.54s -> 553.30s]  The first hop the packets take is to my wireless router, whose IP address is 192.168.0.1.
[553.30s -> 555.42s]  As you can see from the next hop, I'm at home.
[555.42s -> 559.90s]  I have a cable modem and my internet provider is astound.
[559.90s -> 569.36s]  After this, packets take another hop to an IP router with IP address 74.14.0.3.
[569.36s -> 573.82s]  The hop after that is a router in San Francisco, California.
[573.82s -> 583.02s]  And several routers in San Jose, SJC for above.net, and San Jose 1 for level 3.net.
[583.02s -> 588.70s]  After San Jose 1.level3.net, the packets are across the United States and New York.
[588.70s -> 596.50s]  They go through a series of routers in New York, EBR, CSW, EBR, then on hop 13 to Boston.
[596.50s -> 599.66s]  Boston is very close to Providence, where Brown is.
[599.66s -> 602.58s]  After oceana.org, we see three stars.
[602.58s -> 606.26s]  This means there's a router that won't tell traceroute about itself.
[606.26s -> 612.54s]  The stars are traceroute's way to show it waited for reply but the reply timed out.
[612.54s -> 616.30s]  On hop 20, we see a router in Brown's CS department.
[616.30s -> 618.16s]  After that, everything is hidden.
[618.16s -> 621.22s]  Brown's CS department doesn't want you to be able to see what the rest inside of its
[621.22s -> 626.46s]  network looks like.
[626.46s -> 631.24s]  Because we couldn't see the path end with Brown's web server, let's try another one.
[631.24s -> 637.36s]  The computer science and artificial intelligence lab, CSAIL at MIT.
[637.36s -> 642.48s]  We can see that packets take the same path to Boston until hop 15.
[642.48s -> 649.40s]  The path to Brown goes to Oceana at hop 15, while the path to MIT continues in level
[649.40s -> 651.06s]  3's network.
[651.06s -> 659.52s]  On the path to www.csail.mit.edu, only two routers are hidden, the 13th and 19th hops.
[659.52s -> 669.20s]  We can see that www.csail.mit.edu is also named akron.csail.mit.edu and, after 22 hops,
[669.20s -> 673.84s]  packets from my computer reach MIT's web server.
[673.84s -> 675.56s]  Look at the time values.
[675.56s -> 679.84s]  The time from my packet to reach the MIT web server and its response to return to
[679.84s -> 684.80s]  me, there and back, the round trip time, is under 90 milliseconds or less than an
[684.80s -> 689.80s]  eye blink.
[689.80s -> 695.36s]  We've now seen the life of a packet, starting as an application-level client web request
[695.36s -> 699.28s]  and taking nearly 20 hops of the internet to reach its destination.
[699.28s -> 702.52s]  For me, this is one of the best things about teaching this course.
[702.52s -> 706.32s]  Everything we present is something that you and I interact with every day, even just
[706.32s -> 708.44s]  in the space of watching one video.
[708.44s -> 713.40s]  It's easy to see the principles and ideas in practice, and with just a few simple tools,
[713.40s -> 716.64s]  you can inspect the internet in operation in real time.
