# Detected language: en (p=1.00)

[0.00s -> 3.86s]  So in this video, I'm going to talk about request to send, clear to send, a wireless
[3.86s -> 5.76s]  media access control algorithm.
[5.76s -> 11.08s]  So request to send, clear to send, or RTS CTS, uses a short sequence of control packets
[11.08s -> 14.44s]  to determine whether or not it's safe to transmit data.
[14.44s -> 20.88s]  So here I'm showing three nodes, A, B, and C, where A can hear B, and B can hear
[20.88s -> 24.46s]  C, etc., but A and C cannot hear each other.
[24.46s -> 29.64s]  And so in an RTS CTS exchange, rather than just immediately send a data packet to B like
[29.64s -> 33.32s]  you do in, say, CSMA CA, A can just transmit.
[33.32s -> 42.00s]  Instead, the first step is that A sends what's called a request to send packet, or RTS.
[42.00s -> 47.32s]  There's a short control packet, and it asks B, can I send you a packet of this
[47.32s -> 50.20s]  duration, say.
[50.20s -> 54.80s]  If B successfully receives the RTS, and it believes that it's possible for it to
[54.80s -> 58.56s]  receive, for example, it doesn't think anyone else can be transmitting nearby, then
[58.60s -> 61.60s]  it can respond with a clear to send, a CTS.
[61.60s -> 66.60s]  And it can tell A, you are clear to send for this period of time.
[66.60s -> 71.60s]  And the key thing here is that C can overhear this clear to send packet and
[71.60s -> 74.60s]  know that B is going to be receiving data.
[74.60s -> 77.60s]  Because B knows that B is going to be receiving data, it knows it shouldn't
[77.60s -> 78.60s]  transmit during that time.
[78.60s -> 83.60s]  And so this clear to send can prevent C from transmitting and therefore prevent,
[83.60s -> 87.60s]  in theory, the hidden terminal problem that we see in CSMA CA networks.
[87.64s -> 97.64s]  So next, A sends the data, followed by B sending an acknowledgement back.
[97.64s -> 100.64s]  This is the basic RTS-CTS exchange.
[100.64s -> 104.64s]  An RTS followed by CTS followed by a data followed by an ACK.
[104.64s -> 107.64s]  Now, of course, if A sends an RTS to B and doesn't hear a clear to send, they
[107.64s -> 108.64s]  can always retry later.
[108.64s -> 111.64s]  There's, there's standard back-off approaches that you see, for example,
[111.64s -> 115.64s]  exponential back-off that you see in data transmissions in CSMA CA.
[115.68s -> 119.68s]  And so the point here is, it's not that RTS-CTS has a lower probability of, say,
[119.68s -> 121.68s]  the hidden terminal problem.
[121.68s -> 125.68s]  But rather, what it's doing is it's pushing that problem to the control
[125.68s -> 126.68s]  packet exchange.
[126.68s -> 131.68s]  For example, it could very well be that A and C try to simultaneously
[131.68s -> 136.68s]  transmit an RTS, and that causes a collision.
[136.68s -> 139.68s]  But this won't appear as a data packet loss from A to B.
[139.68s -> 142.68s]  Instead, it'll cause just additional RTS packets.
[142.72s -> 156.72s]  So RTS-CTS is pushing losses and collisions to the control packet exchange.
[160.72s -> 163.72s]  So let's go back to the problems of CSMA CA.
[163.72s -> 167.72s]  Hidden terminals, exposed terminals, and collision or low SNR.
[167.72s -> 170.72s]  So you can ask one by one whether or not RTS-CTS helps or solves these
[170.72s -> 171.72s]  problems.
[171.76s -> 173.76s]  So first, hidden terminals.
[173.76s -> 176.76s]  So RTS-CTS can't solve this problem.
[176.76s -> 181.76s]  It's always possible, for example, that RTSs aren't heard, CTSs aren't heard,
[181.76s -> 189.76s]  that, for example, we have B sending a CTS to A, but some other node is
[189.76s -> 195.76s]  transmitting, and so C ends up not hearing it.
[195.76s -> 198.76s]  So it's possible that hidden terminals will occur.
[198.80s -> 201.80s]  But RTS-CTS greatly reduces them by having this clear to send packet and
[201.80s -> 203.80s]  clearing the channel around the receiver.
[203.80s -> 208.80s]  So, for the most part, it doesn't solve it, but it greatly helps.
[208.80s -> 210.80s]  So how about exposed terminals?
[210.80s -> 220.80s]  So recall, exposed terminals are when we have a node here, let's say C.
[222.80s -> 227.80s]  So B wants to transmit to A, C wants to transmit to D, and C won't transmit
[227.84s -> 229.84s]  because it hears B transmitting.
[229.84s -> 234.84s]  So in theory, it's very well possible that C could transmit to D.
[234.84s -> 237.84s]  So B is going to send an RTS, then there will be a CTS.
[237.84s -> 240.84s]  C doesn't hear the, the RTS, that doesn't hear the CTS, so it knows it
[240.84s -> 241.84s]  can transmit.
[241.84s -> 243.84s]  But in practice, this doesn't really work.
[243.84s -> 247.84s]  The reason being that C doesn't want to transmit to D, because A is going to
[247.84s -> 249.84s]  send an acknowledgement.
[251.84s -> 256.84s]  And so, generally, RTS-CTS won't really help you with exposed terminals.
[257.84s -> 259.84s]  So how about collision or low SNR?
[259.84s -> 264.84s]  Well, given that RTS-CTS can reduce collisions, hidden terminals, it can help
[264.84s -> 269.84s]  with collision or low SNR, in the sense of when data losses do occur, it's more
[269.84s -> 273.84s]  likely that they're low SNR, that there's a probability that their
[273.84s -> 274.84s]  collision is lower.
[274.84s -> 276.84s]  It can't solve the problem, but it can help.
[281.84s -> 285.84s]  So given that RTS-CTS can help, and it can prevent, you know, really help with
[285.88s -> 288.88s]  the hidden terminal problem, which is pretty common, especially in, you know,
[288.88s -> 290.88s]  heavily used networks, why don't we use it?
[290.88s -> 293.88s]  Why is it that most Wi-Fi systems today use CSMA-CA?
[293.88s -> 295.88s]  So the reason is overhead.
[295.88s -> 298.88s]  So recall, we have this packet exchange.
[298.88s -> 301.88s]  We have an RTS, then we have a CTS.
[302.88s -> 305.88s]  So the question is, how long do these packets take?
[305.88s -> 307.88s]  Well, there are little control packets.
[307.88s -> 311.88s]  But still, just the way Wi-Fi, for example, works is that these control
[311.88s -> 314.88s]  packets actually have to take a significant amount of time.
[314.92s -> 318.92s]  The reason being that unlike a data packet, which you can send at a really high
[318.92s -> 322.92s]  speed, just to the destination, knowing that it's going to have a high signal to
[322.92s -> 325.92s]  noise ratio, so you can use dense constellation, you can send it really,
[325.92s -> 328.92s]  really fast, these control packets need to be heard by everyone.
[328.92s -> 330.92s]  So they always have to be sent at a very low speed.
[330.92s -> 333.92s]  So, you know, wireless physical layers have many different speeds, and you
[333.92s -> 336.92s]  always have to send these control packets at the lowest speed.
[336.92s -> 340.92s]  And so, if you look, let's say, this is just, this is some data a student
[340.92s -> 345.92s]  of mine collected just using 802.11b, so it has four speeds, one, two, 5.5, and 11
[345.92s -> 349.92s]  megabits per second. And this was the observed throughput in
[349.92s -> 355.92s]  megabits per second. Of data, so this throughput observed
[355.92s -> 359.92s]  up at the network layer. So you're exchanging these frames.
[359.92s -> 363.92s]  And so you see, if you're exchanging data frame, data frames at one megabit per
[363.92s -> 366.92s]  second, this small control exchange is not a big deal.
[366.92s -> 369.92s]  It's just 4%. Because these control packets, the
[369.92s -> 372.92s]  actual data packets themselves are being sent to one megabit, so these control
[372.92s -> 375.92s]  packets are small. But as the data rate goes up, if the
[375.92s -> 379.92s]  data packets get shorter and shorter in time, because they're faster and faster,
[379.92s -> 382.92s]  the overhead goes up. These small control packets become a
[382.92s -> 384.92s]  larger and larger fraction of the air time.
[384.92s -> 387.92s]  The point at which, if you're transmitting at 11 megabits per second,
[387.92s -> 392.92s]  you can get about 5.89 megabits per second out of CSMA, about 4.42 out of
[392.92s -> 394.92s]  RTS CTS. This is a 25% overhead.
[394.92s -> 398.92s]  So you're reducing the throughput of your network by a quarter using RTS CTS.
[398.92s -> 402.92s]  And so if you don't have collisions, if you're not having hidden terminals, the
[402.92s -> 404.92s]  network is idle, you're taking a big hit.
[404.92s -> 408.92s]  So one approach people have talked about is that if you see very few losses,
[408.92s -> 411.92s]  things are working great, use CSMA. But then if you start seeing
[411.92s -> 414.92s]  collisions, you start seeing losses, then switch over to RTS CTS to get
[414.92s -> 417.92s]  better arbitration. So there's been some research on this.
[417.92s -> 420.92s]  But generally speaking, people often just use CSMA.
