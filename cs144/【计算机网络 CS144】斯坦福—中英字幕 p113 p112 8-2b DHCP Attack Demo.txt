# Detected language: en (p=1.00)

[0.00s -> 6.92s]  In the following video, I'm going to demo how an attacker can masquerade as a DHCP server,
[6.92s -> 10.52s]  forcing Alice's machine to be incorrectly configured.
[10.52s -> 15.12s]  In the example, she's going to be forced to use a rogue DNS server, taking her to
[15.12s -> 21.60s]  the wrong IP addresses for web servers she's trying to access.
[21.60s -> 25.94s]  In our demo, three hosts are connected to switch S1.
[25.94s -> 30.82s]  Host H1 is Alice's machine, which is running a good DHCP client.
[30.82s -> 36.02s]  The host DHCP runs a good DHCP server.
[36.02s -> 44.68s]  The DHCP server configures Alice's machine to use a good DNS server out in the internet.
[44.68s -> 51.00s]  Host Evil is run by Eve the attacker, and runs a rogue DHCP server, a rogue DNS
[51.00s -> 53.82s]  server, and a rogue web server.
[54.38s -> 59.74s]  Initially, we'll assume that Eve has not started her attack, and we'll see a Mininet
[59.74s -> 64.74s]  demo of the good DHCP server correctly configuring Alice's machine so that she can access
[64.74s -> 66.40s]  the internet just fine.
[66.40s -> 72.48s]  Then, we'll see what happens if Eve's machine masquerades as the local DHCP server,
[72.48s -> 76.00s]  replying faster than the good DHCP server.
[76.00s -> 80.60s]  Eve will configure Alice's machine to use the rogue DNS server, directing Eve's
[80.60s -> 84.06s]  web traffic to Eve's web server as well.
[84.06s -> 85.62s]  Let's see what happens.
[85.62s -> 90.04s]  The demonstration shows how simple a DHCP attack is, if the attacker has access to
[90.04s -> 94.90s]  the local network, and can install a rogue DHCP client close to the victim.
[94.90s -> 98.66s]  The demo I'm going to show you runs in the Mininet emulation system, which means
[98.66s -> 101.96s]  you can easily and safely run it yourself on your own computer, and I'll tell you
[101.96s -> 103.96s]  shortly how you can do that.
[103.96s -> 108.06s]  It also means the same code can easily be replicated into a real network.
[108.06s -> 112.10s]  This demo was created by Bob Lantz at the Open Networking Lab in Palo Alto.
[112.10s -> 117.82s]  H1 runs a DHCP client and is initially configured correctly by a nearby host running a good
[117.82s -> 121.12s]  DHCP server for the local network.
[121.12s -> 126.50s]  Evil is run by Eve the attacker, and runs a rogue DHCP server.
[126.50s -> 133.68s]  The DHCP server host is connected to S1 via a 500ms link to delay its DHCP responses
[133.68s -> 135.02s]  to Alice.
[135.02s -> 139.34s]  We need the delay to be sure Alice will hear the evil DHCP responses before the good
[139.34s -> 140.54s]  ones.
[140.54s -> 145.18s]  Alice uses host H1 to browse the web using her Firefox browser.
[145.18s -> 149.22s]  As we can see, she successfully can reach the Stanford website.
[149.22s -> 153.98s]  Her computer H1 runs a DHCP client to configure her IP address, the address of her local
[153.98s -> 157.22s]  router and her DNS server.
[157.22s -> 162.10s]  If we use the dig command to look up another name like amazon.com, we can see that the
[162.10s -> 169.02s]  DNS server, in this case a public DNS server run by Google at IP address 8.8.8.8, is responding
[169.02s -> 174.74s]  to the query with Amazon's IP addresses and the site loads as expected in Firefox.
[174.74s -> 177.98s]  Eve the attacker starts three processes on the evil host.
[177.98s -> 182.02s]  A rogue DHCP server, a rogue DNS server and a web server.
[182.02s -> 186.66s]  Eve is going to force all of Alice's web accesses to go to Eve's web server instead.
[186.66s -> 192.32s]  Every so often our DHCP client is required to renew its lease on its IP address.
[192.32s -> 200.86s]  In Wireshark, we can see that when H1 issues a DHCP discover, the good DHCP server at 10.0.0.50
[200.86s -> 205.58s]  responds with an offer that contains the address of the legitimate DNS server at 8.8.8.8.
[205.58s -> 210.82s]  But unfortunately, Alice's machine hears the offer from the rogue DHCP first and accepts
[210.82s -> 211.82s]  it.
[211.82s -> 212.82s]  Alice is now in trouble.
[212.82s -> 219.42s]  Alice's machine now uses Eve's rogue DNS server, which is also at 10.0.0.66.
[219.42s -> 223.86s]  When Alice's browser asks for the IP address of google.com, the rogue DNS server tells
[223.86s -> 231.18s]  Alice's machine to use Eve's web server instead.
[231.18s -> 236.26s]  When she revisits amazon.com, most of the correct site appears, since Firefox has
[236.26s -> 238.58s]  cached the DNS result.
[238.58s -> 243.94s]  But as soon as Firefox does a new DNS lookup, which we can force by pressing Shift-Refresh,
[243.94s -> 248.82s]  she is given the IP address of Eve's rogue web server instead.
[248.82s -> 252.82s]  If she visits a new site like yahoo.com, then she will also end up at the rogue
[252.82s -> 253.92s]  site.
[253.92s -> 256.58s]  You can imagine many bad things that Eve could do.
[256.58s -> 261.10s]  She could simply deny or block access to particular websites for Alice.
[261.10s -> 265.12s]  Or she could copy the look and feel of those websites that Alice visits and masquerade
[265.12s -> 270.48s]  it as an e-commerce site, forcing Alice to reveal her credit card or other personal information.
[270.48s -> 274.84s]  Or she could simply sit as a transparent proxy, watching and recording all of Alice's
[274.84s -> 275.84s]  traffic.
[275.84s -> 280.24s]  When we switch off the evil DHCP client and the DNS server, Alice will eventually
[280.24s -> 283.94s]  go back to using the correct local DHCP server.
[283.94s -> 288.58s]  The first time she revisits the same website, her browser, in this case Firefox, might
[288.58s -> 293.20s]  have cached the bad DNS lookup and still try and go to the evil web server.
[293.20s -> 296.80s]  But eventually, Alice's host will start using the correct DNS server, and her network
[296.80s -> 301.44s]  will start working correctly again.
[301.44s -> 305.56s]  The video shows just how easy it is to attack a network if you have access to the
[305.56s -> 307.24s]  local traffic.
[307.24s -> 312.04s]  If you can intercept and beat the DHCP traffic flowing in the network, then you can install
[312.04s -> 317.02s]  a DNS server, you can then install and redirect traffic to your own web server, or any
[317.02s -> 319.08s]  other type of traffic.
[319.08s -> 322.10s]  Very easy if you have access to the local network.
[322.10s -> 326.26s]  If you want to run this demo for yourself, then you can just download the script shown
[326.26s -> 330.46s]  below at the URL on the screen, and then run it in your own Mininet instance.
