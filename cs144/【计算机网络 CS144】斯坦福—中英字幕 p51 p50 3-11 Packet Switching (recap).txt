# Detected language: en (p=1.00)

[0.00s -> 6.30s]  In this unit, you learned a lot about packet switching, this was an intense unit.
[6.30s -> 10.94s]  We started out with a look at why modern networks, including the internet, are built on a foundation
[10.94s -> 12.68s]  of packet switching.
[12.68s -> 15.88s]  Packet switching is simple, in the sense that each packet is a self-contained unit
[15.88s -> 22.08s]  of data that carries the information necessary for it to reach its destination.
[22.08s -> 25.96s]  Packet switching is efficient in the sense that it keeps a link busy whenever there
[25.96s -> 33.24s]  is work to be done, rather than have dedicated capacity reserved for each user or application.
[33.24s -> 36.96s]  Packet switching can potentially help the network recover quickly from failures.
[36.96s -> 41.54s]  The simple forwarding paradigm, with no per-flow state in each router, makes it easier to
[41.54s -> 45.88s]  quickly route around link and router failures.
[45.88s -> 50.76s]  Next we dived deep deep deep into some of the consequences of packet switching.
[50.76s -> 53.70s]  This took us on a journey that included more math than you'll see in any other
[53.70s -> 55.88s]  unit of this course.
[55.88s -> 60.52s]  Packet switching dynamics determine many of the timing and performing characteristics
[60.52s -> 64.64s]  of the internet, and so you really need to have a strong understanding of the packet
[64.64s -> 66.84s]  dynamics.
[66.84s -> 70.22s]  The main mathematical ideas are not that complicated, and it's worth mastering them
[70.22s -> 73.78s]  now so you can build a strong intuition.
[73.78s -> 78.90s]  You now know why two packets traveling between the same two end hosts might encounter a different
[78.90s -> 80.70s]  delay.
[80.70s -> 84.66s]  While the time they spend traversing each link is the same, the packets might take
[84.66s -> 89.88s]  different paths and experience different queuing delays in the routers along the way.
[89.88s -> 94.78s]  It's absolutely crucial that you fully understand the main three components of packet delay
[94.78s -> 100.26s]  – the packetization delay, the propagation delay, and the queuing delay – and that
[100.26s -> 103.24s]  you understand the physical processes that cause them.
[103.24s -> 106.04s]  You should get into the habit of sketching and using the simple deterministic queue
[106.04s -> 107.56s]  model that I taught you.
[107.56s -> 111.18s]  It's a simple geometric construct, and it lets you visualize what's going on.
[111.18s -> 114.30s]  It tells us why routers have buffers, and gets us thinking about how big they should
[114.30s -> 115.30s]  be.
[115.30s -> 119.00s]  It tells us why streaming applications need a playback buffer to give a smooth listening
[119.00s -> 121.66s]  or viewing experience for the user.
[121.66s -> 127.00s]  We'll use the same method later when we study congestion control as well.
[127.00s -> 133.74s]  Finally, we use the simple deterministic model to learn how a network can go beyond
[133.74s -> 136.68s]  just simple first-come-first-serve packet delivery.
[136.68s -> 140.64s]  Packet switch network can guarantee the rate that each flow receives, and even bound
[140.64s -> 144.08s]  the delay a packet experiences from one end of the network to the other.
[144.08s -> 147.36s]  These require some careful thinking about – don't worry if it took a long time to
[147.36s -> 152.20s]  get the hang of it, as there are some difficult concepts at first.
[152.20s -> 153.42s]  But they're important.
[153.42s -> 158.08s]  If you can understand how a packet switch network can provide both rate and delay guarantees,
[158.08s -> 164.08s]  then you have a strong understanding of how packet switching works.
[164.08s -> 166.68s]  You learned a lot in this unit.
[166.68s -> 170.28s]  First, queuing delay and end-to-end delay.
[170.28s -> 175.08s]  You learned that the time it takes for a packet to travel between two end hosts is determined
[175.08s -> 176.76s]  by three components.
[176.76s -> 181.36s]  First, we have to transmit the packet over each link in turn.
[181.36s -> 184.52s]  The time it takes to write the packet onto each link is determined by the time
[184.52s -> 189.92s]  it takes to write each bit multiplied by the number of bits in the packet.
[189.92s -> 192.96s]  We call this the packetization delay.
[192.96s -> 196.96s]  Second, the bits have to propagate down the cable or through the air to the other end
[196.96s -> 198.00s]  of the link.
[198.04s -> 202.12s]  The propagation delay is determined by the speed of propagation, which is close to the
[202.12s -> 206.48s]  speed of light, and the distance the bits travel.
[206.48s -> 211.56s]  Make sure the difference between propagation delay and packetization delay is clear in
[211.56s -> 215.08s]  your mind, because it's a frequent cause for confusion.
[215.08s -> 221.04s]  Third, the end-to-end delay has a variable component, the queuing delay.
[221.04s -> 225.48s]  Because the internet uses packet switching, the routers have buffers to hold packets
[225.48s -> 230.04s]  during time of congestion, and so the queuing delay depends on how busy the network is
[230.04s -> 231.04s]  right now.
[231.04s -> 235.00s]  Later, when we study wireless, we'll see that wireless links add more variability
[235.00s -> 239.96s]  to the delay, because wireless links are noisy, so packets frequently need to be retransmitted,
[239.96s -> 244.80s]  and they can actually have variable-changing packetization delays.
[248.80s -> 253.36s]  Real-time streaming applications, such as Skype, YouTube, and Netflix, need to deliver
[253.40s -> 258.32s]  continuous real-time voice and video to our ears and eyes, even though the network delivers
[258.32s -> 260.96s]  packets at unpredictable times.
[260.96s -> 266.84s]  All streaming applications use a playback buffer to smooth out the variations in packet
[266.84s -> 271.60s]  delay, so they can play the video and audio to the user without having to pause and wait
[271.60s -> 274.08s]  for new data in the middle.
[274.08s -> 279.24s]  You learned how to design a playback buffer, and you learned why it is not possible for
[279.24s -> 282.84s]  the internet to completely avoid pauses in the playback.
[282.84s -> 287.44s]  Packets can experience a large delay, causing the playback buffer to run dry.
[287.44s -> 291.60s]  If you fully understand how a playback is designed, then you have a good understanding
[291.60s -> 297.72s]  of packet dynamics on the internet.
[297.72s -> 301.20s]  Queuing delay in routers is a complex topic all on its own.
[301.20s -> 305.00s]  The view of queuing theory is very mathematically rich, and you can take classes and read
[305.00s -> 308.32s]  many books just on this topic.
[308.32s -> 314.40s]  In general, queues with complicated, random arrival processes are complex beasts.
[314.40s -> 318.32s]  A network consisting of a series of router queues with many computing flows from random
[318.32s -> 325.72s]  users and different applications is way hard to understand and analyze in closed form.
[325.72s -> 328.20s]  But our goal here is much less ambitious.
[328.20s -> 334.08s]  We want you to develop some intuition about how queues evolve and how to become familiar
[334.08s -> 335.68s]  with their dynamics.
[335.68s -> 339.60s]  Just like the queue at airport security, a router queue holds the packets that have
[339.60s -> 342.00s]  arrived but not yet departed.
[342.00s -> 347.16s]  If we can keep track of arrivals and departures, then we can know how deep the queue is and
[347.16s -> 350.32s]  how long an arriving packet must wait.
[350.32s -> 355.12s]  The deterministic queue model is a geometric representation of packets in the queue, letting
[355.12s -> 358.48s]  us visualize how the queue evolves over time.
[358.48s -> 363.36s]  It's good practice to use this geometric model to help you build your intuition of
[363.36s -> 367.44s]  how the math works.
[367.44s -> 372.72s]  The deterministic queue model helps us understand rate guarantees.
[372.72s -> 376.56s]  Sometimes we want a particular flow of packets to receive a particular fraction of the network
[376.56s -> 377.56s]  capacity.
[377.56s -> 380.52s]  For example, Stanford might have a contract with AT&T guaranteeing that its traffic will
[380.52s -> 384.36s]  always receive at least 10 Gbps of service.
[384.36s -> 387.00s]  Over the link that attaches to AT&T, that's easy to do.
[387.00s -> 390.80s]  We simply connect it with a 10 Gbps link.
[390.84s -> 395.00s]  AT&T could also make this guarantee by putting all of the Stanford packets into a queue in
[395.00s -> 399.44s]  their routers, making sure they have 10 Gbps of service.
[399.44s -> 403.04s]  This can be done in very aggregated traffic, like all of Stanford's packets, or it
[403.04s -> 405.44s]  can be done in individual applications.
[405.44s -> 412.54s]  We might ask Comcast to provide at least 1 Mbps to stream our Netflix videos.
[412.54s -> 416.88s]  You learned how to serve every queue in a router at a minimum rate.
[416.88s -> 420.36s]  If all packets were the same length, this would be trivial.
[420.36s -> 424.30s]  But different packets have different lengths, and so we need to take into consideration
[424.30s -> 426.64s]  how long each packet is.
[426.64s -> 429.00s]  This is where weighted for queuing comes in.
[429.00s -> 433.74s]  It tells us the correct order to serve packets in the router queues so as to take
[433.74s -> 439.08s]  into consideration the length of individual packets.
[439.08s -> 444.24s]  This same idea can be extended to provide delay guarantees.
[444.24s -> 447.56s]  Now we know how to control the rate at which a queue is served.
[447.56s -> 451.20s]  We can control the maximum delay a packet can experience in the queue.
[451.20s -> 455.20s]  It is simply the length of the queue divided by the rate.
[455.20s -> 461.00s]  All we need to do is limit the length of the queue so we can bound the delay.
[461.00s -> 466.00s]  Finally, you learned how packets are switched and forwarded.
[466.00s -> 469.90s]  As you saw, Ethernet switches in Internet routers work in very similar ways.
[469.90s -> 472.76s]  When a packet arrives, it looks up the destination address in its forwarding table.
[472.76s -> 476.32s]  If it finds the address, it forwards the packet to its destination, holding it in
[476.32s -> 479.68s]  a buffer if the outgoing link is currently busy.
[479.68s -> 487.08s]  Ethernet switches in Internet routers differ in which address they use and how they organize
[487.08s -> 489.32s]  the forwarding tables.
[489.32s -> 493.16s]  And of course, an Internet router needs to decrement the TTL field to prevent loops.
[493.16s -> 502.60s]  But at a high level, packet switches all operate in roughly the same way.
[502.60s -> 506.32s]  The things you learned in this unit will help you in several ways.
[506.32s -> 507.52s]  1.
[507.52s -> 511.64s]  You can take the description of a network, the rates and length of the links, and
[511.64s -> 515.92s]  the length of a packet, and figure out the fixed component of the packet's end-to-end
[515.92s -> 518.08s]  delay.
[518.08s -> 521.76s]  You can visualize the variable queueing delay by sketching the queue, which is the most
[521.76s -> 526.20s]  common cause for variable end-to-end delay in a network.
[526.20s -> 530.12s]  You can explain how a packet switch works, such as an Ethernet switch or an Internet
[530.12s -> 531.96s]  router.
[532.00s -> 535.92s]  You can design a playback buffer for a real-time application.
[535.92s -> 539.88s]  And you can explain how a flow traversing a packet switch network can be delivered
[539.88s -> 541.60s]  at a minimum rate.
[541.60s -> 546.32s]  And you can explain how individual packets can have a bounded delay from end-to-end.
