# Detected language: en (p=1.00)

[0.00s -> 5.40s]  In this video, I'm going to tell you about what packet switching is, and why packet
[5.40s -> 8.16s]  switching is used in the Internet.
[8.16s -> 12.24s]  Packet switching was first described by Paul Baron in the early 1960s.
[12.24s -> 16.08s]  It describes the way in which packets of information are routed one by one across
[16.08s -> 21.84s]  the Internet to their destination, just like letters are delivered by the post office.
[21.84s -> 24.96s]  Packet switching is really important for us to understand, because when we choose
[24.96s -> 31.32s]  to use packet switching, it dictates many of the properties of the network.
[31.32s -> 37.28s]  Today I'm going to describe what packet switching is, and why it was chosen for the Internet.
[37.28s -> 42.76s]  But first, to set some context, I'm going to tell you about a predecessor of packet
[42.76s -> 46.92s]  switching that was called circuit switching, and we're all very familiar with circuit
[46.92s -> 51.68s]  switching because it's what's used in the telephone network.
[51.72s -> 56.76s]  So the most common use of circuit switching is in the telephone, the traditional wired
[56.76s -> 57.76s]  telephone network.
[57.76s -> 63.28s]  And we're going to walk through what happens when we place a phone call from the phone
[63.28s -> 67.12s]  on the left to the one on the right.
[67.12s -> 72.00s]  Now in the picture I've got here, it shows the telephones being connected by a dedicated
[72.00s -> 75.84s]  wire, and that wouldn't make for a very interesting telephone system if we could only
[75.84s -> 78.76s]  talk to one other person.
[78.76s -> 86.16s]  So in practice, the telephones are connected together through a dedicated wire down to
[86.16s -> 89.48s]  a switching centre.
[89.48s -> 95.48s]  So in the early days of telephony, back in the 1880s or so, the dedicated wire went
[95.48s -> 100.48s]  to a switchboard operator, and the switchboard operator was a roomful of people who would
[100.48s -> 104.48s]  take a dedicated wire from the input and connect it to the dedicated wire to the
[104.48s -> 106.64s]  phone that you were connecting to.
[107.52s -> 112.56s]  So it was all manually connected, but the main point here is that the wire is dedicated
[112.56s -> 118.80s]  for the phone conversation from the start to the end of the phone call.
[118.80s -> 124.28s]  Nowadays of course we don't have room full of switchboard operators, and instead
[124.28s -> 129.40s]  we use automatic circuit switches that set up the circuit for us from one phone to
[129.40s -> 132.68s]  our friend's phone at the other end.
[132.68s -> 137.52s]  So it helps to think of a phone call having three phases.
[137.52s -> 141.08s]  First we pick up the handset and dial the number.
[141.08s -> 144.48s]  And dialing the number is saying, where do we want to be connected to?
[144.48s -> 150.16s]  And this creates a dedicated circuit from one end to the other.
[150.16s -> 153.88s]  So that dedicated circuit is going to go through all of the circuits along the way,
[153.88s -> 158.64s]  and the system has told each of the circuits to connect an incoming wire to an
[158.64s -> 163.80s]  outcoming wire, or an incoming circuit to an outcoming circuit.
[163.80s -> 168.52s]  So each switch is going to maintain the state to map that incoming circuit to the correct
[168.52s -> 170.68s]  outgoing circuit.
[170.68s -> 173.56s]  And then in the second phase we talk.
[173.56s -> 178.56s]  In a digital phone system, like most phone systems are today, our voice is sampled and
[178.56s -> 181.52s]  digitized at the first switch.
[181.52s -> 188.04s]  And then it's sent over the dedicated circuit as typically a 64 kilobit per second channel
[188.04s -> 190.32s]  for voice.
[190.32s -> 193.96s]  So our phone conversation has a dedicated circuit or channel all the way along the path,
[193.96s -> 197.36s]  and the circuit is not shared with anyone else.
[197.36s -> 202.40s]  And then finally when we hang up, the circuit has to be removed, and any state in the switches
[202.40s -> 208.56s]  along the path has to be removed as well.
[208.56s -> 216.04s]  So in practice, between the switches, there are trunk lines which are really really fast.
[216.04s -> 218.92s]  In other words, they have a very high data rate.
[218.92s -> 223.16s]  Even the slow ones run at 2.5 gigabits per second, and the fastest ones today run
[223.16s -> 227.04s]  at 40 or even 100 gigabits per second.
[227.04s -> 231.08s]  Sometimes you'll hear people call these big trunk lines big fat pipes because of
[231.08s -> 234.02s]  the volume of data they can send.
[234.02s -> 239.24s]  But actually, these big fat pipes are really tiny skinny little optical fibers thinner
[239.24s -> 241.44s]  than one of your hairs.
[241.44s -> 246.24s]  Only thousands of phone calls can share that same trunk line between cities, each in its
[246.24s -> 249.60s]  own dedicated circuit.
[249.60s -> 254.76s]  The key thing here to remember is every phone call has its own dedicated 64 kilobit
[254.76s -> 260.84s]  per second circuit that it doesn't have to share with anybody else.
[260.84s -> 266.78s]  So in summary, we can think of circuit switching as having the following characteristics.
[266.78s -> 272.34s]  Each call has its own private, guaranteed, isolated data rate from end-to-end.
[272.34s -> 276.86s]  Second, the call has three phases, establish, communicate, and close.
[276.86s -> 283.02s]  And third, originally a circuit was an end-to-end physical wire, but nowadays it's made up
[283.02s -> 284.50s]  of a virtual private wire.
[284.50s -> 289.98s]  It's going to share that wire with others, but it has its own dedicated circuit within
[289.98s -> 290.98s]  that wire.
[290.98s -> 294.58s]  There are a few problems with circuit switching.
[294.58s -> 298.58s]  Usually it's worked very well for the phone system, but when we're thinking about using
[298.58s -> 304.94s]  circuit switching for the internet or any computer communications, there are a few shortcomings
[304.94s -> 306.58s]  that we need to consider.
[306.58s -> 310.74s]  So I'm going to go through three main problems.
[310.74s -> 315.16s]  The first one is it's inefficient.
[315.16s -> 318.70s]  When computers communicate, they tend to be very bursty.
[318.70s -> 325.82s]  We tend to send data in bursts of maybe a few seconds, a few packets, maybe even a
[325.82s -> 328.46s]  few minutes, depending on the application that we're running.
[328.46s -> 335.18s]  For example, if I'm typing over an SSH connection, then I'm going to have characters that I'm
[335.18s -> 339.14s]  going to send every now and again, sometimes a flurry of characters as I type a word,
[339.14s -> 341.68s]  and then long periods of silence in between.
[341.68s -> 345.78s]  Or if I'm reading a sequence of web pages, I might have a burst as I fill up one page,
[345.78s -> 351.12s]  a burst as I fill up the figures to populate that page, and then a little period of pause
[351.12s -> 353.14s]  while I read those web pages.
[353.14s -> 354.70s]  So it tends to be very bursty.
[354.70s -> 362.78s]  And of course during those times of silence when I'm not doing anything, there's no activity,
[362.78s -> 366.14s]  I've got this dedicated circuit which nobody else can use.
[366.14s -> 373.36s]  So it's very inefficient, very inefficient use of the capacity of the network as a whole.
[373.36s -> 380.60s]  The second thing is computers tend to have very diverse applications that need very different rates.
[380.60s -> 382.30s]  Computers communicate at many, many different rates.
[382.30s -> 389.28s]  So a web server might be streaming video at, say, 1, 5, or even 6 megabits per second.
[389.28s -> 393.56s]  But if you compare that with me typing one character every second, there's a huge
[393.56s -> 397.08s]  difference in the rates that the network needs to support.
[397.08s -> 402.16s]  So if we pick a fixed rate circuit for the video, and then I use it for typing,
[402.68s -> 407.64s]  it'll be barely used, or vice versa, then I wouldn't even be able to stream the video.
[407.64s -> 412.16s]  So a fixed rate circuit really isn't much use at all.
[412.16s -> 416.92s]  The third one, the third problem with circuit switching is all of the state that we need to maintain.
[416.92s -> 420.88s]  We need to maintain some state for every phone call that's going on.
[420.88s -> 424.96s]  Every time we've established a call, we need to set up the circuit mapping from the ingress
[424.96s -> 428.32s]  to the egress of every switch along the way.
[428.40s -> 432.60s]  If a circuit fails, or a switch fails, or a link fails, we need to go in and change
[432.60s -> 436.12s]  all of that state in order to reroute the calls.
[436.12s -> 437.12s]  So we have to manage it.
[437.12s -> 439.64s]  And then at the end, we need to remember to take the state out.
[439.64s -> 444.68s]  If anything fails, then we may find that the state becomes inconsistent, and then
[444.68s -> 445.68s]  we have a problem.
[445.68s -> 449.56s]  So state management in circuit switches is considered a problem.
[449.56s -> 453.72s]  And if we had thousands or hundreds of thousands of communications going on at the same time,
[453.72s -> 456.32s]  that's just a lot of work that has to be done.
[458.52s -> 463.52s]  So let's take a look at packet switching in contrast to circuit switching.
[466.32s -> 469.12s]  So again, we're going to look at two end systems communicating.
[469.12s -> 473.68s]  In this case, we're going to look at this laptop on the left, A, and it's going to
[473.68s -> 476.32s]  be talking to the server on the right, B.
[478.64s -> 484.12s]  In practice, these, of course, could be anywhere in the internet.
[484.12s -> 488.72s]  So in packet switching, there's no dedicated circuit to carry our data.
[488.72s -> 493.12s]  Instead, we just send, when we're ready, at any time we want, we send a block of
[493.12s -> 495.92s]  data by adding a header to it.
[495.92s -> 498.72s]  That's what we call the packet.
[498.72s -> 502.52s]  And the header contains the address of where the packet is going, just like an envelope
[502.52s -> 505.52s]  tells the post office where to send the letter.
[505.92s -> 513.92s]  The packet switch network consists of the end hosts, the links, and packet switches.
[516.92s -> 523.92s]  When we send a packet, it's routed one hop at a time from the source, in this case,
[523.92s -> 527.92s]  the laptop, A, all the way through to the destination, B.
[527.92s -> 533.92s]  If you look at the packet, it has the data in it, and it also has the address,
[534.32s -> 536.32s]  B, of where it's going to.
[536.32s -> 539.32s]  We'll see later that packets are a little bit more complicated than this, but this is
[539.32s -> 541.32s]  the bare information, the minimum information that it needs.
[541.32s -> 546.32s]  The data we want to get to B, and then the address, B, of where it's going to.
[550.32s -> 554.32s]  So when we send the packet, it's going to be routed hop by hop from the source to
[554.32s -> 556.32s]  the destination.
[556.32s -> 561.32s]  Each packet switch along the way is going to look up the address in a forwarding table.
[561.72s -> 564.72s]  So it keeps a local forwarding table in all of the packet switches.
[564.72s -> 571.72s]  And here I've got a forwarding table saying if we see the address, B, then we're
[571.72s -> 575.72s]  going to send it to, on the next hop, to S2.
[575.72s -> 578.72s]  And this is S2 over here.
[578.72s -> 584.72s]  So once this switch, S1, sees this packet, it's going to look it up in its table
[584.72s -> 588.72s]  and send it along to switch S2.
[588.72s -> 590.72s]  And this is it going along its way.
[591.12s -> 593.12s]  The next switch, S2, will have its own table.
[593.12s -> 596.12s]  And of course, that table is going to be different from S1's, because it's going to
[596.12s -> 600.12s]  have a different set of next hops for each of the addresses that it sees.
[600.12s -> 604.12s]  So then it's going to send it along its way, this time to S4, and then
[604.12s -> 607.12s]  eventually to the correct destination.
[611.12s -> 616.12s]  So in the internet, there's lots of different types of packet switch.
[616.52s -> 620.52s]  Some of them are called routers, because they deal with addresses that are
[620.52s -> 622.52s]  internet addresses.
[622.52s -> 627.52s]  And they may include little routers that we have on our desks at home, or huge
[627.52s -> 630.52s]  routers that are in big wiring closets and big switching centers.
[630.52s -> 632.52s]  But we call those routers.
[632.52s -> 634.52s]  There are also things called ethernet switches.
[634.52s -> 637.52s]  And we're going to look at the difference between different types of packet switch
[637.52s -> 639.52s]  in a later lecture.
[639.92s -> 642.92s]  I showed you one packet.
[642.92s -> 647.92s]  And of course, at any instance, there's going to be many packets flowing
[647.92s -> 648.92s]  across the internet.
[648.92s -> 651.92s]  Millions and millions of packets flowing, and all sorts of different...
[651.92s -> 656.92s]  And they're all being routed, hop by hop, one at a time, by the
[656.92s -> 658.92s]  packet switches along the path.
[658.92s -> 662.92s]  So there'll be many flows of communication going in all sorts of directions
[662.92s -> 663.92s]  at the same time.
[663.92s -> 665.92s]  So these packet switches have a lot of work to do.
[666.32s -> 671.32s]  And remember, they're routing each packet, one at a time, by picking the next hop
[671.32s -> 674.32s]  that it goes to and sending it on its way.
[676.32s -> 679.32s]  We're going to take a quick look inside packet switches at some of their
[679.32s -> 680.32s]  relevant features.
[680.32s -> 684.32s]  So I already told you that packet switches have a forwarding table to tell
[684.32s -> 686.32s]  it where the packet goes next.
[686.32s -> 688.32s]  They also have to have buffers.
[688.32s -> 690.32s]  So packet switches have buffers.
[690.32s -> 692.32s]  And let me explain why that is.
[692.32s -> 694.32s]  So in the middle here, we've got a packet switch.
[694.72s -> 699.72s]  And this packet switch is going to be receiving these two packets that I've got
[699.72s -> 701.72s]  here and here.
[701.72s -> 704.72s]  So we're going to look at what happens as these packets go through the
[704.72s -> 705.72s]  packet switch.
[705.72s -> 711.72s]  If they both arrive at the same time, and let's say they're arriving at the
[711.72s -> 716.72s]  full line rate of the outgoing link, then the packet switch has to hold one
[716.72s -> 719.72s]  of them while it sends the other.
[719.72s -> 721.72s]  Can't send them both at the same time.
[721.72s -> 723.72s]  So it's going to send one at a time.
[724.12s -> 728.12s]  And because it might have many incoming links, the packet switch has to have
[728.12s -> 730.12s]  a buffer to hold perhaps many, many packets.
[730.12s -> 735.12s]  And we're going to see that these buffers can be quite large in practice.
[737.12s -> 740.12s]  So the buffers hold packets when two or more packets arrive at the same
[740.12s -> 741.12s]  time.
[741.12s -> 745.12s]  And particularly during periods of congestion when there's lots and lots of
[745.12s -> 748.12s]  packets coming in and all of these input links all trying to get to the
[748.12s -> 753.12s]  same output, it may actually have quite big buffers to hold packets during
[753.52s -> 755.52s]  those times of congestion.
[759.52s -> 764.52s]  So, in summary, packets are routed individually by looking up the address
[764.52s -> 766.52s]  in the router's local forwarding table.
[766.52s -> 770.52s]  All packets share the full capacity of a link.
[770.52s -> 775.52s]  And third, the routers maintain no per communication state.
[775.52s -> 777.52s]  Now this is really quite key.
[777.52s -> 781.52s]  In a circuit switch, remember, we need to maintain state associated with
[781.92s -> 784.92s]  every circuit we're maintaining.
[784.92s -> 786.92s]  Here we maintain none.
[786.92s -> 789.92s]  We just maintain the forwarding table.
[789.92s -> 795.92s]  And then there's no per communication, no per packet or no per flow state
[795.92s -> 798.92s]  associated with that communication.
[799.92s -> 801.92s]  So why does the internet use packet switching?
[801.92s -> 805.92s]  Probably pretty obvious by now, but I really wanted to spell that out.
[805.92s -> 807.92s]  There were three original reasons.
[808.32s -> 813.32s]  Two of them I've got listed here that the internet used packet switching.
[813.32s -> 819.32s]  The first two are very obvious and come from what I've just described.
[819.32s -> 823.32s]  The first one is packet switching allows us to use expensive links
[823.32s -> 825.32s]  efficiently.
[825.32s -> 827.32s]  So efficient use of expensive links.
[827.32s -> 829.32s]  Links were assumed to be expensive and scarce.
[829.32s -> 833.32s]  The first links that interconnected the packet switches across the backbone
[833.32s -> 836.32s]  of the internet were running at a few kilobits per second.
[836.72s -> 840.72s]  So they were expensive and everybody knew that they would become
[840.72s -> 843.72s]  there would be a scarce resource.
[843.72s -> 848.72s]  Packet switching allows many, many bursty flows to share those same links
[848.72s -> 850.72s]  very efficiently.
[850.72s -> 853.72s]  Because at any one instant the packet can use the entire link.
[853.72s -> 857.72s]  But it can be immediately followed by another packet using the entire link
[857.72s -> 860.72s]  belonging to a different communication.
[860.72s -> 863.72s]  So there was a famous textbook by Batsikas and Galak had said
[863.72s -> 865.72s]  circuit switching is rarely used for data networks
[866.12s -> 869.12s]  because of very inefficient use of the links.
[869.12s -> 872.12s]  So the second big reason for using packet switching was
[872.12s -> 879.12s]  it's widely felt that packet switching allows for more resilient networks.
[879.12s -> 883.12s]  Networks that are resilient to the failure of links and routers.
[883.12s -> 888.12s]  And the reason for this is that because each packet is individually routed
[888.12s -> 890.12s]  along the path
[890.12s -> 893.12s]  if something happens, if something breaks
[893.52s -> 896.52s]  a link breaks or a router breaks
[896.52s -> 901.52s]  because we have no state in all of the switches for this particular flow
[901.52s -> 905.52s]  we can simply send the packet on a different path.
[905.52s -> 908.52s]  We can send it over a different link to a different router
[908.52s -> 910.52s]  and it will find its way eventually.
[912.52s -> 915.52s]  So for this reason Tannenbaum and another famous textbook had said
[915.52s -> 919.52s]  for high reliability the internet was to be a datagram subnet.
[919.52s -> 921.52s]  So if some lines and routers were destroyed
[921.92s -> 924.92s]  the messages could easily be rerouted.
[924.92s -> 927.92s]  And the third big reason that the internet used packet switching
[927.92s -> 932.92s]  was the internet was originally designed as an interconnection of existing networks.
[932.92s -> 939.92s]  And at that time pretty much all widely used communication networks
[939.92s -> 941.92s]  all computer networks were packet switched.
[941.92s -> 945.92s]  And so if the internet was to interconnect all of those existing networks
[945.92s -> 948.92s]  then it too needed to be packet switched as well.
[949.32s -> 952.32s]  OK, this is the end of the first video about packet switching.
[952.32s -> 956.32s]  By now you should be able to answer these three questions very easily.
[956.32s -> 960.32s]  In the next few videos we're going to learn more about packet switching
[960.32s -> 964.32s]  some basic definitions, some ways to model packet switching
[964.32s -> 967.32s]  and some properties of packet switching that have been developed over the years.
[967.32s -> 969.32s]  See you soon.
