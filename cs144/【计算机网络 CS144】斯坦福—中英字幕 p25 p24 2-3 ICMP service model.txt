# Detected language: en (p=1.00)

[0.00s -> 4.20s]  In this video, I'm going to continue the topic of the 4-layer Internet model, and I'm
[4.20s -> 6.92s]  going to tell you about the ICMP service model.
[6.92s -> 12.40s]  ICMP is the Internet Control Message Protocol, and it's used to report errors and diagnose
[12.40s -> 14.20s]  problems with the network layer.
[14.20s -> 18.44s]  You'll recall that IP doesn't provide any guarantees about delivery, but it does
[18.44s -> 23.20s]  help and it will prove to be a very valuable tool to get some hints and information back
[23.20s -> 28.56s]  from the network layer to tell us about when things are going wrong.
[28.56s -> 32.88s]  There are three mechanisms that we use to make the network layer work in the Internet.
[32.88s -> 36.34s]  The first we've already seen is the Internet Protocol, or IP.
[36.34s -> 41.96s]  This creates IP datagrams, and then delivers them hop-by-hop from end to end.
[41.96s -> 45.12s]  The second are the routing tables sitting inside the routers.
[45.12s -> 49.08s]  There are algorithms that run to populate these router forwarding tables so that the
[49.08s -> 54.46s]  routers know how to deliver them hop-by-hop to the other end.
[54.46s -> 58.50s]  The third mechanism, which is the purpose of this video, is ICMP, or the Internet Control
[58.50s -> 59.90s]  Message Protocol.
[59.90s -> 65.30s]  ICMP helps communicate information about the network layer between the end hosts and
[65.30s -> 66.30s]  the routers.
[66.30s -> 68.22s]  I'm going to show you a couple of examples of those in a minute.
[68.22s -> 73.46s]  It's typically used to report error conditions, and helps us diagnose problems, figure out
[73.46s -> 76.46s]  the path taken by packets, and so on.
[76.46s -> 81.78s]  ICMP runs above the network layer, and so strictly speaking it's a transport layer
[81.78s -> 83.30s]  protocol.
[83.30s -> 89.26s]  When an end host or router wants to report an error using ICMP, it puts the information
[89.26s -> 96.54s]  it wants to send back to the source into an ICMP payload, and hands it to IP to be
[96.54s -> 98.90s]  sent as a datagram.
[98.90s -> 100.90s]  Let's look at an example.
[100.90s -> 106.14s]  As I said, ICMP typically gets used as a method for error reporting.
[106.14s -> 110.66s]  In fact, you've seen it if you've ever seen the message, Destination Network
[110.66s -> 111.66s]  unreachable.
[111.82s -> 112.82s]  Let's look at an example.
[112.82s -> 117.14s]  Imagine that I have a web client running as the application here.
[117.14s -> 123.38s]  So I've got an HTTP or web client here that's going to be accessing an HTTP server
[123.38s -> 126.02s]  over here at B.
[126.02s -> 133.38s]  So as we've seen before, the application bytes for HTTP get put into the transport
[133.38s -> 138.30s]  layer as usual, into TCP, comes down to the network layer, goes out along the link,
[138.30s -> 139.74s]  comes up to the router along here.
[139.74s -> 146.22s]  Imagine that the address that is put in here is actually to a network that this router
[146.22s -> 148.86s]  has no information about in its forwarding table.
[148.86s -> 152.94s]  Now this would be a pretty bad situation, because that router doesn't know how to
[152.94s -> 155.70s]  forward the packet to B.
[155.70s -> 161.26s]  But if that happens, then the router will send back a message, and so this will come
[161.26s -> 177.06s]  back down through the network to A, and it will say in it, destination, network, unreachable.
[177.06s -> 181.82s]  And that's simply saying that it has no means to deliver that packet to B, so it's
[181.82s -> 185.54s]  alerting A by sending that back.
[185.54s -> 189.02s]  And we'll see the format that it uses in a moment.
[189.02s -> 192.10s]  So basically the ICMP service model is very, very simple.
[192.10s -> 196.22s]  It allows it to send a reporting message, a self-contained message reporting the error.
[196.22s -> 199.34s]  It's unreliable in the sense that it sends a simple datagram.
[199.34s -> 203.14s]  It doesn't attempt to resend it, it doesn't maintain any state of the messages that it
[203.14s -> 204.14s]  sent.
[204.14s -> 209.14s]  It simply sends back a digest, giving an indication of what the problem was.
[209.14s -> 215.92s]  And in fact, how it actually works is, when a message comes in, so for example an IP datagram,
[215.92s -> 221.44s]  so here is my IP datagram, here is the header, here is the payload, or the data portion
[221.44s -> 224.80s]  of my IP datagram, so this is my IP datagram.
[224.80s -> 228.16s]  Let's say that this has just arrived, and in my previous example, this has arrived
[228.16s -> 230.62s]  from A to the first router.
[230.62s -> 236.00s]  If the first router wants to send back an ICMP message, what it does is it takes the
[236.00s -> 243.16s]  header, now this header here has source address A and destination address B, and it
[243.16s -> 249.72s]  will populate this into, it will place this into an ICMP message.
[249.72s -> 258.68s]  So it will take this header, and put it into the ICMP message, this is my ICMP message.
[258.68s -> 265.44s]  And it will also take the first 8 bytes of the IP payload, and it will put this
[265.44s -> 267.52s]  into the ICMP message.
[267.52s -> 273.44s]  And then it marks it with a type, and a code, and we'll see some examples of these types
[273.44s -> 275.78s]  and codes in a moment.
[275.78s -> 281.40s]  And then the whole lot gets placed into a new IP datagram, so this is the data of
[281.40s -> 287.24s]  the new IP datagram, and this is going to be sent back, so this is the header,
[287.24s -> 294.20s]  and so the IP source will be the router, so I'll just put R for router, and the
[294.20s -> 300.44s]  IP destination in my example will be A. It's going to send it back to A to tell it that
[300.44s -> 305.04s]  this was the error, this was the type of error, this is how it figures out what type
[305.04s -> 310.28s]  of error it was, this was the data associated with that error, it's the IP datagram that
[310.28s -> 316.12s]  was originally causing the problem, that's all placed into the data of the IP datagram
[316.12s -> 318.16s]  that goes back again to A.
[319.16s -> 324.60s]  Here's a quick example of some particular ICMP message types.
[324.60s -> 328.20s]  There are a lot of message types, this is just a sampling of them.
[328.20s -> 331.60s]  These are the six most important that we see, and you don't need to remember the
[331.60s -> 338.52s]  types or the codes, you'll find those in the Internet RFC 792, and you can just
[338.52s -> 341.72s]  look that up online if you want.
[341.72s -> 344.68s]  These are the ones that are most commonly used, and I'll just go through examples.
[344.68s -> 350.36s]  We've already seen the network unreachable, this was type 3 code 0, and there are two
[350.36s -> 352.72s]  other destination unreachable ones.
[352.72s -> 357.56s]  Host unreachable, that's if an IP datagram gets to the last router, but then the last
[357.56s -> 359.70s]  router doesn't know where the host is.
[359.70s -> 367.00s]  Port unreachable means that the port that's contained inside, or the protocol ID that's
[367.00s -> 370.46s]  inside the IP datagram, it doesn't know what to do with it, it doesn't recognize
[370.46s -> 373.24s]  it at the other end.
[373.24s -> 379.80s]  We'll see how echo reply, echo request, and TTL expired are used in a moment.
[379.80s -> 387.28s]  Okay, you've probably used the ping command before, and ping is used just to test the
[387.28s -> 393.36s]  liveness of another host, and it also checks that we've got connectivity to that
[393.36s -> 394.36s]  host.
[394.36s -> 398.20s]  So imagine that we're sending a ping message from A to B.
[398.20s -> 404.08s]  So we're sitting at A, and we run the command ping b.
[404.08s -> 406.84s]  And you've probably done this, if you haven't, just try this on your computer.
[406.84s -> 419.10s]  Pick the name of a computer, like www.stanford.edu, and just type ping www.stanford.edu.
[419.10s -> 422.90s]  The ping application calls ICMP directly.
[422.90s -> 429.42s]  It sends an ICMP echo request, and so that will be a message that goes into the network.
[429.42s -> 440.06s]  So this is an ICMP, and it happens to be a message of type 8, code 0.
[440.06s -> 445.94s]  If you look on the table before, that's actually an echo request.
[445.94s -> 451.36s]  And then that gets encapsulated at A into an IP datagram.
[451.36s -> 457.60s]  So this is my IP datagram, and it's going to go off to B.
[457.60s -> 461.54s]  As this goes through the network, it's going to go across to B, we hope.
[461.54s -> 465.20s]  Eventually it'll reach B. And then B is going to see this, and what B is required
[465.20s -> 468.00s]  to do is to send an echo reply.
[468.00s -> 477.34s]  So it will send back towards A, it will send the ICMP, and the ICMP will be a, I think
[477.34s -> 486.48s]  it was type 0, code 0, which is the echo reply.
[486.48s -> 493.34s]  This gets placed into an IP datagram, so this will all be placed into the IP datagram,
[493.34s -> 496.10s]  and it'll be sent back to A. Nice and simple.
[496.10s -> 499.02s]  So that's how ping works.
[499.02s -> 502.62s]  Now let's have a look at how traceroute works.
[502.62s -> 506.30s]  Traceroute is an application that tells us the path that packets take through the
[506.30s -> 510.14s]  network and the routers that it visits along the way.
[510.14s -> 516.18s]  You can try this by simply typing traceroute and then the name of a web server or some
[516.18s -> 522.18s]  other server on the network into your computer, as I'm showing here.
[522.18s -> 524.78s]  Traceroute is going to tell us not only the path taken by packets, but the round
[524.78s -> 528.94s]  trip delay to each of the routers along the path.
[528.94s -> 533.42s]  So traceroute uses ICMP in quite a clever way.
[533.42s -> 540.54s]  So the goal here of traceroute is to find the routers on the path from A to B. So it's
[540.54s -> 546.34s]  trying to identify the two routers along the path, and measure the round trip time
[546.34s -> 550.90s]  of packets from A to each of those routers.
[550.90s -> 556.66s]  So traceroute does this by sending UDP messages, and I'm first going to describe
[556.66s -> 560.74s]  what it does, and then we'll see why it is that that works.
[560.74s -> 567.14s]  So A is going to send a UDP message, so it's going to send a UDP message, and that UDP
[567.14s -> 575.38s]  message is going to be sent, doesn't actually matter what it contains, but it will be encapsulated
[575.38s -> 582.02s]  into an IP datagram, for which the TTL, the time to live field in the IP header,
[582.02s -> 585.10s]  is set to 1.
[585.10s -> 588.96s]  So this will be sent over the link from A to the first router.
[588.96s -> 595.28s]  And as you recall, the router is required to decrement the TTL, and then discard the
[595.28s -> 597.96s]  packet if the TTL reaches 0.
[597.96s -> 602.00s]  So it will set TTL equals 0, discard the packet.
[602.00s -> 606.52s]  One more thing that the router is required to do is to send back an ICMP message, so
[606.52s -> 613.48s]  an error reporting message, back to A, and it sends it back with a message of, I think
[613.48s -> 621.44s]  it's type 11, ICMP, okay, so it's going to send back a type 11 message, which is
[621.44s -> 625.48s]  the TTL expired.
[625.48s -> 628.20s]  That's the ICMP message, TTL expired.
[628.20s -> 633.68s]  This is going to tell A, and in order for that packet to reach A, it's going to take,
[633.68s -> 641.52s]  just as before, it's going to take the IP header that was sent, and it's going to
[641.52s -> 646.64s]  take the first 8 bytes of the IP payload, and it's going to populate that into a message
[646.64s -> 649.28s]  along with this ICMP.
[649.28s -> 651.68s]  So let's draw this like this.
[651.68s -> 657.12s]  So this is going to be the ICMP message coming in here, this is going to be that
[657.12s -> 662.24s]  digest of the original IP message, going to put this into an IP datagram, and it's going
[662.24s -> 666.96s]  to send it back to A. So when this reaches A, it's going to know from this message
[666.96s -> 674.96s]  there was a TTL expired, and from this portion, from the payload portion of the ICMP message,
[674.96s -> 679.52s]  it's going to know, aha, this came from a message I originally sent from A. It's going
[679.52s -> 685.56s]  to come from the router, so the IP source address of this datagram is going to be the
[685.56s -> 690.24s]  router, so I'll put that in as R. So that knows that it was this router, it can
[690.24s -> 696.60s]  look up its name, and now it knows that the first hop router is R, and by measuring
[696.64s -> 702.32s]  the time that it took from when it sent the original IP message until it received this
[702.32s -> 709.52s]  ICMP reply, it now knows the round trip time to that router.
[709.52s -> 711.76s]  The next step is probably pretty obvious.
[711.76s -> 717.32s]  Next A is going to send a UDP message, put into an IP datagram, and that is going
[717.32s -> 722.32s]  to have a TTL of 2.
[722.32s -> 724.52s]  So this is the IP datagram that goes out.
[724.52s -> 728.64s]  So it'll go through to the first router, that'll decrement the TTL to 1, come through
[728.64s -> 733.80s]  to the second one, it'll decrement it to 0, and then this one will send back
[733.80s -> 736.96s]  an ICMP message, so the datagram will look like this.
[736.96s -> 741.40s]  I'll now draw the IP datagram with the ICMP message inside.
[741.40s -> 744.02s]  So this is the IP datagram.
[744.02s -> 751.72s]  This is going to be going to A from, let's call it R2.
[751.72s -> 757.40s]  And inside is going to be the ICMP message, so this is the ICMP message that it's carrying.
[757.40s -> 762.54s]  It's going to say type 11, which was the TTL expired.
[762.54s -> 771.12s]  And then it's going to have the original IP header plus 8 bytes, so that when it gets
[771.12s -> 775.96s]  backed away, it knows what message this was referring to, it can measure the round
[775.96s -> 776.96s]  trip time.
[776.96s -> 783.56s]  So now it knows, based on the message coming from R2, it knows what this router is, so
[783.56s -> 788.84s]  it can look up its name, and now it knows the round trip time to that router.
[788.84s -> 792.44s]  And it'll do this until eventually the message finds its way to B.
[792.44s -> 798.50s]  The UDP message that it sends is using a port number, which is a weird destination
[798.50s -> 803.44s]  port number, it deliberately picks one that B is not going to know.
[803.44s -> 808.44s]  So the B will send back a message that says, and it's going to be an ICMP message, which
[808.44s -> 812.60s]  is port unreachable.
[812.60s -> 817.58s]  And so when it sends back the port unreachable, A knows that the message got, the traceroute
[817.58s -> 822.84s]  made it all the way to B, and knows that the traceroute is complete.
[822.84s -> 827.40s]  So in summary, ICMP, the Internet Control Message Protocol, provides information about
[827.40s -> 830.18s]  the network layer to end hosts and routers.
[830.18s -> 833.70s]  It sits above the IP layer, and therefore strictly speaking it's a transport layer
[833.70s -> 837.84s]  mechanism, although it's really there to serve the network layer.
[837.84s -> 842.58s]  The commonly used tools Ping and Traceroute both rely on ICMP, and I'd encourage you
[842.58s -> 845.94s]  to try both of them out and play with them, they give you a huge amount of information
[845.94s -> 849.44s]  about reachability and paths through the Internet.
[849.44s -> 850.26s]  That's the end of this video.
