# Detected language: en (p=1.00)

[0.00s -> 5.48s]  In this unit you learned about network security and just how dangerous the
[5.48s -> 11.00s]  internet can be. You learned that when thinking about security this is the
[11.00s -> 14.76s]  model you should assume. The network is not your friend. It's controlled by the
[14.76s -> 21.12s]  adversary. Specifically an adversary can eavesdrop on anything you
[21.12s -> 24.88s]  transmit. An adversary can tamper with and rewrite your messages. An
[24.88s -> 29.72s]  adversary can suppress messages you send so they don't arrive. An adversary
[29.76s -> 34.88s]  can spoof someone or else are you. An adversary can act as a man in the
[34.88s -> 39.52s]  middle and intercept your traffic before passing it on. An adversary can redirect
[39.52s -> 43.96s]  or hijack communication at layer 2 through Ethernet mechanisms, at layer 3
[43.96s -> 48.56s]  through ICMP or other protocols, and at layer 4 by injecting new segments into
[48.56s -> 54.12s]  a TCP stream. Many mechanisms designed with the best of intentions turn out to
[54.12s -> 57.72s]  be powerful weapons in the hands of an adversary both for accessing your data
[57.96s -> 64.64s]  and for denying access to network systems. But there's hope. You learned
[64.64s -> 68.76s]  that three basic security principles can empower you to build secure systems
[68.76s -> 74.00s]  even in the face of such attacks. The first, confidentiality, lets you
[74.00s -> 78.24s]  communicate secretly even if someone else can read your messages. Using
[78.24s -> 81.40s]  confidentiality you can communicate with another party over an untrusted
[81.40s -> 85.96s]  network and be confident that no one else can read your traffic, or at the
[85.96s -> 89.28s]  very least it's computationally intractable for someone to read your
[89.28s -> 93.88s]  traffic. The second principle is integrity. Integrity lets you be sure
[93.88s -> 97.48s]  that no one has tampered with your data along the way. You learned about
[97.48s -> 101.84s]  cryptographic mechanisms that let you very inexpensively verify
[101.84s -> 105.80s]  that a piece of data hasn't been changed. The third principle is
[105.80s -> 110.44s]  authenticity. With authenticity you can be sure that the other party has a
[110.44s -> 115.24s]  secret. This can be a secret you've shared beforehand or a secret that
[115.28s -> 119.12s]  they can prove they have. You of course can't be sure who the other
[119.12s -> 123.20s]  party is, but you can at least be sure that they have a secret that
[123.20s -> 126.08s]  only someone else you trust has.
[128.84s -> 132.20s]  Practically speaking, you also learned a whole bunch of security
[132.20s -> 135.16s]  tools that can achieve these principles. You learned about
[135.16s -> 139.24s]  symmetric cryptography, where two parties share a secret. You learned
[139.24s -> 143.12s]  about block ciphers, which transform fixed blocks of data. You learned
[143.12s -> 145.92s]  about the dangers of electronic codebook mode, and how cipher
[145.92s -> 150.80s]  block chaining mode solves them. You also learned about
[150.80s -> 154.00s]  cryptographic hashes. They have the wonderful property that they are
[154.00s -> 156.96s]  easy to compute, but it would be intractable for an attacker to
[156.96s -> 160.24s]  generate an input which would compute to a specific hash value.
[161.00s -> 163.76s]  So if someone tells you the hash value of your software, you can
[163.76s -> 167.12s]  check it's correct. It's nearly impossible for someone to create a new
[167.12s -> 169.92s]  piece of software that has the same hash value. This is called
[170.04s -> 171.24s]  collision resistance.
[173.60s -> 176.36s]  You learned how you can combine cryptographic hashes with a shared
[176.36s -> 180.48s]  secret to generate a message authentication code or MAC. With a
[180.48s -> 183.20s]  MAC, you can be sure that no one else has tampered with the
[183.20s -> 186.80s]  message and that its sender has the secret. Simple ways of
[186.80s -> 189.40s]  generating a MAC are fraught with peril, so you should be
[189.40s -> 190.08s]  very careful.
[192.64s -> 195.88s]  But how do we learn these secrets? You learned about a
[195.88s -> 199.52s]  different kind of cryptographic system than symmetric cryptography
[199.64s -> 202.36s]  called public key cryptography.
[203.80s -> 207.00s]  With public key cryptography, there are two keys, one public
[207.00s -> 210.40s]  and one private. Information encrypted with a public key can
[210.44s -> 213.96s]  only be decrypted with a private key. So you can share
[213.96s -> 216.68s]  your public key freely, and everyone else can send you
[216.68s -> 221.04s]  encrypted data that only you can read. There are also ways
[221.04s -> 223.68s]  to generate message authentication codes using
[223.68s -> 227.00s]  public key encryption called signatures, which only a private
[227.00s -> 231.00s]  key can create, but which the public key can verify.
[233.00s -> 235.92s]  Finally, certificates are a way of establishing a chain of
[235.92s -> 239.32s]  trust to learn public keys. For example, if you trust
[239.32s -> 242.08s]  Apple, then Apple can sign a document telling you someone
[242.08s -> 245.48s]  else's public key. You can then use that public key to
[245.48s -> 246.44s]  communicate with them.
[249.08s -> 252.00s]  You've learned some of the basics of network security and
[252.00s -> 254.88s]  cryptography. There are a lot of details. They tried to
[254.88s -> 257.48s]  give you a sense of how these very important mechanisms
[257.48s -> 261.04s]  work. But if you take away one lesson from this unit,
[261.04s -> 263.76s]  however, it shouldn't be exactly how block cipher
[263.76s -> 267.64s]  works. It should be that in security, it's very easy to
[267.64s -> 270.76s]  make a mistake. So don't try to implement these
[270.76s -> 274.00s]  mechanisms yourself. It's too easy to miss a detail that
[274.00s -> 277.76s]  turns out to be a vulnerability. Use existing open
[277.76s -> 281.44s]  source implementations of crypto systems. Use well tested
[281.56s -> 283.64s]  and well understood approaches that people have
[283.64s -> 288.20s]  examined for a very long time. Finally, be careful and
[288.20s -> 289.68s]  follow best practices.
[291.52s -> 293.68s]  And remember, the NSA is listening.
